=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ExbApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExbApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ExbApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExbApi' do
    it 'should create an instance of ExbApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ExbApi)
    end
  end

  # unit tests for annual_values_exb
  # Annual Values
  # Returns an empty Exb showing the number of employees and total benefits for the year provided
  # @param employer_id 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @return [Exb]
  describe 'annual_values_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_exb
  # Create EXB
  # Creates a new Expenses And Benefits submission
  # @param employer_id 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Exb] :body 
  # @return [Eps]
  describe 'create_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_exb
  # Delete EXB
  # Deletes the EXB.
  # @param employer_id 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_exb
  # Get EXB
  # Retrieves the Expenses And Benefits submission specified
  # @param employer_id 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Exb]
  describe 'get_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_exb
  # List EXB
  # Returns all ExpensesAndBenefits for the given tax year.
  # @param employer_id 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'list_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_as_accepted_exb
  # Mark as Sent
  # Marks an Expenses And Benefits submission as having been sent to HMRC and accepted by them\\nYou would only use this method if the EXB had been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it&#x27;s submitted via this API.
  # @param employer_id 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Exb]
  describe 'mark_as_accepted_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for requiring_attention_exb
  # EXB Requiring Attention
  # Returns all Expenses And Benefits submissions that have a Submission Status of NotSubmitted or ErrorResponse
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'requiring_attention_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_exb
  # Submit EXB
  # Submits an existing Expenses And Benefits submission to HMRC.
  # @param employer_id 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Exb]
  describe 'submit_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_exb
  # Update EXB
  # Updates an existing Expenses And Benefits submission.
  # @param employer_id 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Exb] :body 
  # @return [Exb]
  describe 'update_exb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
