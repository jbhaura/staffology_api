=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PayRunApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PayRunApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PayRunApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PayRunApi' do
    it 'should create an instance of PayRunApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PayRunApi)
    end
  end

  # unit tests for aeo_pay_run
  # List AttachmentOrders related to a PayRun
  # Returns a List of Items representing any AttachmentOrders within the PayRun date range for Employees that are included in the given PayRun.\\n
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [Array<Item>]
  describe 'aeo_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for changes_for_pay_run_entry_pay_run
  # List PayRun Changes for PayRunEntry
  # Returns a list of AuditEntry reflecting changes made to a PayRunEntry and related employee record for a given PayRun  \\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.
  # @param employer_id 
  # @param id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :significant_changes_only 
  # @return [Array<AuditEntryInfo>]
  describe 'changes_for_pay_run_entry_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for changes_pay_run
  # List PayRun Changes
  # Returns a of changes made to a payrun.\\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :verbose By default you will just receive a list of employees that have changed.\\n              If you want a list of the changes too then set this to true
  # @return [PayRunModifications]
  describe 'changes_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_next_pay_run_pay_run
  # Starts the next PayRun
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [PayRun]
  describe 'create_next_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pay_run
  # Delete a PayRun
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [nil]
  describe 'delete_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for finalise_pay_run_pay_run
  # Finalise a PayRun (deprecated)
  # This endpoint is now deprecated and will be removed in Jan 2022.\\n  You should instead use the Update method and set the State to Finalised.    Returns True if the resulting FPS has been automatically submitted due to the Employers RTISubmissionSettings, otherwise returns false.\\n  You can suppress the emailing of payslips to employees by adding a key named dontEmailEmployeePayslips with a value of true to the body. See the related guides for more information.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Hash<String, null>] :body 
  # @option opts [Integer] :ordinal 
  # @return [BOOLEAN]
  describe 'finalise_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_entry_pay_run
  # Get a PayRunEntry
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [PayRunEntry]
  describe 'get_pay_run_entry_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_events_pay_run
  # Get PayPeriodEvents
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [Array<PaySchedulePeriodEvent>]
  describe 'get_pay_run_events_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_journal_pay_run
  # Get Journal for PayRun
  # Returns values that can be used to create accounting entries for this PayRun.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :dept_breakdown Set to true and the journal will be split between any relevant Departments
  # @return [PayRunJournal]
  describe 'get_pay_run_journal_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_pay_codes_pay_run
  # Get PayCodes for a PayRun
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [Array<PayCode>]
  describe 'get_pay_run_pay_codes_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_pay_run
  # Get a PayRun
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [PayRun]
  describe 'get_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_runs_pay_run
  # List PayRuns
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [Array<Item>]
  describe 'get_pay_runs_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_pay_pay_run
  # Import Pay
  # Takes a list PayOptionsImport and updates the currently open payrun to use the amounts given.\\n  You must have an open payrun for the PayPeriod specified and all payroll codes submitted must match an employee on the payrun.\\n  Any lines imported for a PayRunEntry will replace existing lines for that PayRunEntry.
  # @param employer_id 
  # @param pay_period 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PayOptionsImport>] :body 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :lines_only If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false.
  # @option opts [BOOLEAN] :append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false.
  # @return [PayRunEntry]
  describe 'import_pay_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_time_and_attendance_pay_run
  # Import Time And Attendance
  # If the employer is connected to an ExternalDataProvider that provides Time and Attendance data then this API  call will update the currently open payrun for the PayPeriod specified with data from the specified provider.\\n  Returns a list of PayOptionsImport to show what&#x27;s been imported.
  # @param employer_id 
  # @param pay_period 
  # @param [Hash] opts the optional parameters
  # @option opts [ExternalDataProviderId] :provider_id 
  # @option opts [Integer] :ordinal 
  # @return [Array<PayOptionsImport>]
  describe 'import_time_and_attendance_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_umbrella_pay_pay_run
  # Import Umbrella Pay
  # Takes a list UmbrellaPayment and updates the currently open payrun to use the amounts given.\\n  You must have an open payrun for the PayPeriod specified and all payroll codes submitted must match an employee on the payrun.\\n  You should have also set the UmbrellaSettings for the Employer
  # @param employer_id 
  # @param pay_period 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<UmbrellaPayment>] :body 
  # @option opts [Integer] :ordinal 
  # @return [PayRunEntry]
  describe 'import_umbrella_pay_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for leave_pay_run
  # List Leave related to a PayRun
  # Returns a List of Items representing any Leave within the PayRun date range for Employees that are included in the given PayRun.\\n  Note that if Leave was added after the PayRun was closed, but the Leave is within the PayRun period then it&#x27;ll be returned here even though it wouldn&#x27;t have been processed with the PayRun.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [Array<Item>]
  describe 'leave_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pay_run_entry_umbrella_payment_pay_run
  # PayRunEntry Umbrella Payment
  # Automatically sets the values on the PayRunEntry based on an UmbrellaPayment.\\n  Using this method overwrites any existing values for the PayRunEntry.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [UmbrellaPayment] :body 
  # @option opts [Integer] :ordinal 
  # @return [PayRunEntry]
  describe 'pay_run_entry_umbrella_payment_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for re_open_pay_run_pay_run
  # Re-open a PayRun (deprecated)
  # This endpoint is now deprecated and will be removed in Jan 2022. \\n  You should instead use the Update method and set the State to Open.    Re-opens a PayRun so that it can be edited.\\n  Only the most recent PayRun can be re-opened, and only if the Employer is still in the same TaxYear as the PayRun and there are no open PayRuns.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [PayRun]
  describe 're_open_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_payslip_emails_pay_run
  # (Re)send Payslip Emails
  # Payslips are usually emailed automatically when a PayRun is finalised. But if you suppressed them or need to re-send them then you can do so with this API call.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [nil]
  describe 'send_payslip_emails_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for start_next_pay_run_pay_run
  # Starts the next PayRun (deprecated)
  # This PUT will be removed in Jan 2022. You should instead use a POST to this URL
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [nil]
  describe 'start_next_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pay_run_entry_pay_run
  # Update a PayRunEntry
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [PayRunEntry] :body 
  # @option opts [Integer] :ordinal 
  # @return [PayRunEntry]
  describe 'update_pay_run_entry_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pay_run_pay_run
  # Update PayRun
  # Updates a PayRun to the state provided along with the reason (optional) for the change.
  # @param employer_id 
  # @param tax_year 
  # @param pay_period 
  # @param period_number 
  # @param [Hash] opts the optional parameters
  # @option opts [PayRunStateChange] :body Specify the PayRun state you want to change to and the reason for the change.
Only Open and Finalised states are available at the moment.
Other states are used with Bureau functionality which isn&#x27;t currently generally available.
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :send_payslip_emails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees.
  # @return [PayRun]
  describe 'update_pay_run_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_payment_date_pay_run
  # Set PaymentDate
  # Sets the PaymentDate for a PayRun.\\n  If the date given is outside of the TaxPeriod that the payrun is for then only the payment date for the individual   PayRunEntries is updated, the PayRun will retain it&#x27;s current PaymentDate
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :body 
  # @option opts [Integer] :ordinal 
  # @return [PayRun]
  describe 'update_payment_date_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for zeroise_pay_run_entries_pay_run
  # Zeroise PayRunEntries
  # Zeroises the payrun entries specified in the ids property
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body 
  # @option opts [Integer] :ordinal 
  # @return [PayRun]
  describe 'zeroise_pay_run_entries_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
