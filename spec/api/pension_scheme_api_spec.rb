=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PensionSchemeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PensionSchemeApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PensionSchemeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PensionSchemeApi' do
    it 'should create an instance of PensionSchemeApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PensionSchemeApi)
    end
  end

  # unit tests for contributions_for_payrun_pension_scheme
  # Contributions for Payrun
  # Returns contributions for a specific scheme and payrun
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme.
  # @param tax_year The TaxYear to query
  # @param pay_period 
  # @param period_number 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [PensionContributionsSubmission]
  describe 'contributions_for_payrun_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for contributions_pension_scheme
  # Contributions Data
  # Returns an ExternalProviderConversation showing data sent to and received from the ExternalDataProvider for the pension contribution submission.
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme.
  # @param tax_year The TaxYear of the submission
  # @param submission_id The Id of the Submission.
  # @param [Hash] opts the optional parameters
  # @return [ExternalProviderConversation]
  describe 'contributions_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pension_scheme
  # Create a PensionScheme
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [PensionScheme] :body 
  # @return [PensionScheme]
  describe 'create_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pension_scheme
  # Delete a PensionScheme
  # @param employer_id 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employees_pension_scheme
  # Get Employees
  # Returns the employees that are enrolled in the specified scheme
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme you want to retrieve Employees for.
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'employees_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pension_scheme
  # Get a PensionScheme
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme you want to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PensionScheme]
  describe 'get_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_pension_scheme
  # List PensionSchemes
  # @param employer_id The Id of the Employer for which you want to list PensionSchemes
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'index_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_contributions_pension_scheme
  # List Contributions
  # Returns a list of Items that tell you which PayRuns contain contributions to this scheme and the Url to the relevant report.\\n  IF the scheme is connected to an ExternalDataProvider then the status of the submission will also be included.
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme.
  # @param tax_year The TaxYear to query
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'list_contributions_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_as_sent_pension_scheme
  # Mark as Sent
  # Marks the Pension Contributions as sent
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme.
  # @param tax_year The TaxYear of the submission
  # @param submission_id The Id of the Submission.
  # @param [Hash] opts the optional parameters
  # @return [ExternalProviderConversation]
  describe 'mark_as_sent_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resubmit_contributions_pension_scheme
  # Re-submit Contributions
  # Re-submits previously failed Contributions to a Pension Scheme.
  # @param employer_id The Id of the Employer to which the PensionScheme belongs.
  # @param id The Id of the PensionScheme.
  # @param tax_year The TaxYear of the submission
  # @param submission_id The Id of the Submission to re-submit.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'resubmit_contributions_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pension_scheme
  # Update a PensionScheme
  # @param employer_id 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [PensionScheme] :body 
  # @return [PensionScheme]
  describe 'update_pension_scheme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
