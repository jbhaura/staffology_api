=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ReportsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ReportsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ReportsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReportsApi' do
    it 'should create an instance of ReportsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ReportsApi)
    end
  end

  # unit tests for ae_assessments_reports
  # AutoEnrolment Assessments
  # Returns a list of Items representing your current Employees along with their most recent Auto Enrolment Assessment in the metadata field.
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ItemListReportResponse]
  describe 'ae_assessments_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aeo_statement_reports
  # AEO Statement
  # Returns a statement for an Attachment Order, listing payments that have been made.
  # @param employee_id 
  # @param id The id of the AttachmentOrder
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employer_id 
  # @option opts [String] :accept 
  # @return [AttachmentOrderReportResponse]
  describe 'aeo_statement_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for analysis_reports
  # Analysis
  # Returns an AnalysisReport for one or multiple periods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
  # @return [AnalysisReportReportResponse]
  describe 'analysis_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bank_payment_instructions_reports
  # Bank Payment Instructions
  # Returns a list of bank payments that need to be made to employees as a result of a Payrun.\\n  You can optionally provide a PaymentDate and only payments for that date will be returned.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [DateTime] :payment_date 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :inc_pensions Set to true and we&#x27;ll include any payment due to Pension Providers
  # @option opts [BOOLEAN] :inc_hmrc Set to true and we&#x27;ll include any payment due to HMRC
  # @return [BankPaymentInstructionReportResponse]
  describe 'bank_payment_instructions_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cis300_reports
  # CIS300
  # Returns a CIS300 as a CSV or human-readable report
  # @param employer_id 
  # @param tax_year 
  # @param id The Id of CIS300.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [Cis300ReportResponse]
  describe 'cis300_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cis_statement_reports
  # CIS Statement
  # Returns a CIS Statement for the employee specified.
  # @param employer_id 
  # @param tax_year 
  # @param tax_month 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id Specify an employeeId to get a single statement.\\nIf you don&#x27;t provide a value then all Subcontractors will be included.
  # @option opts [String] :accept 
  # @return [CisStatementListReportResponse]
  describe 'cis_statement_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cis_sub_contractor_summary_reports
  # CIS Subcontractor Summary
  # Returns a list of all CIS Subcontractors along with verification details
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [CisSubContractorSummaryListReportResponse]
  describe 'cis_sub_contractor_summary_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cost_analysis_reports
  # Cost Analysis
  # Returns a report analysing the costs of a payrun or range of payruns.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [CostAnalysisReportReportResponse]
  describe 'cost_analysis_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cost_of_employment_reports
  # Cost Of Employment
  # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [CostOfEmploymentReportReportResponse]
  describe 'cost_of_employment_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_p45_reports
  # Email P45 to Employee
  # Email a P45 to an Employee you&#x27;ve marked as a leaver
  # @param employer_id The Id of the Employer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id The Id of the Employee you want the email a P45 to.
  # @return [nil]
  describe 'email_p45_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_p60_multiple_reports
  # Email P60 to all Employees
  # Email P60 to all Employee
  # @param employer_id The Id of the Employer.
  # @param [Hash] opts the optional parameters
  # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
  # @return [nil]
  describe 'email_p60_multiple_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_p60_reports
  # Email P60 to an Employee
  # Email a P60 to an Employee
  # @param employer_id The Id of the Employer.
  # @param employee_id The Id of the Employee you want the email a P60 to.
  # @param [Hash] opts the optional parameters
  # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
  # @return [nil]
  describe 'email_p60_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employee_export_reports
  # Employee Export Details
  # Returns a CSV file containing details for all Employees.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employer_id 
  # @option opts [TaxYear] :tax_year 
  # @option opts [BOOLEAN] :include_bank_account_details 
  # @option opts [BOOLEAN] :include_ytd 
  # @option opts [BOOLEAN] :inc_pension_info 
  # @option opts [BOOLEAN] :include_pay_info 
  # @option opts [BOOLEAN] :include_notes 
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'employee_export_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employer_export_reports
  # Employer Export
  # Returns a CSV file containing details for all Employers.
  # @param employer_id The Id of any employer to which you have access. It wont affect the report results.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'employer_export_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for example_payslip_reports
  # Example Payslip
  # Use this operation to test your PayslipCustomisation.\\n  We&#x27;ll use dummy date and create a Payslip PDF or HTML document based on the customisation that you submit
  # @param [Hash] opts the optional parameters
  # @option opts [PayslipCustomisation] :body Your PayslipCustomisation.
  # @option opts [String] :accept 
  # @option opts [String] :employer_id 
  # @return [ReportResponse]
  describe 'example_payslip_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exb_reports
  # EXB
  # Returns an EXB as a CSV file
  # @param employer_id 
  # @param tax_year 
  # @param id The Id of EXB.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ExbReportResponse]
  describe 'exb_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fps_reports
  # FPS
  # Returns an FPS as a CSV file
  # @param employer_id 
  # @param tax_year 
  # @param id The Id of FPS.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :inc_all_employees If true, then any employees that were paid earlier in the year but not on this FPS will also be included
  # @option opts [String] :accept 
  # @return [FpsReportResponse]
  describe 'fps_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for full_summary_of_pay_reports
  # Cost Of Employment
  # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [FullSummaryOfPayReportReportResponse]
  describe 'full_summary_of_pay_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for furlough_report_reports
  # FurloughReport
  # Returns a Furlough Report.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param period_number 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [FurloughReportReportResponse]
  describe 'furlough_report_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_csv_reports
  # Get PayRun CSV
  # Download the lines of a PayRun to a CSV file.\\n
  # @param employer_id 
  # @param tax_year 
  # @param pay_period 
  # @param period_number 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @option opts [PayRunCsvType] :csv_type Choose the type of CSV you want to generate
  # @option opts [String] :mapping_id If you provide the id of a PaymentCsvMapping that is column based then we&#x27;ll return the CSV formatted accordingly
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'get_pay_run_csv_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gross_to_net_reports
  # Gross To Net
  # Returns a report comparing employees&#x27; gross pay with their net pay for one or more pay periods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :for_cis If true then CIS Subcontractors are reported on.\\nIf all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false
  # @return [GrossToNetReportReportResponse]
  describe 'gross_to_net_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for holiday_reports
  # Holiday
  # Returns a report summarising holiday usage for all employees.
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [BOOLEAN] :accruals If set to true then you&#x27;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false.
  # @return [HolidayReportReportResponse]
  describe 'holiday_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for hourly_pay_reports
  # Hourly Pay
  # Returns a report summarising the hourly pay for employees for one or more pay periods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [HourlyPayReportReportResponse]
  describe 'hourly_pay_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p11_d_reports
  # P11D For Employee
  # Gets a P11D in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
  # @param employer_id The Id of the Employer.
  # @param employee_id The Id of the Employee.
  # @param tax_year The TaxYear the P60 is for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p11_d_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p11_detailed_multiple_reports
  # All Detailed P11s For TaxYear
  # Returns all detailed P11s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
  # @param employer_id The Id of the employer you want to report on
  # @param tax_year The tax year you want to report on.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p11_detailed_multiple_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p11_detailed_reports
  # P11 (Detailed)
  # Returns a detailed P11 Report for the given employee.
  # @param employer_id 
  # @param employee_id The employee Id of the employee you want to report on
  # @param tax_year The tax year you want to report on.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [P11DetailedReportResponse]
  describe 'p11_detailed_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p11_reports
  # P11
  # Returns a P11 Report, detailing all payments and deductions for the given employee
  # @param employer_id 
  # @param employee_id The employee Id of the employee you want to report on
  # @param tax_year The tax year you want to report on.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [P11ReportResponse]
  describe 'p11_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p30_reports
  # P30
  # Returns a P30 Report summarising the employers HMRC liabilities for the period.\\n  For available periods retrieve a list of HmrcLiability and examine the metadata.\\n  If the accept header is set to \&quot;text/csv\&quot; then the periodEnding parameter is ignored and you&#x27;ll receive a CSV for the entire TaxYear.
  # @param employer_id 
  # @param tax_year 
  # @param period_ending 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p30_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p32_reports
  # P32
  # Returns a P32 Report detailing the employers HMRC liabilities for the year.\\n
  # @param employer_id 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [P32ReportResponse]
  describe 'p32_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p45_reports
  # P45 For Employee
  # Get a P45 for an Employee you&#x27;ve marked as a leaver
  # @param employer_id The Id of the Employer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id The Id of the Employee you want a P45 for.
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p45_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p60_multiple_reports
  # All P60s For TaxYear
  # Returns all P60s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
  # @param employer_id The Id of the Employer.
  # @param tax_year The TaxYear you want P60s for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p60_multiple_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p60_reports
  # P60 For Employee
  # Gets a P60 in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
  # @param employer_id The Id of the Employer.
  # @param employee_id The Id of the Employee.
  # @param tax_year The TaxYear the P60 is for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [ReportResponse]
  describe 'p60_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for papdis_file_reports
  # PAPDIS File
  # Returns a PAPDIS compliant file for the PayRun and Pension Provider PAPDIS Id specified
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [PapdisDocumentReportResponse]
  describe 'papdis_file_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pay_run_csv_reports
  # PayRun CSV (deprecated)
  # Download the lines of a PayRun to a CSV file.\\n  Please use Get PayRun CSV that now accepts a parameter for CSV type
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :summary If set to true then instead of a line-by-line CSV, you&#x27;ll receive a summary for each employee
  # @return [ReportResponse]
  describe 'pay_run_csv_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pay_run_payments_reports
  # PayRun Payments
  # Returns a list of all employee payments that need to be made as a result of a Payrun.\\n  If you specifically want just bank payments (employees where PayMethod is Credit) then you  may find the Bank Payment Instructions API call more useful
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :include_non_employee_payments If set to true then we&#x27;ll also include payments that need to be made to HMRC and PensionProviders
  # @return [PayrunPaymentsReportReportResponse]
  describe 'pay_run_payments_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pay_run_summary_reports
  # PayRunSummary
  # Returns an array of PayRunSummaryLine for one or multiple periods. Similar to a PayRunJournal except that it can cover multiple periods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
  # @return [PayRunSummaryLineIEnumerableReportResponse]
  describe 'pay_run_summary_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payslip_reports
  # Payslip
  # Returns a single Payslip for the given PayRunEntry of a PayRun. The type of response depends on the accept header.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [PayslipReportResponse]
  describe 'payslip_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payslips_reports
  # Payslips
  # Returns a all Payslips for the given PayRun  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [BOOLEAN] :unemailed Set this to True if you only want the Payslips that haven&#x27;t been sent by email
  # @return [ReportResponse]
  describe 'payslips_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for right_to_work_reports
  # RightToWork
  # Returns a report summarising RightToWork information for all employees.
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept 
  # @return [RightToWorkReportReportResponse]
  describe 'right_to_work_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for statutory_pay_reports
  # Statutory Pay
  # Returns a report detailing statutory pay for one or more pay periods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @return [StatutoryPayReportReportResponse]
  describe 'statutory_pay_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for umbrella_reconciliation_reports
  # Umbrella Reconciliation
  # Returns an Umbrella Reconciliation report.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [String] :accept 
  # @option opts [Integer] :ordinal 
  # @option opts [String] :employee_id Specify an employee id to report on just that employee, otherwise all employees will be included.
  # @return [UmbrellaReconciliationReportReportResponse]
  describe 'umbrella_reconciliation_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for variance_report_reports
  # Variance Report
  # Returns a report comparing two pay periods or two ranges of payperiods.
  # @param employer_id 
  # @param pay_period 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @option opts [Integer] :from_period 
  # @option opts [Integer] :to_period 
  # @option opts [PayPeriods] :pay_period_compare 
  # @option opts [Integer] :ordinal_compare 
  # @option opts [TaxYear] :tax_year_compare 
  # @option opts [Integer] :from_period_compare 
  # @option opts [Integer] :to_period_compare 
  # @option opts [BOOLEAN] :show_percentage If true then any variations will be shown as a percentage.
  # @option opts [Float] :min_change Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored
  # @option opts [String] :accept 
  # @return [VarianceReportReportResponse]
  describe 'variance_report_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
