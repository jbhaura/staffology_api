=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::EmployeeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EmployeeApi' do
  before do
    # run before each test
    @instance = SwaggerClient::EmployeeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EmployeeApi' do
    it 'should create an instance of EmployeeApi' do
      expect(@instance).to be_instance_of(SwaggerClient::EmployeeApi)
    end
  end

  # unit tests for apply_pay_increase_employee
  # Apply Pay Increase
  # Increases the PayOptions.PayAmount and PayOptions.BaseHourlyRate by the percentage given.
  # @param employer_id The Id of the Employer to which the employees belong.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :percentage 
  # @option opts [BOOLEAN] :all_employees Set this to true
  # @return [nil]
  describe 'apply_pay_increase_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_pay_options_employee
  # Apply PayOptions
  # Overwrite the PayOptions for all employees with the values provided.\\n  Currently only the following fields are updated: period, payAmount, basis, payamountMultiplier, nationalMinimumWage and regularPaylines.
  # @param employer_id The Id of the Employer to which the employees belong.
  # @param [Hash] opts the optional parameters
  # @option opts [PayOptions] :body 
  # @return [nil]
  describe 'apply_pay_options_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for average_weekly_earnings_employee
  # Average Weekly Earnings
  # Calculates the Average Weekly Earnings for an Employee at the given date.\\n  You can optionally include a LeaveType and we&#x27;ll adjust the given date accordingly\\n  For example if you specify Maternity then it&#x27;ll be moved back by 15 weeks
  # @param employer_id The Id of the Employer
  # @param id The Employee Id.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :date The date at which you want to calculate the earnings from.
  # @option opts [LeaveType] :leave_type 
  # @return [AverageWeeklyEarnings]
  describe 'average_weekly_earnings_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for base_hourly_rate_employee
  # Calculate Base Hourly Rate
  # @param employer_id The Id of the Employer.
  # @param id The Employee Id.
  # @param [Hash] opts the optional parameters
  # @option opts [PayPeriods] :pay_period The frequency that this Employee is paid.
  # @option opts [PayBasis] :pay_basis 
  # @option opts [Float] :pay_amount The amount the Employee is regularly paid each period.
  # @return [Float]
  describe 'base_hourly_rate_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee
  # Create a new Employee
  # Creates an Employee for the Employer specified.\\nIf you don&#x27;t provide PayOptions then the DefaultPayOptions from the Employer will be used
  # @param employer_id The Id of the Employer you are creating the Employee for
  # @param [Hash] opts the optional parameters
  # @option opts [Employee] :body 
  # @return [Employee]
  describe 'create_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_employee
  # Delete an Employee
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_multiple_employee
  # Delete Employees
  # Used to delete multiple employees.\\n  The body should contain an array of Ids to identify the employees to delete.
  # @param employer_id The Id of the Employer to which the Employees belong
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body 
  # @return [nil]
  describe 'delete_multiple_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_photo_employee
  # Delete Photo
  # @param employer_id 
  # @param id The Id of the Employee you want to update.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_photo_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for expiring_rtw_employee
  # Expiring RightToWork
  # Returns a list of Item representing Employees that have a RightToWork with a DocumentExpiring date within the next numberOfDays days.
  # @param employer_id The Id of the Employer to search.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :number_of_days The number of days in the future to look got expiry dates.
  # @return [Array<Item>]
  describe 'expiring_rtw_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_department_memberships_employee
  # Get Employee Departments
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to retrieve Departments for.
  # @param [Hash] opts the optional parameters
  # @return [Array<DepartmentMembership>]
  describe 'get_department_memberships_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee
  # Get an Employee
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [Employee]
  describe 'get_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_csv_employee
  # Import CSV
  # Import employee data from a CSV file.
  # @param employer_id The Id of the Employer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :file 
  # @option opts [CsvFileFormat] :format The format of the CSV file.
  # @option opts [BOOLEAN] :preview_only Set to true and nothing will be imported but you&#x27;ll be shown a preview of the data.
  # @return [Array<Item>]
  describe 'import_csv_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_employee
  # List Employees
  # @param employer_id The Id of the Employer for which you want to see Employees
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_num Zero-based page number, used in conjunction with pageSize
  # @option opts [Integer] :page_size The number of items per page
  # @option opts [EmployeeStatus] :status Restrict the results to employees with the given status
  # @option opts [String] :dept_code If specified then only employees assigned to this department code will be listed
  # @return [Array<Item>]
  describe 'index_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for leavers_employee
  # List Leavers
  # Returns a list of all Employees that have a leaving date set
  # @param employer_id The Id of the Employer for which you want to see Leavers
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :only_unsent_p45s If set to true then only employees that don&#x27;t have the P45Sent set to true will be returned
  # @return [Array<Item>]
  describe 'leavers_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_as_leavers_employee
  # Mark as Leavers
  # Used to mark multiple employees as leavers.\\n  The body should contain an array of Ids to identify the employees to update.
  # @param employer_id The Id of the Employer to which the Employees belong
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body 
  # @option opts [DateTime] :date The date the employees left or are leaving
  # @option opts [BOOLEAN] :email_p45 If set to true, the employee will be email a P45 if they have an email address
  # @return [nil]
  describe 'mark_as_leavers_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for minimum_wage_employee
  # Minimum Wage
  # Calculates the National Minimum Wage for this employee for the given TaxYear and based on   their age at the given date
  # @param employer_id The Id of the Employer
  # @param id The Employee Id.
  # @param tax_year The TaxYear
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :date The date for which we should calculate the employees age, for not provided we&#x27;ll use todays date.
  # @return [Float]
  describe 'minimum_wage_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pay_run_entries_employee
  # PayRunEntries for Employee
  # List PayRunEntries for the given Employee in the specified TaxYear
  # @param employer_id The Id of the Employer to search.
  # @param id The Employee Id.
  # @param tax_year The TaxYear for which you want to list PayRunEntries.
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'pay_run_entries_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for re_hire_employee
  # Rehire an Employee
  # If an employee has left and you want to rehire him/her, then this method will create a copy of the employee record but with a new payroll code
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to rehire.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 're_hire_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_by_payroll_code_employee
  # Get Employee by Payroll Code
  # Get an employee by their payroll code. Will return an Item that contains the Id for you to retrieve the full Employee record
  # @param employer_id The Id of the Employer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :code The payroll code to look for.
  # @return [Item]
  describe 'search_by_payroll_code_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_employee
  # Search Employer for Employees
  # Search for an employee of the specified employer based on their name or payroll code.\\nEnsure your query is at least 3 characters long or you wont get any results.
  # @param employer_id The Id of the Employer to search.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :query The search string (at least 3 characters).
  # @option opts [BOOLEAN] :exlude_cis_sub_contactors If set to true, then we&#x27;ll only search employees that aren&#x27;t labelled as CIS Subcontractors
  # @return [Array<Item>]
  describe 'search_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_department_memberships_employee
  # Set Employee Departments
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to set Departments for.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<DepartmentMembership>] :body 
  # @return [Array<DepartmentMembership>]
  describe 'set_department_memberships_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_on_hold_employee
  # Mark as On Hold
  # Used to mark multiple employees as On Hold or not On Hold.\\n  The body should contain an array of Ids to identify the employees to update.
  # @param employer_id The Id of the Employer to which the Employees belong
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body 
  # @option opts [BOOLEAN] :on_hold The OnHold status to set
  # @return [nil]
  describe 'set_on_hold_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee
  # Update an Employee
  # @param employer_id The Id of the Employer to which the Employee belongs.
  # @param id The Id of the Employee you want to update.
  # @param [Hash] opts the optional parameters
  # @option opts [Employee] :body 
  # @return [Employee]
  describe 'update_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_photo_employee
  # Update Photo
  # If you already have a URL for the employee photo then you can just set the PhotoUrl property of the Employee.\\n  Alternatively, submit an image here and we&#x27;ll upload it, resize it to 200px squared and set the PhotoUrl for you.
  # @param employer_id 
  # @param id The Id of the Employee you want to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :file 
  # @return [Employee]
  describe 'update_photo_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
