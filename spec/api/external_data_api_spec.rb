=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ExternalDataApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExternalDataApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ExternalDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExternalDataApi' do
    it 'should create an instance of ExternalDataApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ExternalDataApi)
    end
  end

  # unit tests for authorize_external_data
  # Get Authorization Url
  # For ExternalDataProviders with an AuthScheme of OAuth1 or OAuth2.\\n  Returns a Url to redirect a user to in order to start the authorization process with the given ExternalDataProvider.\\n  Our API handles the response from the OAuth provider and processes it to obtain a token.\\n  The user is then sent to the URL specified.
  # @param employer_id The Id of the Employer.
  # @param id The Id of the ExternalDataProvider you want to authorize with.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :return_url The URL to send the user to once the process is complete.
  # @return [String]
  describe 'authorize_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for companies_external_data
  # List Companies
  # Return a list of companies from the external data provider
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<ExternalDataCompany>]
  describe 'companies_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disconnect_external_data
  # Disconnect
  # Disconnect from the external provider and revoke any OAuth token that has been received.
  # @param employer_id The Id of the Employer.
  # @param id The Id of the ExternalDataProvider you want to disconnect from.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disconnect_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employee_external_data
  # Get Employee
  # Return an ExternalEmployeeMapping for the specified Employee from the external data provider
  # @param id 
  # @param employer_id 
  # @param employee_id The Id of the employee in the external data provider
  # @param [Hash] opts the optional parameters
  # @return [ExternalEmployeeMapping]
  describe 'employee_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employee_logs_external_data
  # Get Employee Logs
  # Return a list of changes made locally to this employee based on changes in the external data provider
  # @param id 
  # @param employer_id 
  # @param employee_id The Id of the employee in the external data provider
  # @param [Hash] opts the optional parameters
  # @return [Array<LogEntry>]
  describe 'employee_logs_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for employees_external_data
  # List Employees
  # Return a list of ExternalEmployeeMapping for Employees in the external data provider.\\n  The metadata of the Item contains a field called externalId. This can be used to retrieve the full employee record.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'employees_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_config_data_external_data
  # Get Config Data
  # Returns any additional configuration data for the connection to the ExternalDataProvider.
  # @param employer_id The Id of the Employer.
  # @param id The Id of the ExternalDataProvider you want configuration data for.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_config_data_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_request_external_data
  # Http Get
  # Perform a GET to given URL of the specified ExtenalDataProvider API
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :url 
  # @return [nil]
  describe 'get_request_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_employees_external_data
  # Import Employees
  # Import Employees from the external data provider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body The externalIds to import
  # @return [Array<Item>]
  describe 'import_employees_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_external_data
  # List Providers
  # Returns a list of External Data Providers and indicates which the Employer has successfully authenticated with.
  # @param employer_id The Id of the Employer.
  # @param [Hash] opts the optional parameters
  # @return [Array<ExternalDataProvider>]
  describe 'list_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for nominal_codes_external_data
  # List Nominal Codes
  # Return a list of Nominal Codes from the external data provider
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'nominal_codes_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pension_contributions_csv_external_data
  # Contributions CSV File
  # Returns a CSV file containing contributions for the specified payrun in a format specific to the ExternalDataProvider
  # @param id 
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
  # @option opts [Integer] :ordinal 
  # @return [String]
  describe 'pension_contributions_csv_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_journal_external_data
  # Post Journal
  # Post a Journal for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the journal was necessarily successfully posted.\\n  The PayRunJournal is returned (without the Lines) so that you can inspect the status to determine success
  # @param id 
  # @param employer_id 
  # @param pay_period To identify the PayRun
  # @param period_number To identify the PayRun
  # @param tax_year To identify the PayRun
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force Set to true if you want to force the journal to be posted even if it already has been
  # @option opts [Integer] :ordinal 
  # @return [PayRunJournal]
  describe 'post_journal_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_payments_external_data
  # Post Payments
  # Post Payments for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the payments were necessarily successfully posted.\\n  The BankPaymentInstruction is returned (without the payments) so that you can inspect the status to determine success
  # @param id 
  # @param employer_id 
  # @param pay_period To identify the PayRun
  # @param period_number To identify the PayRun
  # @param tax_year To identify the PayRun
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :inc_employees Include payments for employees
  # @option opts [BOOLEAN] :inc_hmrc Include payments for HMRC (if any)
  # @option opts [BOOLEAN] :inc_pensions Include payments for Pension Providers (if any)
  # @option opts [BOOLEAN] :force Set to true if you want to force the payments to be posted even if it already has been
  # @option opts [Integer] :ordinal 
  # @option opts [DateTime] :payment_date Optional. If a value is provided then it&#x27;ll be used in place of the payment date for the payment.
  # @return [BankPaymentInstruction]
  describe 'post_payments_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_request_external_data
  # Http Post
  # Perform a GET to given URL of the specified ExtenalDataProvider API
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [] :body 
  # @option opts [String] :url 
  # @return [nil]
  describe 'post_request_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_employees_external_data
  # Push Employees
  # Push employees to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'push_employees_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_p11_d_external_data
  # Push P11D
  # Pushes a P11D for the given employee to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id 
  # @option opts [TaxYear] :tax_year 
  # @return [nil]
  describe 'push_p11_d_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_p11_ds_external_data
  # Push P11Ds
  # Pushes all P11Ds for the given TaxYear to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [TaxYear] :tax_year 
  # @return [nil]
  describe 'push_p11_ds_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_p45_external_data
  # Push P45
  # Push a P45 to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id 
  # @return [nil]
  describe 'push_p45_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_p60_external_data
  # Push P60
  # Pushes a P60 to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id 
  # @option opts [TaxYear] :tax_year 
  # @return [nil]
  describe 'push_p60_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_payslips_external_data
  # Push Payslips
  # Push payslips to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [PayPeriods] :pay_period 
  # @option opts [Integer] :period_number 
  # @option opts [TaxYear] :tax_year 
  # @option opts [BOOLEAN] :force 
  # @option opts [Integer] :ordinal 
  # @return [nil]
  describe 'push_payslips_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for push_pension_letter_external_data
  # Push Pension Letter
  # Pushes a Pension Letter for the given employee to the ExternalDataProvider.
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id 
  # @option opts [String] :assessment_id 
  # @return [nil]
  describe 'push_pension_letter_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for respond_external_data
  # 3rd Party Response
  # This endpoint is used by third parties to respond to an oAuth authorization request. You do not need to use this
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :error 
  # @return [nil]
  describe 'respond_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_config_data_external_data
  # Set Config Data
  # Sets the additional configuration data for the connection to the ExternalDataProvider.\\n  Only the value set in the userData field is updated
  # @param employer_id The Id of the Employer.
  # @param id The Id of the ExternalDataProvider you want configuration data for.
  # @param [Hash] opts the optional parameters
  # @option opts [] :body 
  # @return [nil]
  describe 'set_config_data_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_credentials_external_data
  # Set Credentials
  # For ExternalDataProviders with an AuthScheme of Basic.\\n  Sets the username and password for the service.
  # @param employer_id The Id of the Employer.
  # @param id The Id of the ExternalDataProvider you want to authorize with.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<StringStringKeyValuePair>] :body Any additional data that is needed (optional)
  # @option opts [String] :username The username for the ExternalDataProvider.
  # @option opts [String] :password The password for the ExternalDataProvider.
  # @return [nil]
  describe 'set_credentials_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sync_all_employees_external_data
  # Sync Employees
  # Syncs data from the ExternalDataProvider to update all mapped employees
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Item>]
  describe 'sync_all_employees_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sync_employee_external_data
  # Sync Employee
  # Syncs data from the ExternalDataProvider to update the specified mapped employee.\\n  Any changes made as a result of the sync are show in the metadata.logs property.
  # @param id 
  # @param employer_id 
  # @param employee_id The Id of the employee in the external data provider
  # @param [Hash] opts the optional parameters
  # @return [Item]
  describe 'sync_employee_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sync_leave_external_data
  # Sync Leave
  # Sync Leave from the ExternalDataProvider for the specified PayRun.\\n  Returns a JSON object indicating how many Leaves have been created, updated or deleted, etc.
  # @param id 
  # @param employer_id 
  # @param pay_period 
  # @param period_number 
  # @param tax_year 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ordinal 
  # @return [nil]
  describe 'sync_leave_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for time_and_attendance_external_data
  # Get Time And Attendance Data
  # Return a list of PayOptionsImport representing Time and Attendance data from the specified ExternalDataProvider, for to specified date range
  # @param id 
  # @param employer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :from 
  # @option opts [DateTime] :to 
  # @return [Array<PayOptionsImport>]
  describe 'time_and_attendance_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee_external_data
  # Update Employee
  # Update an ExternalEmployeeMapping to map/unmap/import/ignore an employee from an external data provider
  # @param id 
  # @param employer_id 
  # @param employee_id The Id of the employee in the external data provider
  # @param [Hash] opts the optional parameters
  # @option opts [ExternalEmployeeMapping] :body 
  # @return [ExternalEmployeeMapping]
  describe 'update_employee_external_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
