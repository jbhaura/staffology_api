=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class Cis300Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Cis300
    # A Cis300 is automatically created for each Tax Month that you pay a Subcontractor.\\n  You would only manually create one if you are intending to submit a nil return.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Cis300] :body 
    # @return [Cis300]
    def create_cis300(employer_id, tax_year, opts = {})
      data, _status_code, _headers = create_cis300_with_http_info(employer_id, tax_year, opts)
      data
    end

    # Create Cis300
    # A Cis300 is automatically created for each Tax Month that you pay a Subcontractor.\\n  You would only manually create one if you are intending to submit a nil return.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Cis300] :body 
    # @return [Array<(Cis300, Integer, Hash)>] Cis300 data, response status code and response headers
    def create_cis300_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.create_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.create_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.create_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Cis300' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#create_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Cis300
    # Not implemented, CIS300s cannot be deleted
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cis300(employer_id, tax_year, id, opts = {})
      delete_cis300_with_http_info(employer_id, tax_year, id, opts)
      nil
    end

    # Delete Cis300
    # Not implemented, CIS300s cannot be deleted
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cis300_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.delete_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.delete_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.delete_cis300"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Cis300Api.delete_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#delete_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Cis300
    # Retrieves a Cis300
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Cis300]
    def get_cis300(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = get_cis300_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Get Cis300
    # Retrieves a Cis300
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cis300, Integer, Hash)>] Cis300 data, response status code and response headers
    def get_cis300_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.get_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.get_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.get_cis300"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Cis300Api.get_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Cis300' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#get_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Cis300
    # Returns all Cis300s for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_cis300(employer_id, tax_year, opts = {})
      data, _status_code, _headers = list_cis300_with_http_info(employer_id, tax_year, opts)
      data
    end

    # List Cis300
    # Returns all Cis300s for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_cis300_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.list_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.list_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.list_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#list_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as Sent
    # Marks a Cis300 as having been sent to HMRC and accepted by them\\nYou only use this method if the request has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Cis300]
    def mark_as_accepted_cis300(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = mark_as_accepted_cis300_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Mark as Sent
    # Marks a Cis300 as having been sent to HMRC and accepted by them\\nYou only use this method if the request has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it&#x27;s submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cis300, Integer, Hash)>] Cis300 data, response status code and response headers
    def mark_as_accepted_cis300_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.mark_as_accepted_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.mark_as_accepted_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.mark_as_accepted_cis300"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Cis300Api.mark_as_accepted_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}/{id}/markasaccepted'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Cis300' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#mark_as_accepted_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cis300 Requiring Attention
    # Returns all Cis300 that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def requiring_attention_cis300(employer_id, opts = {})
      data, _status_code, _headers = requiring_attention_cis300_with_http_info(employer_id, opts)
      data
    end

    # Cis300 Requiring Attention
    # Returns all Cis300 that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def requiring_attention_cis300_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.requiring_attention_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.requiring_attention_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/requiringattention'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#requiring_attention_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit Cis300
    # Submits an existing Cis300 to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Cis300]
    def submit_cis300(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = submit_cis300_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Submit Cis300
    # Submits an existing Cis300 to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cis300, Integer, Hash)>] Cis300 data, response status code and response headers
    def submit_cis300_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.submit_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.submit_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.submit_cis300"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Cis300Api.submit_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}/{id}/submit'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Cis300' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#submit_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Cis300
    # Updates an existing Cis300.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Cis300] :body 
    # @return [Cis300]
    def update_cis300(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = update_cis300_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Update Cis300
    # Updates an existing Cis300.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Cis300] :body 
    # @return [Array<(Cis300, Integer, Hash)>] Cis300 data, response status code and response headers
    def update_cis300_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Cis300Api.update_cis300 ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling Cis300Api.update_cis300"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling Cis300Api.update_cis300"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Cis300Api.update_cis300"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/cis300/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Cis300' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Cis300Api#update_cis300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
