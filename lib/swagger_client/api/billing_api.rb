=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class BillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Bill
    # Returns the specified UsageBill
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [UsageBill]
    def bill_billing(id, opts = {})
      data, _status_code, _headers = bill_billing_with_http_info(id, opts)
      data
    end

    # Get Bill
    # Returns the specified UsageBill
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageBill, Integer, Hash)>] UsageBill data, response status code and response headers
    def bill_billing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.bill_billing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BillingApi.bill_billing"
      end
      # resource path
      local_var_path = '/billing/bill/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageBill' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#bill_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bill CSV
    # Returns the specified UsageBill as a CSV file
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ReportResponse]
    def bill_csv_billing(id, opts = {})
      data, _status_code, _headers = bill_csv_billing_with_http_info(id, opts)
      data
    end

    # Get Bill CSV
    # Returns the specified UsageBill as a CSV file
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def bill_csv_billing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.bill_csv_billing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BillingApi.bill_csv_billing"
      end
      # resource path
      local_var_path = '/billing/bill/{id}/csv'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#bill_csv_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Bills
    # Returns a list of UsageBills for the authenticated account
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def bills_billing(opts = {})
      data, _status_code, _headers = bills_billing_with_http_info(opts)
      data
    end

    # List Bills
    # Returns a list of UsageBills for the authenticated account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def bills_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.bills_billing ...'
      end
      # resource path
      local_var_path = '/billing/bills'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#bills_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirm Direct Debit Setup
    # This endpoint is called by an external provider. You will never have to call this endpoint yourself.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect_flow_id 
    # @return [nil]
    def confirm_direct_debit_mandate_billing(opts = {})
      confirm_direct_debit_mandate_billing_with_http_info(opts)
      nil
    end

    # Confirm Direct Debit Setup
    # This endpoint is called by an external provider. You will never have to call this endpoint yourself.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect_flow_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def confirm_direct_debit_mandate_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.confirm_direct_debit_mandate_billing ...'
      end
      # resource path
      local_var_path = '/billing/directdebit/confirm'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'redirect_flow_id'] = opts[:'redirect_flow_id'] if !opts[:'redirect_flow_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#confirm_direct_debit_mandate_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DirectDebitMandate
    # Cancels and deletes the Direct Debit Mandate for the account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_direct_debit_mandate_billing(opts = {})
      delete_direct_debit_mandate_billing_with_http_info(opts)
      nil
    end

    # Delete DirectDebitMandate
    # Cancels and deletes the Direct Debit Mandate for the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_direct_debit_mandate_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.delete_direct_debit_mandate_billing ...'
      end
      # resource path
      local_var_path = '/billing/directdebit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#delete_direct_debit_mandate_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DirectDebitMandate
    # Returns the DirectDebitMandate for the authenticated account
    # @param [Hash] opts the optional parameters
    # @return [DirectDebitMandate]
    def direct_debit_mandate_billing(opts = {})
      data, _status_code, _headers = direct_debit_mandate_billing_with_http_info(opts)
      data
    end

    # Get DirectDebitMandate
    # Returns the DirectDebitMandate for the authenticated account
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDebitMandate, Integer, Hash)>] DirectDebitMandate data, response status code and response headers
    def direct_debit_mandate_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.direct_debit_mandate_billing ...'
      end
      # resource path
      local_var_path = '/billing/directdebit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DirectDebitMandate' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#direct_debit_mandate_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get UsageStats Report
    # Returns usage statistics data for all employers the logged in user has access to for the given date range.  If either of the dates are not provided then the values are defaulted to the first and last date of the previous calendar month.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def get_usage_stats_billing(opts = {})
      data, _status_code, _headers = get_usage_stats_billing_with_http_info(opts)
      data
    end

    # Get UsageStats Report
    # Returns usage statistics data for all employers the logged in user has access to for the given date range.  If either of the dates are not provided then the values are defaulted to the first and last date of the previous calendar month.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def get_usage_stats_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.get_usage_stats_billing ...'
      end
      # resource path
      local_var_path = '/billing/usage-stats'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#get_usage_stats_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Setup DirectDebitMandate
    # Returns a Url to redirect a user to in order to start the process of setting up a Direct Debit Mandate.\\n  Once the process is complete then the user is sent to the URL specified.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_url 
    # @return [String]
    def setup_direct_debit_mandate_billing(opts = {})
      data, _status_code, _headers = setup_direct_debit_mandate_billing_with_http_info(opts)
      data
    end

    # Setup DirectDebitMandate
    # Returns a Url to redirect a user to in order to start the process of setting up a Direct Debit Mandate.\\n  Once the process is complete then the user is sent to the URL specified.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_url 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def setup_direct_debit_mandate_billing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.setup_direct_debit_mandate_billing ...'
      end
      # resource path
      local_var_path = '/billing/directdebit/setup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'returnUrl'] = opts[:'return_url'] if !opts[:'return_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#setup_direct_debit_mandate_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
