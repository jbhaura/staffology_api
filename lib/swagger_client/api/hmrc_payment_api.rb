=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class HmrcPaymentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get HmrcLiability
    # Gets the HmrcLiability record for the period ending on the date specified.
    # @param employer_id 
    # @param tax_year 
    # @param period_ending The final date of the month or quarter that the HmrcLiability is for.
    # @param [Hash] opts the optional parameters
    # @return [HmrcLiability]
    def get_hmrc_payment(employer_id, tax_year, period_ending, opts = {})
      data, _status_code, _headers = get_hmrc_payment_with_http_info(employer_id, tax_year, period_ending, opts)
      data
    end

    # Get HmrcLiability
    # Gets the HmrcLiability record for the period ending on the date specified.
    # @param employer_id 
    # @param tax_year 
    # @param period_ending The final date of the month or quarter that the HmrcLiability is for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HmrcLiability, Integer, Hash)>] HmrcLiability data, response status code and response headers
    def get_hmrc_payment_with_http_info(employer_id, tax_year, period_ending, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HmrcPaymentApi.get_hmrc_payment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling HmrcPaymentApi.get_hmrc_payment"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling HmrcPaymentApi.get_hmrc_payment"
      end
      # verify the required parameter 'period_ending' is set
      if @api_client.config.client_side_validation && period_ending.nil?
        fail ArgumentError, "Missing the required parameter 'period_ending' when calling HmrcPaymentApi.get_hmrc_payment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/hmrcpayment/{taxYear}/{periodEnding}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'periodEnding' + '}', period_ending.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'HmrcLiability' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HmrcPaymentApi#get_hmrc_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List HmrcLiabilities
    # Lists all periods for which a payment is due to HMRC in the given TaxYear
    # @param employer_id The Id of the Employer for which you want to list HMRC Payments
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def index_hmrc_payment(employer_id, tax_year, opts = {})
      data, _status_code, _headers = index_hmrc_payment_with_http_info(employer_id, tax_year, opts)
      data
    end

    # List HmrcLiabilities
    # Lists all periods for which a payment is due to HMRC in the given TaxYear
    # @param employer_id The Id of the Employer for which you want to list HMRC Payments
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_hmrc_payment_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HmrcPaymentApi.index_hmrc_payment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling HmrcPaymentApi.index_hmrc_payment"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling HmrcPaymentApi.index_hmrc_payment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/hmrcpayment/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HmrcPaymentApi#index_hmrc_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update HmrcLiability
    # Updates the editable fields of a HmrcLiability (ie, Adjustment, CISDeductionsSuffered, etc)
    # @param employer_id 
    # @param tax_year 
    # @param period_ending The final date of the month or quarter that the HmrcLiability is for.
    # @param [Hash] opts the optional parameters
    # @option opts [HmrcLiability] :body 
    # @return [HmrcLiability]
    def update_hmrc_payment(employer_id, tax_year, period_ending, opts = {})
      data, _status_code, _headers = update_hmrc_payment_with_http_info(employer_id, tax_year, period_ending, opts)
      data
    end

    # Update HmrcLiability
    # Updates the editable fields of a HmrcLiability (ie, Adjustment, CISDeductionsSuffered, etc)
    # @param employer_id 
    # @param tax_year 
    # @param period_ending The final date of the month or quarter that the HmrcLiability is for.
    # @param [Hash] opts the optional parameters
    # @option opts [HmrcLiability] :body 
    # @return [Array<(HmrcLiability, Integer, Hash)>] HmrcLiability data, response status code and response headers
    def update_hmrc_payment_with_http_info(employer_id, tax_year, period_ending, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HmrcPaymentApi.update_hmrc_payment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling HmrcPaymentApi.update_hmrc_payment"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling HmrcPaymentApi.update_hmrc_payment"
      end
      # verify the required parameter 'period_ending' is set
      if @api_client.config.client_side_validation && period_ending.nil?
        fail ArgumentError, "Missing the required parameter 'period_ending' when calling HmrcPaymentApi.update_hmrc_payment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/hmrcpayment/{taxYear}/{periodEnding}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'periodEnding' + '}', period_ending.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'HmrcLiability' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HmrcPaymentApi#update_hmrc_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
