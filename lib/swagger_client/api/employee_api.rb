=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class EmployeeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply Pay Increase
    # Increases the PayOptions.PayAmount and PayOptions.BaseHourlyRate by the percentage given.
    # @param employer_id The Id of the Employer to which the employees belong.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :percentage 
    # @option opts [BOOLEAN] :all_employees Set this to true
    # @return [nil]
    def apply_pay_increase_employee(employer_id, opts = {})
      apply_pay_increase_employee_with_http_info(employer_id, opts)
      nil
    end

    # Apply Pay Increase
    # Increases the PayOptions.PayAmount and PayOptions.BaseHourlyRate by the percentage given.
    # @param employer_id The Id of the Employer to which the employees belong.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :percentage 
    # @option opts [BOOLEAN] :all_employees Set this to true
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_pay_increase_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.apply_pay_increase_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.apply_pay_increase_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/payincrease'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'percentage'] = opts[:'percentage'] if !opts[:'percentage'].nil?
      query_params[:'allEmployees'] = opts[:'all_employees'] if !opts[:'all_employees'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#apply_pay_increase_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Apply PayOptions
    # Overwrite the PayOptions for all employees with the values provided.\\n  Currently only the following fields are updated: period, payAmount, basis, payamountMultiplier, nationalMinimumWage and regularPaylines.
    # @param employer_id The Id of the Employer to which the employees belong.
    # @param [Hash] opts the optional parameters
    # @option opts [PayOptions] :body 
    # @return [nil]
    def apply_pay_options_employee(employer_id, opts = {})
      apply_pay_options_employee_with_http_info(employer_id, opts)
      nil
    end

    # Apply PayOptions
    # Overwrite the PayOptions for all employees with the values provided.\\n  Currently only the following fields are updated: period, payAmount, basis, payamountMultiplier, nationalMinimumWage and regularPaylines.
    # @param employer_id The Id of the Employer to which the employees belong.
    # @param [Hash] opts the optional parameters
    # @option opts [PayOptions] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_pay_options_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.apply_pay_options_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.apply_pay_options_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/payoptions'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#apply_pay_options_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Average Weekly Earnings
    # Calculates the Average Weekly Earnings for an Employee at the given date.\\n  You can optionally include a LeaveType and we'll adjust the given date accordingly\\n  For example if you specify Maternity then it'll be moved back by 15 weeks
    # @param employer_id The Id of the Employer
    # @param id The Employee Id.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date The date at which you want to calculate the earnings from.
    # @option opts [LeaveType] :leave_type 
    # @return [AverageWeeklyEarnings]
    def average_weekly_earnings_employee(employer_id, id, opts = {})
      data, _status_code, _headers = average_weekly_earnings_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Average Weekly Earnings
    # Calculates the Average Weekly Earnings for an Employee at the given date.\\n  You can optionally include a LeaveType and we&#x27;ll adjust the given date accordingly\\n  For example if you specify Maternity then it&#x27;ll be moved back by 15 weeks
    # @param employer_id The Id of the Employer
    # @param id The Employee Id.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date The date at which you want to calculate the earnings from.
    # @option opts [LeaveType] :leave_type 
    # @return [Array<(AverageWeeklyEarnings, Integer, Hash)>] AverageWeeklyEarnings data, response status code and response headers
    def average_weekly_earnings_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.average_weekly_earnings_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.average_weekly_earnings_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.average_weekly_earnings_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/awe'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'leaveType'] = opts[:'leave_type'] if !opts[:'leave_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AverageWeeklyEarnings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#average_weekly_earnings_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Calculate Base Hourly Rate
    # @param employer_id The Id of the Employer.
    # @param id The Employee Id.
    # @param [Hash] opts the optional parameters
    # @option opts [PayPeriods] :pay_period The frequency that this Employee is paid.
    # @option opts [PayBasis] :pay_basis 
    # @option opts [Float] :pay_amount The amount the Employee is regularly paid each period.
    # @return [Float]
    def base_hourly_rate_employee(employer_id, id, opts = {})
      data, _status_code, _headers = base_hourly_rate_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Calculate Base Hourly Rate
    # @param employer_id The Id of the Employer.
    # @param id The Employee Id.
    # @param [Hash] opts the optional parameters
    # @option opts [PayPeriods] :pay_period The frequency that this Employee is paid.
    # @option opts [PayBasis] :pay_basis 
    # @option opts [Float] :pay_amount The amount the Employee is regularly paid each period.
    # @return [Array<(Float, Integer, Hash)>] Float data, response status code and response headers
    def base_hourly_rate_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.base_hourly_rate_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.base_hourly_rate_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.base_hourly_rate_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/basehourlyrate'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'payPeriod'] = opts[:'pay_period'] if !opts[:'pay_period'].nil?
      query_params[:'payBasis'] = opts[:'pay_basis'] if !opts[:'pay_basis'].nil?
      query_params[:'payAmount'] = opts[:'pay_amount'] if !opts[:'pay_amount'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Float' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#base_hourly_rate_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Employee
    # Creates an Employee for the Employer specified.\\nIf you don't provide PayOptions then the DefaultPayOptions from the Employer will be used
    # @param employer_id The Id of the Employer you are creating the Employee for
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body 
    # @return [Employee]
    def create_employee(employer_id, opts = {})
      data, _status_code, _headers = create_employee_with_http_info(employer_id, opts)
      data
    end

    # Create a new Employee
    # Creates an Employee for the Employer specified.\\nIf you don&#x27;t provide PayOptions then the DefaultPayOptions from the Employer will be used
    # @param employer_id The Id of the Employer you are creating the Employee for
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body 
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def create_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.create_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.create_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Employee' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#create_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employee(employer_id, id, opts = {})
      delete_employee_with_http_info(employer_id, id, opts)
      nil
    end

    # Delete an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.delete_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.delete_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.delete_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#delete_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Employees
    # Used to delete multiple employees.\\n  The body should contain an array of Ids to identify the employees to delete.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [nil]
    def delete_multiple_employee(employer_id, opts = {})
      delete_multiple_employee_with_http_info(employer_id, opts)
      nil
    end

    # Delete Employees
    # Used to delete multiple employees.\\n  The body should contain an array of Ids to identify the employees to delete.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_multiple_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.delete_multiple_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.delete_multiple_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/delete'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#delete_multiple_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Photo
    # @param employer_id 
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_photo_employee(employer_id, id, opts = {})
      delete_photo_employee_with_http_info(employer_id, id, opts)
      nil
    end

    # Delete Photo
    # @param employer_id 
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_photo_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.delete_photo_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.delete_photo_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.delete_photo_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/photo'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#delete_photo_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Expiring RightToWork
    # Returns a list of Item representing Employees that have a RightToWork with a DocumentExpiring date within the next numberOfDays days.
    # @param employer_id The Id of the Employer to search.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number_of_days The number of days in the future to look got expiry dates.
    # @return [Array<Item>]
    def expiring_rtw_employee(employer_id, opts = {})
      data, _status_code, _headers = expiring_rtw_employee_with_http_info(employer_id, opts)
      data
    end

    # Expiring RightToWork
    # Returns a list of Item representing Employees that have a RightToWork with a DocumentExpiring date within the next numberOfDays days.
    # @param employer_id The Id of the Employer to search.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number_of_days The number of days in the future to look got expiry dates.
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def expiring_rtw_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.expiring_rtw_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.expiring_rtw_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/expiring-rtw'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'numberOfDays'] = opts[:'number_of_days'] if !opts[:'number_of_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#expiring_rtw_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employee Departments
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to retrieve Departments for.
    # @param [Hash] opts the optional parameters
    # @return [Array<DepartmentMembership>]
    def get_department_memberships_employee(employer_id, id, opts = {})
      data, _status_code, _headers = get_department_memberships_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Get Employee Departments
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to retrieve Departments for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DepartmentMembership>, Integer, Hash)>] Array<DepartmentMembership> data, response status code and response headers
    def get_department_memberships_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.get_department_memberships_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.get_department_memberships_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.get_department_memberships_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/departments'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<DepartmentMembership>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#get_department_memberships_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Employee]
    def get_employee(employer_id, id, opts = {})
      data, _status_code, _headers = get_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Get an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def get_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.get_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.get_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.get_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Employee' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#get_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import CSV
    # Import employee data from a CSV file.
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [CsvFileFormat] :format The format of the CSV file.
    # @option opts [BOOLEAN] :preview_only Set to true and nothing will be imported but you&#x27;ll be shown a preview of the data. (default to false)
    # @return [Array<Item>]
    def import_csv_employee(employer_id, opts = {})
      data, _status_code, _headers = import_csv_employee_with_http_info(employer_id, opts)
      data
    end

    # Import CSV
    # Import employee data from a CSV file.
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [CsvFileFormat] :format The format of the CSV file.
    # @option opts [BOOLEAN] :preview_only Set to true and nothing will be imported but you&#x27;ll be shown a preview of the data.
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def import_csv_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.import_csv_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.import_csv_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/import'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'previewOnly'] = opts[:'preview_only'] if !opts[:'preview_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#import_csv_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Employees
    # @param employer_id The Id of the Employer for which you want to see Employees
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num Zero-based page number, used in conjunction with pageSize
    # @option opts [Integer] :page_size The number of items per page
    # @option opts [EmployeeStatus] :status Restrict the results to employees with the given status
    # @option opts [String] :dept_code If specified then only employees assigned to this department code will be listed
    # @return [Array<Item>]
    def index_employee(employer_id, opts = {})
      data, _status_code, _headers = index_employee_with_http_info(employer_id, opts)
      data
    end

    # List Employees
    # @param employer_id The Id of the Employer for which you want to see Employees
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num Zero-based page number, used in conjunction with pageSize
    # @option opts [Integer] :page_size The number of items per page
    # @option opts [EmployeeStatus] :status Restrict the results to employees with the given status
    # @option opts [String] :dept_code If specified then only employees assigned to this department code will be listed
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.index_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.index_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'deptCode'] = opts[:'dept_code'] if !opts[:'dept_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#index_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Leavers
    # Returns a list of all Employees that have a leaving date set
    # @param employer_id The Id of the Employer for which you want to see Leavers
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_unsent_p45s If set to true then only employees that don&#x27;t have the P45Sent set to true will be returned (default to false)
    # @return [Array<Item>]
    def leavers_employee(employer_id, opts = {})
      data, _status_code, _headers = leavers_employee_with_http_info(employer_id, opts)
      data
    end

    # List Leavers
    # Returns a list of all Employees that have a leaving date set
    # @param employer_id The Id of the Employer for which you want to see Leavers
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_unsent_p45s If set to true then only employees that don&#x27;t have the P45Sent set to true will be returned
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def leavers_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.leavers_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.leavers_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/leavers'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onlyUnsentP45s'] = opts[:'only_unsent_p45s'] if !opts[:'only_unsent_p45s'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#leavers_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as Leavers
    # Used to mark multiple employees as leavers.\\n  The body should contain an array of Ids to identify the employees to update.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @option opts [DateTime] :date The date the employees left or are leaving
    # @option opts [BOOLEAN] :email_p45 If set to true, the employee will be email a P45 if they have an email address
    # @return [nil]
    def mark_as_leavers_employee(employer_id, opts = {})
      mark_as_leavers_employee_with_http_info(employer_id, opts)
      nil
    end

    # Mark as Leavers
    # Used to mark multiple employees as leavers.\\n  The body should contain an array of Ids to identify the employees to update.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @option opts [DateTime] :date The date the employees left or are leaving
    # @option opts [BOOLEAN] :email_p45 If set to true, the employee will be email a P45 if they have an email address
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_as_leavers_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.mark_as_leavers_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.mark_as_leavers_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/leavers'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'emailP45'] = opts[:'email_p45'] if !opts[:'email_p45'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#mark_as_leavers_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Minimum Wage
    # Calculates the National Minimum Wage for this employee for the given TaxYear and based on   their age at the given date
    # @param employer_id The Id of the Employer
    # @param id The Employee Id.
    # @param tax_year The TaxYear
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date The date for which we should calculate the employees age, for not provided we&#x27;ll use todays date.
    # @return [Float]
    def minimum_wage_employee(employer_id, id, tax_year, opts = {})
      data, _status_code, _headers = minimum_wage_employee_with_http_info(employer_id, id, tax_year, opts)
      data
    end

    # Minimum Wage
    # Calculates the National Minimum Wage for this employee for the given TaxYear and based on   their age at the given date
    # @param employer_id The Id of the Employer
    # @param id The Employee Id.
    # @param tax_year The TaxYear
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date The date for which we should calculate the employees age, for not provided we&#x27;ll use todays date.
    # @return [Array<(Float, Integer, Hash)>] Float data, response status code and response headers
    def minimum_wage_employee_with_http_info(employer_id, id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.minimum_wage_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.minimum_wage_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.minimum_wage_employee"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling EmployeeApi.minimum_wage_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/{taxYear}/minimum-wage'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Float' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#minimum_wage_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PayRunEntries for Employee
    # List PayRunEntries for the given Employee in the specified TaxYear
    # @param employer_id The Id of the Employer to search.
    # @param id The Employee Id.
    # @param tax_year The TaxYear for which you want to list PayRunEntries.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def pay_run_entries_employee(employer_id, id, tax_year, opts = {})
      data, _status_code, _headers = pay_run_entries_employee_with_http_info(employer_id, id, tax_year, opts)
      data
    end

    # PayRunEntries for Employee
    # List PayRunEntries for the given Employee in the specified TaxYear
    # @param employer_id The Id of the Employer to search.
    # @param id The Employee Id.
    # @param tax_year The TaxYear for which you want to list PayRunEntries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def pay_run_entries_employee_with_http_info(employer_id, id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.pay_run_entries_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.pay_run_entries_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.pay_run_entries_employee"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling EmployeeApi.pay_run_entries_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/payrunentries/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#pay_run_entries_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rehire an Employee
    # If an employee has left and you want to rehire him/her, then this method will create a copy of the employee record but with a new payroll code
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to rehire.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def re_hire_employee(employer_id, id, opts = {})
      re_hire_employee_with_http_info(employer_id, id, opts)
      nil
    end

    # Rehire an Employee
    # If an employee has left and you want to rehire him/her, then this method will create a copy of the employee record but with a new payroll code
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to rehire.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def re_hire_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.re_hire_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.re_hire_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.re_hire_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/rehire'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#re_hire_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employee by Payroll Code
    # Get an employee by their payroll code. Will return an Item that contains the Id for you to retrieve the full Employee record
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The payroll code to look for.
    # @return [Item]
    def search_by_payroll_code_employee(employer_id, opts = {})
      data, _status_code, _headers = search_by_payroll_code_employee_with_http_info(employer_id, opts)
      data
    end

    # Get Employee by Payroll Code
    # Get an employee by their payroll code. Will return an Item that contains the Id for you to retrieve the full Employee record
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The payroll code to look for.
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def search_by_payroll_code_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.search_by_payroll_code_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.search_by_payroll_code_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/search/payrollcode'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#search_by_payroll_code_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search Employer for Employees
    # Search for an employee of the specified employer based on their name or payroll code.\\nEnsure your query is at least 3 characters long or you wont get any results.
    # @param employer_id The Id of the Employer to search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search string (at least 3 characters).
    # @option opts [BOOLEAN] :exlude_cis_sub_contactors If set to true, then we&#x27;ll only search employees that aren&#x27;t labelled as CIS Subcontractors (default to false)
    # @return [Array<Item>]
    def search_employee(employer_id, opts = {})
      data, _status_code, _headers = search_employee_with_http_info(employer_id, opts)
      data
    end

    # Search Employer for Employees
    # Search for an employee of the specified employer based on their name or payroll code.\\nEnsure your query is at least 3 characters long or you wont get any results.
    # @param employer_id The Id of the Employer to search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search string (at least 3 characters).
    # @option opts [BOOLEAN] :exlude_cis_sub_contactors If set to true, then we&#x27;ll only search employees that aren&#x27;t labelled as CIS Subcontractors
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def search_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.search_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.search_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/search'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'exludeCisSubContactors'] = opts[:'exlude_cis_sub_contactors'] if !opts[:'exlude_cis_sub_contactors'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#search_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Employee Departments
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to set Departments for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<DepartmentMembership>] :body 
    # @return [Array<DepartmentMembership>]
    def set_department_memberships_employee(employer_id, id, opts = {})
      data, _status_code, _headers = set_department_memberships_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Set Employee Departments
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to set Departments for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<DepartmentMembership>] :body 
    # @return [Array<(Array<DepartmentMembership>, Integer, Hash)>] Array<DepartmentMembership> data, response status code and response headers
    def set_department_memberships_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.set_department_memberships_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.set_department_memberships_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.set_department_memberships_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/departments'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Array<DepartmentMembership>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#set_department_memberships_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as On Hold
    # Used to mark multiple employees as On Hold or not On Hold.\\n  The body should contain an array of Ids to identify the employees to update.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @option opts [BOOLEAN] :on_hold The OnHold status to set
    # @return [nil]
    def set_on_hold_employee(employer_id, opts = {})
      set_on_hold_employee_with_http_info(employer_id, opts)
      nil
    end

    # Mark as On Hold
    # Used to mark multiple employees as On Hold or not On Hold.\\n  The body should contain an array of Ids to identify the employees to update.
    # @param employer_id The Id of the Employer to which the Employees belong
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @option opts [BOOLEAN] :on_hold The OnHold status to set
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_on_hold_employee_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.set_on_hold_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.set_on_hold_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/onhold'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onHold'] = opts[:'on_hold'] if !opts[:'on_hold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#set_on_hold_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body 
    # @return [Employee]
    def update_employee(employer_id, id, opts = {})
      data, _status_code, _headers = update_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Update an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs.
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body 
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def update_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.update_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.update_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.update_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Employee' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#update_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Photo
    # If you already have a URL for the employee photo then you can just set the PhotoUrl property of the Employee.\\n  Alternatively, submit an image here and we'll upload it, resize it to 200px squared and set the PhotoUrl for you.
    # @param employer_id 
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Employee]
    def update_photo_employee(employer_id, id, opts = {})
      data, _status_code, _headers = update_photo_employee_with_http_info(employer_id, id, opts)
      data
    end

    # Update Photo
    # If you already have a URL for the employee photo then you can just set the PhotoUrl property of the Employee.\\n  Alternatively, submit an image here and we&#x27;ll upload it, resize it to 200px squared and set the PhotoUrl for you.
    # @param employer_id 
    # @param id The Id of the Employee you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def update_photo_employee_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.update_photo_employee ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployeeApi.update_photo_employee"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.update_photo_employee"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{id}/photo'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Employee' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#update_photo_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
