=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class NvrApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create NVR
    # Creates a new NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Nvr] :body 
    # @return [Nvr]
    def create_nvr(employer_id, tax_year, opts = {})
      data, _status_code, _headers = create_nvr_with_http_info(employer_id, tax_year, opts)
      data
    end

    # Create NVR
    # Creates a new NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Nvr] :body 
    # @return [Array<(Nvr, Integer, Hash)>] Nvr data, response status code and response headers
    def create_nvr_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.create_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.create_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.create_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Nvr' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#create_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NVR
    # Deletes the NVR.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_nvr(employer_id, tax_year, id, opts = {})
      delete_nvr_with_http_info(employer_id, tax_year, id, opts)
      nil
    end

    # Delete NVR
    # Deletes the NVR.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_nvr_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.delete_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.delete_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.delete_nvr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NvrApi.delete_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#delete_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NVR
    # Retrieves the NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Nvr]
    def get_nvr(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = get_nvr_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Get NVR
    # Retrieves the NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nvr, Integer, Hash)>] Nvr data, response status code and response headers
    def get_nvr_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.get_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.get_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.get_nvr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NvrApi.get_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Nvr' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#get_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NVR
    # Returns all NiNo Verification Requests for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_nvr(employer_id, tax_year, opts = {})
      data, _status_code, _headers = list_nvr_with_http_info(employer_id, tax_year, opts)
      data
    end

    # List NVR
    # Returns all NiNo Verification Requests for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_nvr_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.list_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.list_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.list_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#list_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as Sent
    # Marks a  NiNo Verification Request as having been sent to HMRC and accepted by them\\nYou only use this method if the NVR has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Nvr]
    def mark_as_accepted_nvr(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = mark_as_accepted_nvr_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Mark as Sent
    # Marks a  NiNo Verification Request as having been sent to HMRC and accepted by them\\nYou only use this method if the NVR has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it&#x27;s submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nvr, Integer, Hash)>] Nvr data, response status code and response headers
    def mark_as_accepted_nvr_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.mark_as_accepted_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.mark_as_accepted_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.mark_as_accepted_nvr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NvrApi.mark_as_accepted_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}/{id}/markasaccepted'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Nvr' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#mark_as_accepted_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # NVR Requiring Attention
    # Returns all NiNo Verification Requests that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def requiring_attention_nvr(employer_id, opts = {})
      data, _status_code, _headers = requiring_attention_nvr_with_http_info(employer_id, opts)
      data
    end

    # NVR Requiring Attention
    # Returns all NiNo Verification Requests that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def requiring_attention_nvr_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.requiring_attention_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.requiring_attention_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/requiringattention'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#requiring_attention_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit an existing NVR
    # Submits an existing NiNo Verification Request to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Nvr]
    def submit_nvr(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = submit_nvr_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Submit an existing NVR
    # Submits an existing NiNo Verification Request to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nvr, Integer, Hash)>] Nvr data, response status code and response headers
    def submit_nvr_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.submit_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.submit_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.submit_nvr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NvrApi.submit_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}/{id}/submit'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Nvr' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#submit_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NVR
    # Updates an existing NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Nvr] :body 
    # @return [Nvr]
    def update_nvr(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = update_nvr_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Update NVR
    # Updates an existing NiNo Verification Request.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Nvr] :body 
    # @return [Array<(Nvr, Integer, Hash)>] Nvr data, response status code and response headers
    def update_nvr_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NvrApi.update_nvr ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling NvrApi.update_nvr"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling NvrApi.update_nvr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NvrApi.update_nvr"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/nvr/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Nvr' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NvrApi#update_nvr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
