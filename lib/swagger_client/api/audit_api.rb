=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class AuditApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Employer Audit Log
    # @param employer_id The Id of the Employer for which you want to list Audit logs
    # @param [Hash] opts the optional parameters
    # @option opts [AuditEntityType] :entity Entity type name for which audit log should be retrieved
    # @option opts [String] :entity_id Id of the entity for which audit log should be retrieved
    # @option opts [DateTime] :from_date Date from which records should be retrieved
    # @option opts [DateTime] :to_date Date till records should be retrieved
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<Item>]
    def employer_audit_list_audit(employer_id, opts = {})
      data, _status_code, _headers = employer_audit_list_audit_with_http_info(employer_id, opts)
      data
    end

    # Employer Audit Log
    # @param employer_id The Id of the Employer for which you want to list Audit logs
    # @param [Hash] opts the optional parameters
    # @option opts [AuditEntityType] :entity Entity type name for which audit log should be retrieved
    # @option opts [String] :entity_id Id of the entity for which audit log should be retrieved
    # @option opts [DateTime] :from_date Date from which records should be retrieved
    # @option opts [DateTime] :to_date Date till records should be retrieved
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def employer_audit_list_audit_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditApi.employer_audit_list_audit ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AuditApi.employer_audit_list_audit"
      end
      # resource path
      local_var_path = '/employers/{employerId}/audit'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditApi#employer_audit_list_audit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Audit entry
    # Gets the Audit entry specified
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [AuditEntityType] :audit_entity_type 
    # @return [AuditEntryInfo]
    def get_audit(employer_id, id, opts = {})
      data, _status_code, _headers = get_audit_with_http_info(employer_id, id, opts)
      data
    end

    # Get Audit entry
    # Gets the Audit entry specified
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [AuditEntityType] :audit_entity_type 
    # @return [Array<(AuditEntryInfo, Integer, Hash)>] AuditEntryInfo data, response status code and response headers
    def get_audit_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditApi.get_audit ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AuditApi.get_audit"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuditApi.get_audit"
      end
      # resource path
      local_var_path = '/employers/{employerId}/audit/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'auditEntityType'] = opts[:'audit_entity_type'] if !opts[:'audit_entity_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AuditEntryInfo' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditApi#get_audit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
