=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class EmployerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Make Year End Changes
    # Apply the changes for the year end and start the next tax year for the employer.
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, null>] :body You can suppress the emailing of P60s and/or CIS Statements by supplying a value of true for dontEmailP60s and/or dontEmailCisStatements
    # @return [YearEnd]
    def apply_year_end_employer(id, opts = {})
      data, _status_code, _headers = apply_year_end_employer_with_http_info(id, opts)
      data
    end

    # Make Year End Changes
    # Apply the changes for the year end and start the next tax year for the employer.
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, null>] :body You can suppress the emailing of P60s and/or CIS Statements by supplying a value of true for dontEmailP60s and/or dontEmailCisStatements
    # @return [Array<(YearEnd, Integer, Hash)>] YearEnd data, response status code and response headers
    def apply_year_end_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.apply_year_end_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.apply_year_end_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/YearEnd'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'YearEnd' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#apply_year_end_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employer Calendar
    # Get a list of upcoming CalendarEntry for the Employer.
    # @param id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<CalendarEntry>]
    def calendar_employer(id, opts = {})
      data, _status_code, _headers = calendar_employer_with_http_info(id, opts)
      data
    end

    # Get Employer Calendar
    # Get a list of upcoming CalendarEntry for the Employer.
    # @param id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<(Array<CalendarEntry>, Integer, Hash)>] Array<CalendarEntry> data, response status code and response headers
    def calendar_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.calendar_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.calendar_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/calendar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<CalendarEntry>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#calendar_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Employer
    # Use this method to create a new Employer\\n  The only required field is the Employer name.
    # @param [Hash] opts the optional parameters
    # @option opts [Employer] :body 
    # @return [Employer]
    def create_employer(opts = {})
      data, _status_code, _headers = create_employer_with_http_info(opts)
      data
    end

    # Create an Employer
    # Use this method to create a new Employer\\n  The only required field is the Employer name.
    # @param [Hash] opts the optional parameters
    # @option opts [Employer] :body 
    # @return [Array<(Employer, Integer, Hash)>] Employer data, response status code and response headers
    def create_employer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.create_employer ...'
      end
      # resource path
      local_var_path = '/employers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Employer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#create_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Payslip Customisations
    # Get the settings used to customise PaySlips for this Employer
    # @param id The Id of the Employer you want customisations for.
    # @param [Hash] opts the optional parameters
    # @return [PayslipCustomisation]
    def custom_payslip_employer(id, opts = {})
      data, _status_code, _headers = custom_payslip_employer_with_http_info(id, opts)
      data
    end

    # Get Payslip Customisations
    # Get the settings used to customise PaySlips for this Employer
    # @param id The Id of the Employer you want customisations for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayslipCustomisation, Integer, Hash)>] PayslipCustomisation data, response status code and response headers
    def custom_payslip_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.custom_payslip_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.custom_payslip_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/custompayslip'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PayslipCustomisation' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#custom_payslip_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Employer
    # @param id The Id of the Employer you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employer(id, opts = {})
      delete_employer_with_http_info(id, opts)
      nil
    end

    # Delete an Employer
    # @param id The Id of the Employer you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.delete_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.delete_employer"
      end
      # resource path
      local_var_path = '/employers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#delete_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DirectDebitMandate
    # Returns whether Direct Debit Mandate Activation for the owner of the current employer is required.
    # @param id The Id of the Employer whose Direct Debit Mandate you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def employer_direct_debit_mandate_required_employer(id, opts = {})
      data, _status_code, _headers = employer_direct_debit_mandate_required_employer_with_http_info(id, opts)
      data
    end

    # Get DirectDebitMandate
    # Returns whether Direct Debit Mandate Activation for the owner of the current employer is required.
    # @param id The Id of the Employer whose Direct Debit Mandate you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Integer, Hash)>] BOOLEAN data, response status code and response headers
    def employer_direct_debit_mandate_required_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.employer_direct_debit_mandate_required_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.employer_direct_debit_mandate_required_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/employerdirectdebitrequired'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BOOLEAN' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#employer_direct_debit_mandate_required_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Automation Settings
    # Returns the AutomationSettings for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [AutomationSettings]
    def get_automation_settings_employer(id, opts = {})
      data, _status_code, _headers = get_automation_settings_employer_with_http_info(id, opts)
      data
    end

    # Get Automation Settings
    # Returns the AutomationSettings for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomationSettings, Integer, Hash)>] AutomationSettings data, response status code and response headers
    def get_automation_settings_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.get_automation_settings_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.get_automation_settings_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/automation'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AutomationSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#get_automation_settings_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Employer
    # @param id The Id of the Employer you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Employer]
    def get_employer(id, opts = {})
      data, _status_code, _headers = get_employer_with_http_info(id, opts)
      data
    end

    # Get an Employer
    # @param id The Id of the Employer you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employer, Integer, Hash)>] Employer data, response status code and response headers
    def get_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.get_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.get_employer"
      end
      # resource path
      local_var_path = '/employers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Employer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#get_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EmployerOpeningBalances
    # Returns the EmployerOpeningBalances for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [EmployerOpeningBalances]
    def get_employer_opening_balances_employer(id, opts = {})
      data, _status_code, _headers = get_employer_opening_balances_employer_with_http_info(id, opts)
      data
    end

    # Get EmployerOpeningBalances
    # Returns the EmployerOpeningBalances for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmployerOpeningBalances, Integer, Hash)>] EmployerOpeningBalances data, response status code and response headers
    def get_employer_opening_balances_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.get_employer_opening_balances_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.get_employer_opening_balances_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/openingbalances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerOpeningBalances' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#get_employer_opening_balances_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employer Groups
    # @param id The Id of the Employer you want to retrieve Groups for.
    # @param [Hash] opts the optional parameters
    # @return [Array<EmployerGroupMembership>]
    def get_group_memberships_employer(id, opts = {})
      data, _status_code, _headers = get_group_memberships_employer_with_http_info(id, opts)
      data
    end

    # Get Employer Groups
    # @param id The Id of the Employer you want to retrieve Groups for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EmployerGroupMembership>, Integer, Hash)>] Array<EmployerGroupMembership> data, response status code and response headers
    def get_group_memberships_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.get_group_memberships_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.get_group_memberships_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<EmployerGroupMembership>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#get_group_memberships_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import CSV
    # Import employers from a CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [BOOLEAN] :preview_only Set to true and nothing will be imported but you&#x27;ll be shown a preview of the data. (default to false)
    # @return [Array<Item>]
    def import_csv_employer(opts = {})
      data, _status_code, _headers = import_csv_employer_with_http_info(opts)
      data
    end

    # Import CSV
    # Import employers from a CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [BOOLEAN] :preview_only Set to true and nothing will be imported but you&#x27;ll be shown a preview of the data.
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def import_csv_employer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.import_csv_employer ...'
      end
      # resource path
      local_var_path = '/employers/import'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'previewOnly'] = opts[:'preview_only'] if !opts[:'preview_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#import_csv_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Employers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_group_code Optionally specify the code of an EmployerGroup to only see employers that are a member of that group.
    # @return [Array<Item>]
    def index_employer(opts = {})
      data, _status_code, _headers = index_employer_with_http_info(opts)
      data
    end

    # List Employers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_group_code Optionally specify the code of an EmployerGroup to only see employers that are a member of that group.
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_employer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.index_employer ...'
      end
      # resource path
      local_var_path = '/employers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employerGroupCode'] = opts[:'employer_group_code'] if !opts[:'employer_group_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#index_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Users
    # Returns a list of Users that have access to the given Employer
    # @param id The Id of the Employer you want a list of Users for.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_users_employer(id, opts = {})
      data, _status_code, _headers = list_users_employer_with_http_info(id, opts)
      data
    end

    # List Users
    # Returns a list of Users that have access to the given Employer
    # @param id The Id of the Employer you want a list of Users for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_users_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.list_users_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.list_users_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#list_users_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove User
    # Removes a User from an Employer.\\n  You cannot remove Users that are marked as the owner of the Employer.  You must be the owner of the Employer in order to remove other Users.
    # @param id The Id of the Employer you want to remove the User from.
    # @param user_id The Id of the User you want to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_user_employer(id, user_id, opts = {})
      remove_user_employer_with_http_info(id, user_id, opts)
      nil
    end

    # Remove User
    # Removes a User from an Employer.\\n  You cannot remove Users that are marked as the owner of the Employer.  You must be the owner of the Employer in order to remove other Users.
    # @param id The Id of the Employer you want to remove the User from.
    # @param user_id The Id of the User you want to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_user_employer_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.remove_user_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.remove_user_employer"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling EmployerApi.remove_user_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/users/{userId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#remove_user_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Review Year End Changes
    # View the changes that will be made when you start the next tax year for the employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [YearEnd]
    def review_year_end_employer(id, opts = {})
      data, _status_code, _headers = review_year_end_employer_with_http_info(id, opts)
      data
    end

    # Review Year End Changes
    # View the changes that will be made when you start the next tax year for the employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(YearEnd, Integer, Hash)>] YearEnd data, response status code and response headers
    def review_year_end_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.review_year_end_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.review_year_end_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/YearEnd'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'YearEnd' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#review_year_end_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # RTI Documents Requiring Attention
    # Returns all RTI documents that have a Submission Status of NotSubmitted or ErrorResponse
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def rti_requiring_attention_employer(id, opts = {})
      data, _status_code, _headers = rti_requiring_attention_employer_with_http_info(id, opts)
      data
    end

    # RTI Documents Requiring Attention
    # Returns all RTI documents that have a Submission Status of NotSubmitted or ErrorResponse
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def rti_requiring_attention_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.rti_requiring_attention_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.rti_requiring_attention_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/rti/requiringattention'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#rti_requiring_attention_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search Employees
    # Search all employers for an employee based on their name or payroll code.\\nEnsure your query is at least 3 characters long or you wont get any results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search string (at least 3 characters).
    # @option opts [BOOLEAN] :exlude_cis_sub_contactors If set to true, then we&#x27;ll only search employees that aren&#x27;t labeled as CIS Subcontractors (default to false)
    # @return [Array<Item>]
    def search_employees_employer(opts = {})
      data, _status_code, _headers = search_employees_employer_with_http_info(opts)
      data
    end

    # Search Employees
    # Search all employers for an employee based on their name or payroll code.\\nEnsure your query is at least 3 characters long or you wont get any results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search string (at least 3 characters).
    # @option opts [BOOLEAN] :exlude_cis_sub_contactors If set to true, then we&#x27;ll only search employees that aren&#x27;t labeled as CIS Subcontractors
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def search_employees_employer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.search_employees_employer ...'
      end
      # resource path
      local_var_path = '/employers/employees/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'exludeCisSubContactors'] = opts[:'exlude_cis_sub_contactors'] if !opts[:'exlude_cis_sub_contactors'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#search_employees_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search Employers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query 
    # @return [Array<Item>]
    def search_employer(opts = {})
      data, _status_code, _headers = search_employer_with_http_info(opts)
      data
    end

    # Search Employers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def search_employer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.search_employer ...'
      end
      # resource path
      local_var_path = '/employers/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#search_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Employer Groups
    # @param id The Id of the Employer you want to set Groups for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EmployerGroupMembership>] :body 
    # @return [Array<EmployerGroupMembership>]
    def set_group_memberships_employer(id, opts = {})
      data, _status_code, _headers = set_group_memberships_employer_with_http_info(id, opts)
      data
    end

    # Set Employer Groups
    # @param id The Id of the Employer you want to set Groups for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EmployerGroupMembership>] :body 
    # @return [Array<(Array<EmployerGroupMembership>, Integer, Hash)>] Array<EmployerGroupMembership> data, response status code and response headers
    def set_group_memberships_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.set_group_memberships_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.set_group_memberships_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Array<EmployerGroupMembership>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#set_group_memberships_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Owner
    # Sets the owner for the employer.\\n  You must be the owner of the Employer to set this value.\\n  The user you are setting as the owner must already have the role Admin.\\n  You can get a list of users from the ListUsers endpoint.
    # @param id The Id of the Employer you want to change the ownership of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body The Id of the User you want a change ownership to. They must already be a user for this employer and have the admin role assigned to them.
    # @return [nil]
    def set_owner_employer(id, opts = {})
      set_owner_employer_with_http_info(id, opts)
      nil
    end

    # Set Owner
    # Sets the owner for the employer.\\n  You must be the owner of the Employer to set this value.\\n  The user you are setting as the owner must already have the role Admin.\\n  You can get a list of users from the ListUsers endpoint.
    # @param id The Id of the Employer you want to change the ownership of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body The Id of the User you want a change ownership to. They must already be a user for this employer and have the admin role assigned to them.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_owner_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.set_owner_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.set_owner_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/users/owner'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#set_owner_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Suggest Payroll Code
    # This helper method returns a unique code for the next Employee that you create for the specified Employer.\\nYou don't have to use the value provided, you can use any value that is unqiue across Employees for the Employer.
    # @param id The Id of the Employer you want a suggestion for.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def suggest_pay_code_employer(id, opts = {})
      data, _status_code, _headers = suggest_pay_code_employer_with_http_info(id, opts)
      data
    end

    # Suggest Payroll Code
    # This helper method returns a unique code for the next Employee that you create for the specified Employer.\\nYou don&#x27;t have to use the value provided, you can use any value that is unqiue across Employees for the Employer.
    # @param id The Id of the Employer you want a suggestion for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def suggest_pay_code_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.suggest_pay_code_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.suggest_pay_code_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/suggestPayrollCode'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#suggest_pay_code_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Automation Settings
    # Updates the AutomationSettings for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [AutomationSettings] :body 
    # @return [AutomationSettings]
    def update_automation_settings_employer(id, opts = {})
      data, _status_code, _headers = update_automation_settings_employer_with_http_info(id, opts)
      data
    end

    # Update Automation Settings
    # Updates the AutomationSettings for the Employer
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [AutomationSettings] :body 
    # @return [Array<(AutomationSettings, Integer, Hash)>] AutomationSettings data, response status code and response headers
    def update_automation_settings_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.update_automation_settings_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.update_automation_settings_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/automation'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'AutomationSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#update_automation_settings_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Payslip Customisations
    # Set the settings used to customise PaySlips for this Employer
    # @param id The Id of the Employer you want customisations for.
    # @param [Hash] opts the optional parameters
    # @option opts [PayslipCustomisation] :body 
    # @return [PayslipCustomisation]
    def update_custom_payslip_employer(id, opts = {})
      data, _status_code, _headers = update_custom_payslip_employer_with_http_info(id, opts)
      data
    end

    # Update Payslip Customisations
    # Set the settings used to customise PaySlips for this Employer
    # @param id The Id of the Employer you want customisations for.
    # @param [Hash] opts the optional parameters
    # @option opts [PayslipCustomisation] :body 
    # @return [Array<(PayslipCustomisation, Integer, Hash)>] PayslipCustomisation data, response status code and response headers
    def update_custom_payslip_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.update_custom_payslip_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.update_custom_payslip_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/custompayslip'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PayslipCustomisation' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#update_custom_payslip_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Employer
    # @param id The Id of the Employer you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Employer] :body 
    # @return [Employer]
    def update_employer(id, opts = {})
      data, _status_code, _headers = update_employer_with_http_info(id, opts)
      data
    end

    # Update an Employer
    # @param id The Id of the Employer you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Employer] :body 
    # @return [Array<(Employer, Integer, Hash)>] Employer data, response status code and response headers
    def update_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.update_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.update_employer"
      end
      # resource path
      local_var_path = '/employers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Employer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#update_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update EmployerOpeningBalances
    # Updates the EmployerOpeningBalances for the Employer for their StartYear
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerOpeningBalances] :body 
    # @return [EmployerOpeningBalances]
    def update_employer_opening_balances_employer(id, opts = {})
      data, _status_code, _headers = update_employer_opening_balances_employer_with_http_info(id, opts)
      data
    end

    # Update EmployerOpeningBalances
    # Updates the EmployerOpeningBalances for the Employer for their StartYear
    # @param id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerOpeningBalances] :body 
    # @return [Array<(EmployerOpeningBalances, Integer, Hash)>] EmployerOpeningBalances data, response status code and response headers
    def update_employer_opening_balances_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.update_employer_opening_balances_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.update_employer_opening_balances_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/openingbalances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'EmployerOpeningBalances' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#update_employer_opening_balances_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Employer Logo
    # If you already have a URL for the employer Logo then you can just set the LogoUrl property of the Employer.\\n  Alternatively, submit a logo here and we'll upload it and set the LogoUrl for you.
    # @param id The Id of the Employer you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Employer]
    def update_logo_employer(id, opts = {})
      data, _status_code, _headers = update_logo_employer_with_http_info(id, opts)
      data
    end

    # Update Employer Logo
    # If you already have a URL for the employer Logo then you can just set the LogoUrl property of the Employer.\\n  Alternatively, submit a logo here and we&#x27;ll upload it and set the LogoUrl for you.
    # @param id The Id of the Employer you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(Employer, Integer, Hash)>] Employer data, response status code and response headers
    def update_logo_employer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerApi.update_logo_employer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployerApi.update_logo_employer"
      end
      # resource path
      local_var_path = '/employers/{id}/logo'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Employer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerApi#update_logo_employer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
