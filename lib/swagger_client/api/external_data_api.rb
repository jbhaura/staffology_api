=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class ExternalDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Authorization Url
    # For ExternalDataProviders with an AuthScheme of OAuth1 or OAuth2.\\n  Returns a Url to redirect a user to in order to start the authorization process with the given ExternalDataProvider.\\n  Our API handles the response from the OAuth provider and processes it to obtain a token.\\n  The user is then sent to the URL specified.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to authorize with.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_url The URL to send the user to once the process is complete.
    # @return [String]
    def authorize_external_data(employer_id, id, opts = {})
      data, _status_code, _headers = authorize_external_data_with_http_info(employer_id, id, opts)
      data
    end

    # Get Authorization Url
    # For ExternalDataProviders with an AuthScheme of OAuth1 or OAuth2.\\n  Returns a Url to redirect a user to in order to start the authorization process with the given ExternalDataProvider.\\n  Our API handles the response from the OAuth provider and processes it to obtain a token.\\n  The user is then sent to the URL specified.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to authorize with.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_url The URL to send the user to once the process is complete.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def authorize_external_data_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.authorize_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.authorize_external_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.authorize_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/authorize'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'returnUrl'] = opts[:'return_url'] if !opts[:'return_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#authorize_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Companies
    # Return a list of companies from the external data provider
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<ExternalDataCompany>]
    def companies_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = companies_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # List Companies
    # Return a list of companies from the external data provider
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExternalDataCompany>, Integer, Hash)>] Array<ExternalDataCompany> data, response status code and response headers
    def companies_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.companies_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.companies_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.companies_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/companies'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ExternalDataCompany>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#companies_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disconnect
    # Disconnect from the external provider and revoke any OAuth token that has been received.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to disconnect from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disconnect_external_data(employer_id, id, opts = {})
      disconnect_external_data_with_http_info(employer_id, id, opts)
      nil
    end

    # Disconnect
    # Disconnect from the external provider and revoke any OAuth token that has been received.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to disconnect from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disconnect_external_data_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.disconnect_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.disconnect_external_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.disconnect_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/disconnect'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#disconnect_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employee
    # Return an ExternalEmployeeMapping for the specified Employee from the external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [ExternalEmployeeMapping]
    def employee_external_data(id, employer_id, employee_id, opts = {})
      data, _status_code, _headers = employee_external_data_with_http_info(id, employer_id, employee_id, opts)
      data
    end

    # Get Employee
    # Return an ExternalEmployeeMapping for the specified Employee from the external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalEmployeeMapping, Integer, Hash)>] ExternalEmployeeMapping data, response status code and response headers
    def employee_external_data_with_http_info(id, employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.employee_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.employee_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.employee_external_data"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ExternalDataApi.employee_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/{employeeId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ExternalEmployeeMapping' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#employee_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employee Logs
    # Return a list of changes made locally to this employee based on changes in the external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [Array<LogEntry>]
    def employee_logs_external_data(id, employer_id, employee_id, opts = {})
      data, _status_code, _headers = employee_logs_external_data_with_http_info(id, employer_id, employee_id, opts)
      data
    end

    # Get Employee Logs
    # Return a list of changes made locally to this employee based on changes in the external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LogEntry>, Integer, Hash)>] Array<LogEntry> data, response status code and response headers
    def employee_logs_external_data_with_http_info(id, employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.employee_logs_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.employee_logs_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.employee_logs_external_data"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ExternalDataApi.employee_logs_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/{employeeId}/logs'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<LogEntry>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#employee_logs_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Employees
    # Return a list of ExternalEmployeeMapping for Employees in the external data provider.\\n  The metadata of the Item contains a field called externalId. This can be used to retrieve the full employee record.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def employees_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = employees_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # List Employees
    # Return a list of ExternalEmployeeMapping for Employees in the external data provider.\\n  The metadata of the Item contains a field called externalId. This can be used to retrieve the full employee record.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def employees_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.employees_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.employees_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.employees_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#employees_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Config Data
    # Returns any additional configuration data for the connection to the ExternalDataProvider.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want configuration data for.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_config_data_external_data(employer_id, id, opts = {})
      get_config_data_external_data_with_http_info(employer_id, id, opts)
      nil
    end

    # Get Config Data
    # Returns any additional configuration data for the connection to the ExternalDataProvider.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want configuration data for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_config_data_external_data_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.get_config_data_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.get_config_data_external_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.get_config_data_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/config'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#get_config_data_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Http Get
    # Perform a GET to given URL of the specified ExtenalDataProvider API
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 
    # @return [nil]
    def get_request_external_data(id, employer_id, opts = {})
      get_request_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Http Get
    # Perform a GET to given URL of the specified ExtenalDataProvider API
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_request_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.get_request_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.get_request_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.get_request_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/http-get'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#get_request_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import Employees
    # Import Employees from the external data provider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body The externalIds to import
    # @return [Array<Item>]
    def import_employees_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = import_employees_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # Import Employees
    # Import Employees from the external data provider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body The externalIds to import
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def import_employees_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.import_employees_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.import_employees_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.import_employees_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#import_employees_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Providers
    # Returns a list of External Data Providers and indicates which the Employer has successfully authenticated with.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<ExternalDataProvider>]
    def list_external_data(employer_id, opts = {})
      data, _status_code, _headers = list_external_data_with_http_info(employer_id, opts)
      data
    end

    # List Providers
    # Returns a list of External Data Providers and indicates which the Employer has successfully authenticated with.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExternalDataProvider>, Integer, Hash)>] Array<ExternalDataProvider> data, response status code and response headers
    def list_external_data_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.list_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.list_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ExternalDataProvider>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#list_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Nominal Codes
    # Return a list of Nominal Codes from the external data provider
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def nominal_codes_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = nominal_codes_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # List Nominal Codes
    # Return a list of Nominal Codes from the external data provider
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def nominal_codes_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.nominal_codes_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.nominal_codes_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.nominal_codes_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/nominals'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#nominal_codes_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Contributions CSV File
    # Returns a CSV file containing contributions for the specified payrun in a format specific to the ExternalDataProvider
    # @param id 
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [String]
    def pension_contributions_csv_external_data(id, employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = pension_contributions_csv_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # Contributions CSV File
    # Returns a CSV file containing contributions for the specified payrun in a format specific to the ExternalDataProvider
    # @param id 
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
    # @option opts [Integer] :ordinal 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pension_contributions_csv_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.pension_contributions_csv_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.pension_contributions_csv_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.pension_contributions_csv_external_data"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ExternalDataApi.pension_contributions_csv_external_data"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ExternalDataApi.pension_contributions_csv_external_data"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ExternalDataApi.pension_contributions_csv_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/contributions/{taxYear}/{payPeriod}/{periodNumber}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'schemeId'] = opts[:'scheme_id'] if !opts[:'scheme_id'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#pension_contributions_csv_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post Journal
    # Post a Journal for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the journal was necessarily successfully posted.\\n  The PayRunJournal is returned (without the Lines) so that you can inspect the status to determine success
    # @param id 
    # @param employer_id 
    # @param pay_period To identify the PayRun
    # @param period_number To identify the PayRun
    # @param tax_year To identify the PayRun
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Set to true if you want to force the journal to be posted even if it already has been
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [PayRunJournal]
    def post_journal_external_data(id, employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = post_journal_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # Post Journal
    # Post a Journal for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the journal was necessarily successfully posted.\\n  The PayRunJournal is returned (without the Lines) so that you can inspect the status to determine success
    # @param id 
    # @param employer_id 
    # @param pay_period To identify the PayRun
    # @param period_number To identify the PayRun
    # @param tax_year To identify the PayRun
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Set to true if you want to force the journal to be posted even if it already has been
    # @option opts [Integer] :ordinal 
    # @return [Array<(PayRunJournal, Integer, Hash)>] PayRunJournal data, response status code and response headers
    def post_journal_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.post_journal_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.post_journal_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.post_journal_external_data"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ExternalDataApi.post_journal_external_data"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ExternalDataApi.post_journal_external_data"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ExternalDataApi.post_journal_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/journal'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PayRunJournal' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#post_journal_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post Payments
    # Post Payments for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the payments were necessarily successfully posted.\\n  The BankPaymentInstruction is returned (without the payments) so that you can inspect the status to determine success
    # @param id 
    # @param employer_id 
    # @param pay_period To identify the PayRun
    # @param period_number To identify the PayRun
    # @param tax_year To identify the PayRun
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inc_employees Include payments for employees
    # @option opts [BOOLEAN] :inc_hmrc Include payments for HMRC (if any)
    # @option opts [BOOLEAN] :inc_pensions Include payments for Pension Providers (if any)
    # @option opts [BOOLEAN] :force Set to true if you want to force the payments to be posted even if it already has been
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [DateTime] :payment_date Optional. If a value is provided then it&#x27;ll be used in place of the payment date for the payment.
    # @return [BankPaymentInstruction]
    def post_payments_external_data(id, employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = post_payments_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # Post Payments
    # Post Payments for a payrun to the ExternalDataProvider\\n  A 200 response does not mean the payments were necessarily successfully posted.\\n  The BankPaymentInstruction is returned (without the payments) so that you can inspect the status to determine success
    # @param id 
    # @param employer_id 
    # @param pay_period To identify the PayRun
    # @param period_number To identify the PayRun
    # @param tax_year To identify the PayRun
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inc_employees Include payments for employees
    # @option opts [BOOLEAN] :inc_hmrc Include payments for HMRC (if any)
    # @option opts [BOOLEAN] :inc_pensions Include payments for Pension Providers (if any)
    # @option opts [BOOLEAN] :force Set to true if you want to force the payments to be posted even if it already has been
    # @option opts [Integer] :ordinal 
    # @option opts [DateTime] :payment_date Optional. If a value is provided then it&#x27;ll be used in place of the payment date for the payment.
    # @return [Array<(BankPaymentInstruction, Integer, Hash)>] BankPaymentInstruction data, response status code and response headers
    def post_payments_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.post_payments_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.post_payments_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.post_payments_external_data"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ExternalDataApi.post_payments_external_data"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ExternalDataApi.post_payments_external_data"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ExternalDataApi.post_payments_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/payments'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'incEmployees'] = opts[:'inc_employees'] if !opts[:'inc_employees'].nil?
      query_params[:'incHmrc'] = opts[:'inc_hmrc'] if !opts[:'inc_hmrc'].nil?
      query_params[:'incPensions'] = opts[:'inc_pensions'] if !opts[:'inc_pensions'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'paymentDate'] = opts[:'payment_date'] if !opts[:'payment_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BankPaymentInstruction' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#post_payments_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Http Post
    # Perform a GET to given URL of the specified ExtenalDataProvider API
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :body 
    # @option opts [String] :url 
    # @return [nil]
    def post_request_external_data(id, employer_id, opts = {})
      post_request_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Http Post
    # Perform a GET to given URL of the specified ExtenalDataProvider API
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :body 
    # @option opts [String] :url 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_request_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.post_request_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.post_request_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.post_request_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/http-post'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#post_request_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push Employees
    # Push employees to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def push_employees_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = push_employees_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # Push Employees
    # Push employees to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def push_employees_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_employees_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_employees_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_employees_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/push'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_employees_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push P11D
    # Pushes a P11D for the given employee to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [TaxYear] :tax_year 
    # @return [nil]
    def push_p11_d_external_data(id, employer_id, opts = {})
      push_p11_d_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push P11D
    # Pushes a P11D for the given employee to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [TaxYear] :tax_year 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_p11_d_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_p11_d_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_p11_d_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_p11_d_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/p11d'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_p11_d_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push P11Ds
    # Pushes all P11Ds for the given TaxYear to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year 
    # @return [nil]
    def push_p11_ds_external_data(id, employer_id, opts = {})
      push_p11_ds_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push P11Ds
    # Pushes all P11Ds for the given TaxYear to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_p11_ds_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_p11_ds_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_p11_ds_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_p11_ds_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/p11ds'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_p11_ds_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push P45
    # Push a P45 to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @return [nil]
    def push_p45_external_data(id, employer_id, opts = {})
      push_p45_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push P45
    # Push a P45 to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_p45_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_p45_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_p45_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_p45_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/p45'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_p45_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push P60
    # Pushes a P60 to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [TaxYear] :tax_year 
    # @return [nil]
    def push_p60_external_data(id, employer_id, opts = {})
      push_p60_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push P60
    # Pushes a P60 to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [TaxYear] :tax_year 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_p60_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_p60_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_p60_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_p60_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/p60'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_p60_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push Payslips
    # Push payslips to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PayPeriods] :pay_period 
    # @option opts [Integer] :period_number 
    # @option opts [TaxYear] :tax_year 
    # @option opts [BOOLEAN] :force 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [nil]
    def push_payslips_external_data(id, employer_id, opts = {})
      push_payslips_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push Payslips
    # Push payslips to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PayPeriods] :pay_period 
    # @option opts [Integer] :period_number 
    # @option opts [TaxYear] :tax_year 
    # @option opts [BOOLEAN] :force 
    # @option opts [Integer] :ordinal 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_payslips_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_payslips_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_payslips_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_payslips_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/payslips'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'payPeriod'] = opts[:'pay_period'] if !opts[:'pay_period'].nil?
      query_params[:'periodNumber'] = opts[:'period_number'] if !opts[:'period_number'].nil?
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_payslips_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Push Pension Letter
    # Pushes a Pension Letter for the given employee to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [String] :assessment_id 
    # @return [nil]
    def push_pension_letter_external_data(id, employer_id, opts = {})
      push_pension_letter_external_data_with_http_info(id, employer_id, opts)
      nil
    end

    # Push Pension Letter
    # Pushes a Pension Letter for the given employee to the ExternalDataProvider.
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id 
    # @option opts [String] :assessment_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_pension_letter_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.push_pension_letter_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.push_pension_letter_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.push_pension_letter_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/pension-letter'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'assessmentId'] = opts[:'assessment_id'] if !opts[:'assessment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#push_pension_letter_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 3rd Party Response
    # This endpoint is used by third parties to respond to an oAuth authorization request. You do not need to use this
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error 
    # @return [nil]
    def respond_external_data(id, opts = {})
      respond_external_data_with_http_info(id, opts)
      nil
    end

    # 3rd Party Response
    # This endpoint is used by third parties to respond to an oAuth authorization request. You do not need to use this
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def respond_external_data_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.respond_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.respond_external_data"
      end
      # resource path
      local_var_path = '/external-data/{id}/respond'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'error'] = opts[:'error'] if !opts[:'error'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#respond_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Config Data
    # Sets the additional configuration data for the connection to the ExternalDataProvider.\\n  Only the value set in the userData field is updated
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want configuration data for.
    # @param [Hash] opts the optional parameters
    # @option opts [] :body 
    # @return [nil]
    def set_config_data_external_data(employer_id, id, opts = {})
      set_config_data_external_data_with_http_info(employer_id, id, opts)
      nil
    end

    # Set Config Data
    # Sets the additional configuration data for the connection to the ExternalDataProvider.\\n  Only the value set in the userData field is updated
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want configuration data for.
    # @param [Hash] opts the optional parameters
    # @option opts [] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_config_data_external_data_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.set_config_data_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.set_config_data_external_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.set_config_data_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/config'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#set_config_data_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Credentials
    # For ExternalDataProviders with an AuthScheme of Basic.\\n  Sets the username and password for the service.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to authorize with.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<StringStringKeyValuePair>] :body Any additional data that is needed (optional)
    # @option opts [String] :username The username for the ExternalDataProvider.
    # @option opts [String] :password The password for the ExternalDataProvider.
    # @return [nil]
    def set_credentials_external_data(employer_id, id, opts = {})
      set_credentials_external_data_with_http_info(employer_id, id, opts)
      nil
    end

    # Set Credentials
    # For ExternalDataProviders with an AuthScheme of Basic.\\n  Sets the username and password for the service.
    # @param employer_id The Id of the Employer.
    # @param id The Id of the ExternalDataProvider you want to authorize with.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<StringStringKeyValuePair>] :body Any additional data that is needed (optional)
    # @option opts [String] :username The username for the ExternalDataProvider.
    # @option opts [String] :password The password for the ExternalDataProvider.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_credentials_external_data_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.set_credentials_external_data ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.set_credentials_external_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.set_credentials_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/authorize'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#set_credentials_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sync Employees
    # Syncs data from the ExternalDataProvider to update all mapped employees
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def sync_all_employees_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = sync_all_employees_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # Sync Employees
    # Syncs data from the ExternalDataProvider to update all mapped employees
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def sync_all_employees_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.sync_all_employees_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.sync_all_employees_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.sync_all_employees_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/i/sync-all'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#sync_all_employees_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sync Employee
    # Syncs data from the ExternalDataProvider to update the specified mapped employee.\\n  Any changes made as a result of the sync are show in the metadata.logs property.
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [Item]
    def sync_employee_external_data(id, employer_id, employee_id, opts = {})
      data, _status_code, _headers = sync_employee_external_data_with_http_info(id, employer_id, employee_id, opts)
      data
    end

    # Sync Employee
    # Syncs data from the ExternalDataProvider to update the specified mapped employee.\\n  Any changes made as a result of the sync are show in the metadata.logs property.
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def sync_employee_external_data_with_http_info(id, employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.sync_employee_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.sync_employee_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.sync_employee_external_data"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ExternalDataApi.sync_employee_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/{employeeId}/sync'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#sync_employee_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sync Leave
    # Sync Leave from the ExternalDataProvider for the specified PayRun.\\n  Returns a JSON object indicating how many Leaves have been created, updated or deleted, etc.
    # @param id 
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [nil]
    def sync_leave_external_data(id, employer_id, pay_period, period_number, tax_year, opts = {})
      sync_leave_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts)
      nil
    end

    # Sync Leave
    # Sync Leave from the ExternalDataProvider for the specified PayRun.\\n  Returns a JSON object indicating how many Leaves have been created, updated or deleted, etc.
    # @param id 
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sync_leave_external_data_with_http_info(id, employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.sync_leave_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.sync_leave_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.sync_leave_external_data"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ExternalDataApi.sync_leave_external_data"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ExternalDataApi.sync_leave_external_data"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ExternalDataApi.sync_leave_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/leave'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#sync_leave_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Time And Attendance Data
    # Return a list of PayOptionsImport representing Time and Attendance data from the specified ExternalDataProvider, for to specified date range
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<PayOptionsImport>]
    def time_and_attendance_external_data(id, employer_id, opts = {})
      data, _status_code, _headers = time_and_attendance_external_data_with_http_info(id, employer_id, opts)
      data
    end

    # Get Time And Attendance Data
    # Return a list of PayOptionsImport representing Time and Attendance data from the specified ExternalDataProvider, for to specified date range
    # @param id 
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from 
    # @option opts [DateTime] :to 
    # @return [Array<(Array<PayOptionsImport>, Integer, Hash)>] Array<PayOptionsImport> data, response status code and response headers
    def time_and_attendance_external_data_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.time_and_attendance_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.time_and_attendance_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.time_and_attendance_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/time-and-attendance'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<PayOptionsImport>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#time_and_attendance_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Employee
    # Update an ExternalEmployeeMapping to map/unmap/import/ignore an employee from an external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @option opts [ExternalEmployeeMapping] :body 
    # @return [ExternalEmployeeMapping]
    def update_employee_external_data(id, employer_id, employee_id, opts = {})
      data, _status_code, _headers = update_employee_external_data_with_http_info(id, employer_id, employee_id, opts)
      data
    end

    # Update Employee
    # Update an ExternalEmployeeMapping to map/unmap/import/ignore an employee from an external data provider
    # @param id 
    # @param employer_id 
    # @param employee_id The Id of the employee in the external data provider
    # @param [Hash] opts the optional parameters
    # @option opts [ExternalEmployeeMapping] :body 
    # @return [Array<(ExternalEmployeeMapping, Integer, Hash)>] ExternalEmployeeMapping data, response status code and response headers
    def update_employee_external_data_with_http_info(id, employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalDataApi.update_employee_external_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ExternalDataApi.update_employee_external_data"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ExternalDataApi.update_employee_external_data"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ExternalDataApi.update_employee_external_data"
      end
      # resource path
      local_var_path = '/employers/{employerId}/external-data/{id}/employees/{employeeId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ExternalEmployeeMapping' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalDataApi#update_employee_external_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
