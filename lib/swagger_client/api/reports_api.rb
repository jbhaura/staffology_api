=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # AutoEnrolment Assessments
    # Returns a list of Items representing your current Employees along with their most recent Auto Enrolment Assessment in the metadata field.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ItemListReportResponse]
    def ae_assessments_reports(employer_id, opts = {})
      data, _status_code, _headers = ae_assessments_reports_with_http_info(employer_id, opts)
      data
    end

    # AutoEnrolment Assessments
    # Returns a list of Items representing your current Employees along with their most recent Auto Enrolment Assessment in the metadata field.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ItemListReportResponse, Integer, Hash)>] ItemListReportResponse data, response status code and response headers
    def ae_assessments_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.ae_assessments_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.ae_assessments_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/AeAssessments'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ItemListReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#ae_assessments_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # AEO Statement
    # Returns a statement for an Attachment Order, listing payments that have been made.
    # @param employee_id 
    # @param id The id of the AttachmentOrder
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_id 
    # @option opts [String] :accept 
    # @return [AttachmentOrderReportResponse]
    def aeo_statement_reports(employee_id, id, opts = {})
      data, _status_code, _headers = aeo_statement_reports_with_http_info(employee_id, id, opts)
      data
    end

    # AEO Statement
    # Returns a statement for an Attachment Order, listing payments that have been made.
    # @param employee_id 
    # @param id The id of the AttachmentOrder
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_id 
    # @option opts [String] :accept 
    # @return [Array<(AttachmentOrderReportResponse, Integer, Hash)>] AttachmentOrderReportResponse data, response status code and response headers
    def aeo_statement_reports_with_http_info(employee_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.aeo_statement_reports ...'
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.aeo_statement_reports"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportsApi.aeo_statement_reports"
      end
      # resource path
      local_var_path = '/aeo/{employeeId}/{id}'.sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employerId'] = opts[:'employer_id'] if !opts[:'employer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AttachmentOrderReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#aeo_statement_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Analysis
    # Returns an AnalysisReport for one or multiple periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
    # @return [AnalysisReportReportResponse]
    def analysis_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = analysis_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Analysis
    # Returns an AnalysisReport for one or multiple periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
    # @return [Array<(AnalysisReportReportResponse, Integer, Hash)>] AnalysisReportReportResponse data, response status code and response headers
    def analysis_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.analysis_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.analysis_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.analysis_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.analysis_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/analysis'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'deptCode'] = opts[:'dept_code'] if !opts[:'dept_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AnalysisReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#analysis_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bank Payment Instructions
    # Returns a list of bank payments that need to be made to employees as a result of a Payrun.\\n  You can optionally provide a PaymentDate and only payments for that date will be returned.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [DateTime] :payment_date 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [BOOLEAN] :inc_pensions Set to true and we&#x27;ll include any payment due to Pension Providers (default to false)
    # @option opts [BOOLEAN] :inc_hmrc Set to true and we&#x27;ll include any payment due to HMRC (default to false)
    # @return [BankPaymentInstructionReportResponse]
    def bank_payment_instructions_reports(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = bank_payment_instructions_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # Bank Payment Instructions
    # Returns a list of bank payments that need to be made to employees as a result of a Payrun.\\n  You can optionally provide a PaymentDate and only payments for that date will be returned.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [DateTime] :payment_date 
    # @option opts [Integer] :ordinal 
    # @option opts [BOOLEAN] :inc_pensions Set to true and we&#x27;ll include any payment due to Pension Providers
    # @option opts [BOOLEAN] :inc_hmrc Set to true and we&#x27;ll include any payment due to HMRC
    # @return [Array<(BankPaymentInstructionReportResponse, Integer, Hash)>] BankPaymentInstructionReportResponse data, response status code and response headers
    def bank_payment_instructions_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.bank_payment_instructions_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.bank_payment_instructions_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.bank_payment_instructions_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.bank_payment_instructions_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.bank_payment_instructions_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee/credit'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'paymentDate'] = opts[:'payment_date'] if !opts[:'payment_date'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'incPensions'] = opts[:'inc_pensions'] if !opts[:'inc_pensions'].nil?
      query_params[:'incHmrc'] = opts[:'inc_hmrc'] if !opts[:'inc_hmrc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BankPaymentInstructionReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#bank_payment_instructions_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # CIS300
    # Returns a CIS300 as a CSV or human-readable report
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of CIS300.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Cis300ReportResponse]
    def cis300_reports(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = cis300_reports_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # CIS300
    # Returns a CIS300 as a CSV or human-readable report
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of CIS300.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(Cis300ReportResponse, Integer, Hash)>] Cis300ReportResponse data, response status code and response headers
    def cis300_reports_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.cis300_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.cis300_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.cis300_reports"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportsApi.cis300_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/cis300/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/csv', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Cis300ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#cis300_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # CIS Statement
    # Returns a CIS Statement for the employee specified.
    # @param employer_id 
    # @param tax_year 
    # @param tax_month 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id Specify an employeeId to get a single statement.\\nIf you don&#x27;t provide a value then all Subcontractors will be included.
    # @option opts [String] :accept 
    # @return [CisStatementListReportResponse]
    def cis_statement_reports(employer_id, tax_year, tax_month, opts = {})
      data, _status_code, _headers = cis_statement_reports_with_http_info(employer_id, tax_year, tax_month, opts)
      data
    end

    # CIS Statement
    # Returns a CIS Statement for the employee specified.
    # @param employer_id 
    # @param tax_year 
    # @param tax_month 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id Specify an employeeId to get a single statement.\\nIf you don&#x27;t provide a value then all Subcontractors will be included.
    # @option opts [String] :accept 
    # @return [Array<(CisStatementListReportResponse, Integer, Hash)>] CisStatementListReportResponse data, response status code and response headers
    def cis_statement_reports_with_http_info(employer_id, tax_year, tax_month, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.cis_statement_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.cis_statement_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.cis_statement_reports"
      end
      # verify the required parameter 'tax_month' is set
      if @api_client.config.client_side_validation && tax_month.nil?
        fail ArgumentError, "Missing the required parameter 'tax_month' when calling ReportsApi.cis_statement_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/cisstatement/{taxMonth}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'taxMonth' + '}', tax_month.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CisStatementListReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#cis_statement_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # CIS Subcontractor Summary
    # Returns a list of all CIS Subcontractors along with verification details
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [CisSubContractorSummaryListReportResponse]
    def cis_sub_contractor_summary_reports(employer_id, opts = {})
      data, _status_code, _headers = cis_sub_contractor_summary_reports_with_http_info(employer_id, opts)
      data
    end

    # CIS Subcontractor Summary
    # Returns a list of all CIS Subcontractors along with verification details
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(CisSubContractorSummaryListReportResponse, Integer, Hash)>] CisSubContractorSummaryListReportResponse data, response status code and response headers
    def cis_sub_contractor_summary_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.cis_sub_contractor_summary_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.cis_sub_contractor_summary_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/cissummary'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'text/html', 'text/csv', 'application/json'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CisSubContractorSummaryListReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#cis_sub_contractor_summary_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cost Analysis
    # Returns a report analysing the costs of a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [CostAnalysisReportReportResponse]
    def cost_analysis_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = cost_analysis_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Cost Analysis
    # Returns a report analysing the costs of a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(CostAnalysisReportReportResponse, Integer, Hash)>] CostAnalysisReportReportResponse data, response status code and response headers
    def cost_analysis_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.cost_analysis_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.cost_analysis_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.cost_analysis_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.cost_analysis_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/costanalysis'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CostAnalysisReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#cost_analysis_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cost Of Employment
    # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [CostOfEmploymentReportReportResponse]
    def cost_of_employment_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = cost_of_employment_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Cost Of Employment
    # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(CostOfEmploymentReportReportResponse, Integer, Hash)>] CostOfEmploymentReportReportResponse data, response status code and response headers
    def cost_of_employment_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.cost_of_employment_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.cost_of_employment_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.cost_of_employment_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.cost_of_employment_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/costofemployment'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CostOfEmploymentReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#cost_of_employment_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Email P45 to Employee
    # Email a P45 to an Employee you've marked as a leaver
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id The Id of the Employee you want the email a P45 to.
    # @return [nil]
    def email_p45_reports(employer_id, opts = {})
      email_p45_reports_with_http_info(employer_id, opts)
      nil
    end

    # Email P45 to Employee
    # Email a P45 to an Employee you&#x27;ve marked as a leaver
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id The Id of the Employee you want the email a P45 to.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def email_p45_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.email_p45_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.email_p45_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/p45/email'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#email_p45_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Email P60 to all Employees
    # Email P60 to all Employee
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
    # @return [nil]
    def email_p60_multiple_reports(employer_id, opts = {})
      email_p60_multiple_reports_with_http_info(employer_id, opts)
      nil
    end

    # Email P60 to all Employees
    # Email P60 to all Employee
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def email_p60_multiple_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.email_p60_multiple_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.email_p60_multiple_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/p60/email'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#email_p60_multiple_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Email P60 to an Employee
    # Email a P60 to an Employee
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee you want the email a P60 to.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
    # @return [nil]
    def email_p60_reports(employer_id, employee_id, opts = {})
      email_p60_reports_with_http_info(employer_id, employee_id, opts)
      nil
    end

    # Email P60 to an Employee
    # Email a P60 to an Employee
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee you want the email a P60 to.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The TaxYear you want P60s for.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def email_p60_reports_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.email_p60_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.email_p60_reports"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.email_p60_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/p60/email/{employeeId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#email_p60_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Employee Export Details
    # Returns a CSV file containing details for all Employees.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_id 
    # @option opts [TaxYear] :tax_year 
    # @option opts [BOOLEAN] :include_bank_account_details 
    # @option opts [BOOLEAN] :include_ytd 
    # @option opts [BOOLEAN] :inc_pension_info 
    # @option opts [BOOLEAN] :include_pay_info 
    # @option opts [BOOLEAN] :include_notes 
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def employee_export_reports(opts = {})
      data, _status_code, _headers = employee_export_reports_with_http_info(opts)
      data
    end

    # Employee Export Details
    # Returns a CSV file containing details for all Employees.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employer_id 
    # @option opts [TaxYear] :tax_year 
    # @option opts [BOOLEAN] :include_bank_account_details 
    # @option opts [BOOLEAN] :include_ytd 
    # @option opts [BOOLEAN] :inc_pension_info 
    # @option opts [BOOLEAN] :include_pay_info 
    # @option opts [BOOLEAN] :include_notes 
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def employee_export_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.employee_export_reports ...'
      end
      # resource path
      local_var_path = '/employees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employerId'] = opts[:'employer_id'] if !opts[:'employer_id'].nil?
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?
      query_params[:'includeBankAccountDetails'] = opts[:'include_bank_account_details'] if !opts[:'include_bank_account_details'].nil?
      query_params[:'includeYtd'] = opts[:'include_ytd'] if !opts[:'include_ytd'].nil?
      query_params[:'incPensionInfo'] = opts[:'inc_pension_info'] if !opts[:'inc_pension_info'].nil?
      query_params[:'includePayInfo'] = opts[:'include_pay_info'] if !opts[:'include_pay_info'].nil?
      query_params[:'includeNotes'] = opts[:'include_notes'] if !opts[:'include_notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#employee_export_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Employer Export
    # Returns a CSV file containing details for all Employers.
    # @param employer_id The Id of any employer to which you have access. It wont affect the report results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def employer_export_reports(employer_id, opts = {})
      data, _status_code, _headers = employer_export_reports_with_http_info(employer_id, opts)
      data
    end

    # Employer Export
    # Returns a CSV file containing details for all Employers.
    # @param employer_id The Id of any employer to which you have access. It wont affect the report results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def employer_export_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.employer_export_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.employer_export_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/employers'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#employer_export_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Example Payslip
    # Use this operation to test your PayslipCustomisation.\\n  We'll use dummy date and create a Payslip PDF or HTML document based on the customisation that you submit
    # @param [Hash] opts the optional parameters
    # @option opts [PayslipCustomisation] :body Your PayslipCustomisation.
    # @option opts [String] :accept 
    # @option opts [String] :employer_id 
    # @return [ReportResponse]
    def example_payslip_reports(opts = {})
      data, _status_code, _headers = example_payslip_reports_with_http_info(opts)
      data
    end

    # Example Payslip
    # Use this operation to test your PayslipCustomisation.\\n  We&#x27;ll use dummy date and create a Payslip PDF or HTML document based on the customisation that you submit
    # @param [Hash] opts the optional parameters
    # @option opts [PayslipCustomisation] :body Your PayslipCustomisation.
    # @option opts [String] :accept 
    # @option opts [String] :employer_id 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def example_payslip_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.example_payslip_reports ...'
      end
      # resource path
      local_var_path = '/payslip/example/pdf'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employerId'] = opts[:'employer_id'] if !opts[:'employer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#example_payslip_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # EXB
    # Returns an EXB as a CSV file
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of EXB.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ExbReportResponse]
    def exb_reports(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = exb_reports_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # EXB
    # Returns an EXB as a CSV file
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of EXB.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ExbReportResponse, Integer, Hash)>] ExbReportResponse data, response status code and response headers
    def exb_reports_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.exb_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.exb_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.exb_reports"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportsApi.exb_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/exb/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ExbReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#exb_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # FPS
    # Returns an FPS as a CSV file
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of FPS.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inc_all_employees If true, then any employees that were paid earlier in the year but not on this FPS will also be included
    # @option opts [String] :accept 
    # @return [FpsReportResponse]
    def fps_reports(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = fps_reports_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # FPS
    # Returns an FPS as a CSV file
    # @param employer_id 
    # @param tax_year 
    # @param id The Id of FPS.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inc_all_employees If true, then any employees that were paid earlier in the year but not on this FPS will also be included
    # @option opts [String] :accept 
    # @return [Array<(FpsReportResponse, Integer, Hash)>] FpsReportResponse data, response status code and response headers
    def fps_reports_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.fps_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.fps_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.fps_reports"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportsApi.fps_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/fps/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'incAllEmployees'] = opts[:'inc_all_employees'] if !opts[:'inc_all_employees'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'FpsReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#fps_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cost Of Employment
    # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [FullSummaryOfPayReportReportResponse]
    def full_summary_of_pay_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = full_summary_of_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Cost Of Employment
    # Returns a report detailing the employment cost per employee for a payrun or range of payruns.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(FullSummaryOfPayReportReportResponse, Integer, Hash)>] FullSummaryOfPayReportReportResponse data, response status code and response headers
    def full_summary_of_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.full_summary_of_pay_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.full_summary_of_pay_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.full_summary_of_pay_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.full_summary_of_pay_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/fullsummaryofpay'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'FullSummaryOfPayReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#full_summary_of_pay_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # FurloughReport
    # Returns a Furlough Report.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [FurloughReportReportResponse]
    def furlough_report_reports(employer_id, pay_period, tax_year, period_number, opts = {})
      data, _status_code, _headers = furlough_report_reports_with_http_info(employer_id, pay_period, tax_year, period_number, opts)
      data
    end

    # FurloughReport
    # Returns a Furlough Report.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(FurloughReportReportResponse, Integer, Hash)>] FurloughReportReportResponse data, response status code and response headers
    def furlough_report_reports_with_http_info(employer_id, pay_period, tax_year, period_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.furlough_report_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.furlough_report_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.furlough_report_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.furlough_report_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.furlough_report_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/furlough'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'FurloughReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#furlough_report_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PayRun CSV
    # Download the lines of a PayRun to a CSV file.\\n
    # @param employer_id 
    # @param tax_year 
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [PayRunCsvType] :csv_type Choose the type of CSV you want to generate
    # @option opts [String] :mapping_id If you provide the id of a PaymentCsvMapping that is column based then we&#x27;ll return the CSV formatted accordingly
    # @option opts [String] :accept  (default to application/json)
    # @return [ReportResponse]
    def get_pay_run_csv_reports(employer_id, tax_year, pay_period, period_number, opts = {})
      data, _status_code, _headers = get_pay_run_csv_reports_with_http_info(employer_id, tax_year, pay_period, period_number, opts)
      data
    end

    # Get PayRun CSV
    # Download the lines of a PayRun to a CSV file.\\n
    # @param employer_id 
    # @param tax_year 
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @option opts [PayRunCsvType] :csv_type Choose the type of CSV you want to generate
    # @option opts [String] :mapping_id If you provide the id of a PaymentCsvMapping that is column based then we&#x27;ll return the CSV formatted accordingly
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def get_pay_run_csv_reports_with_http_info(employer_id, tax_year, pay_period, period_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_pay_run_csv_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.get_pay_run_csv_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.get_pay_run_csv_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.get_pay_run_csv_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.get_pay_run_csv_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payruncsv'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'csvType'] = opts[:'csv_type'] if !opts[:'csv_type'].nil?
      query_params[:'mappingId'] = opts[:'mapping_id'] if !opts[:'mapping_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_pay_run_csv_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gross To Net
    # Returns a report comparing employees' gross pay with their net pay for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [BOOLEAN] :for_cis If true then CIS Subcontractors are reported on.\\nIf all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (default to false)
    # @return [GrossToNetReportReportResponse]
    def gross_to_net_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = gross_to_net_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Gross To Net
    # Returns a report comparing employees&#x27; gross pay with their net pay for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [BOOLEAN] :for_cis If true then CIS Subcontractors are reported on.\\nIf all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false
    # @return [Array<(GrossToNetReportReportResponse, Integer, Hash)>] GrossToNetReportReportResponse data, response status code and response headers
    def gross_to_net_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.gross_to_net_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.gross_to_net_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.gross_to_net_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.gross_to_net_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/gross-to-net'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'forCis'] = opts[:'for_cis'] if !opts[:'for_cis'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GrossToNetReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#gross_to_net_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Holiday
    # Returns a report summarising holiday usage for all employees.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [BOOLEAN] :accruals If set to true then you&#x27;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (default to false)
    # @return [HolidayReportReportResponse]
    def holiday_reports(employer_id, opts = {})
      data, _status_code, _headers = holiday_reports_with_http_info(employer_id, opts)
      data
    end

    # Holiday
    # Returns a report summarising holiday usage for all employees.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [BOOLEAN] :accruals If set to true then you&#x27;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false.
    # @return [Array<(HolidayReportReportResponse, Integer, Hash)>] HolidayReportReportResponse data, response status code and response headers
    def holiday_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.holiday_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.holiday_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/holiday'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accruals'] = opts[:'accruals'] if !opts[:'accruals'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'HolidayReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#holiday_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Hourly Pay
    # Returns a report summarising the hourly pay for employees for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [HourlyPayReportReportResponse]
    def hourly_pay_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = hourly_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Hourly Pay
    # Returns a report summarising the hourly pay for employees for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(HourlyPayReportReportResponse, Integer, Hash)>] HourlyPayReportReportResponse data, response status code and response headers
    def hourly_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.hourly_pay_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.hourly_pay_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.hourly_pay_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.hourly_pay_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/hourly-pay'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'HourlyPayReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#hourly_pay_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P11D For Employee
    # Gets a P11D in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee.
    # @param tax_year The TaxYear the P60 is for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p11_d_reports(employer_id, employee_id, tax_year, opts = {})
      data, _status_code, _headers = p11_d_reports_with_http_info(employer_id, employee_id, tax_year, opts)
      data
    end

    # P11D For Employee
    # Gets a P11D in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee.
    # @param tax_year The TaxYear the P60 is for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p11_d_reports_with_http_info(employer_id, employee_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p11_d_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p11_d_reports"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.p11_d_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p11_d_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p11d/{employeeId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p11_d_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # All Detailed P11s For TaxYear
    # Returns all detailed P11s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.
    # @param employer_id The Id of the employer you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p11_detailed_multiple_reports(employer_id, tax_year, opts = {})
      data, _status_code, _headers = p11_detailed_multiple_reports_with_http_info(employer_id, tax_year, opts)
      data
    end

    # All Detailed P11s For TaxYear
    # Returns all detailed P11s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
    # @param employer_id The Id of the employer you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p11_detailed_multiple_reports_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p11_detailed_multiple_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p11_detailed_multiple_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p11_detailed_multiple_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p11detailed'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p11_detailed_multiple_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P11 (Detailed)
    # Returns a detailed P11 Report for the given employee.
    # @param employer_id 
    # @param employee_id The employee Id of the employee you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [P11DetailedReportResponse]
    def p11_detailed_reports(employer_id, employee_id, tax_year, opts = {})
      data, _status_code, _headers = p11_detailed_reports_with_http_info(employer_id, employee_id, tax_year, opts)
      data
    end

    # P11 (Detailed)
    # Returns a detailed P11 Report for the given employee.
    # @param employer_id 
    # @param employee_id The employee Id of the employee you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(P11DetailedReportResponse, Integer, Hash)>] P11DetailedReportResponse data, response status code and response headers
    def p11_detailed_reports_with_http_info(employer_id, employee_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p11_detailed_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p11_detailed_reports"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.p11_detailed_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p11_detailed_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{employeeId}/p11detailed'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'P11DetailedReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p11_detailed_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P11
    # Returns a P11 Report, detailing all payments and deductions for the given employee
    # @param employer_id 
    # @param employee_id The employee Id of the employee you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [P11ReportResponse]
    def p11_reports(employer_id, employee_id, tax_year, opts = {})
      data, _status_code, _headers = p11_reports_with_http_info(employer_id, employee_id, tax_year, opts)
      data
    end

    # P11
    # Returns a P11 Report, detailing all payments and deductions for the given employee
    # @param employer_id 
    # @param employee_id The employee Id of the employee you want to report on
    # @param tax_year The tax year you want to report on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(P11ReportResponse, Integer, Hash)>] P11ReportResponse data, response status code and response headers
    def p11_reports_with_http_info(employer_id, employee_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p11_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p11_reports"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.p11_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p11_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{employeeId}/p11'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json', 'text/csv', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'P11ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p11_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P30
    # Returns a P30 Report summarising the employers HMRC liabilities for the period.\\n  For available periods retrieve a list of HmrcLiability and examine the metadata.\\n  If the accept header is set to \"text/csv\" then the periodEnding parameter is ignored and you'll receive a CSV for the entire TaxYear.
    # @param employer_id 
    # @param tax_year 
    # @param period_ending 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p30_reports(employer_id, tax_year, period_ending, opts = {})
      data, _status_code, _headers = p30_reports_with_http_info(employer_id, tax_year, period_ending, opts)
      data
    end

    # P30
    # Returns a P30 Report summarising the employers HMRC liabilities for the period.\\n  For available periods retrieve a list of HmrcLiability and examine the metadata.\\n  If the accept header is set to \&quot;text/csv\&quot; then the periodEnding parameter is ignored and you&#x27;ll receive a CSV for the entire TaxYear.
    # @param employer_id 
    # @param tax_year 
    # @param period_ending 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p30_reports_with_http_info(employer_id, tax_year, period_ending, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p30_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p30_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p30_reports"
      end
      # verify the required parameter 'period_ending' is set
      if @api_client.config.client_side_validation && period_ending.nil?
        fail ArgumentError, "Missing the required parameter 'period_ending' when calling ReportsApi.p30_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p30/{periodEnding}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'periodEnding' + '}', period_ending.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/csv', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p30_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P32
    # Returns a P32 Report detailing the employers HMRC liabilities for the year.\\n
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [P32ReportResponse]
    def p32_reports(employer_id, tax_year, opts = {})
      data, _status_code, _headers = p32_reports_with_http_info(employer_id, tax_year, opts)
      data
    end

    # P32
    # Returns a P32 Report detailing the employers HMRC liabilities for the year.\\n
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(P32ReportResponse, Integer, Hash)>] P32ReportResponse data, response status code and response headers
    def p32_reports_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p32_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p32_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p32_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p32'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'P32ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p32_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P45 For Employee
    # Get a P45 for an Employee you've marked as a leaver
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id The Id of the Employee you want a P45 for.
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p45_reports(employer_id, opts = {})
      data, _status_code, _headers = p45_reports_with_http_info(employer_id, opts)
      data
    end

    # P45 For Employee
    # Get a P45 for an Employee you&#x27;ve marked as a leaver
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id The Id of the Employee you want a P45 for.
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p45_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p45_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p45_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/p45'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p45_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # All P60s For TaxYear
    # Returns all P60s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.
    # @param employer_id The Id of the Employer.
    # @param tax_year The TaxYear you want P60s for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p60_multiple_reports(employer_id, tax_year, opts = {})
      data, _status_code, _headers = p60_multiple_reports_with_http_info(employer_id, tax_year, opts)
      data
    end

    # All P60s For TaxYear
    # Returns all P60s in a single PDF file for the TaxYear and Employer specified\\n  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
    # @param employer_id The Id of the Employer.
    # @param tax_year The TaxYear you want P60s for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p60_multiple_reports_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p60_multiple_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p60_multiple_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p60_multiple_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p60'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p60_multiple_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # P60 For Employee
    # Gets a P60 in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee.
    # @param tax_year The TaxYear the P60 is for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def p60_reports(employer_id, employee_id, tax_year, opts = {})
      data, _status_code, _headers = p60_reports_with_http_info(employer_id, employee_id, tax_year, opts)
      data
    end

    # P60 For Employee
    # Gets a P60 in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.
    # @param employer_id The Id of the Employer.
    # @param employee_id The Id of the Employee.
    # @param tax_year The TaxYear the P60 is for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def p60_reports_with_http_info(employer_id, employee_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.p60_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.p60_reports"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling ReportsApi.p60_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.p60_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/p60/{employeeId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#p60_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PAPDIS File
    # Returns a PAPDIS compliant file for the PayRun and Pension Provider PAPDIS Id specified
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [PapdisDocumentReportResponse]
    def papdis_file_reports(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = papdis_file_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # PAPDIS File
    # Returns a PAPDIS compliant file for the PayRun and Pension Provider PAPDIS Id specified
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme_id The Id of the Pension Scheme you want a file for.
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(PapdisDocumentReportResponse, Integer, Hash)>] PapdisDocumentReportResponse data, response status code and response headers
    def papdis_file_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.papdis_file_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.papdis_file_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.papdis_file_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.papdis_file_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.papdis_file_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/papdis'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'schemeId'] = opts[:'scheme_id'] if !opts[:'scheme_id'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json', 'text/csv', 'text/xml', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PapdisDocumentReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#papdis_file_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PayRun CSV (deprecated)
    # Download the lines of a PayRun to a CSV file.\\n  Please use Get PayRun CSV that now accepts a parameter for CSV type
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [BOOLEAN] :summary If set to true then instead of a line-by-line CSV, you&#x27;ll receive a summary for each employee (default to false)
    # @return [ReportResponse]
    def pay_run_csv_reports(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = pay_run_csv_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # PayRun CSV (deprecated)
    # Download the lines of a PayRun to a CSV file.\\n  Please use Get PayRun CSV that now accepts a parameter for CSV type
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [BOOLEAN] :summary If set to true then instead of a line-by-line CSV, you&#x27;ll receive a summary for each employee
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def pay_run_csv_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.pay_run_csv_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.pay_run_csv_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.pay_run_csv_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.pay_run_csv_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.pay_run_csv_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payrun-csv'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#pay_run_csv_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PayRun Payments
    # Returns a list of all employee payments that need to be made as a result of a Payrun.\\n  If you specifically want just bank payments (employees where PayMethod is Credit) then you  may find the Bank Payment Instructions API call more useful
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [BOOLEAN] :include_non_employee_payments If set to true then we&#x27;ll also include payments that need to be made to HMRC and PensionProviders (default to false)
    # @return [PayrunPaymentsReportReportResponse]
    def pay_run_payments_reports(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = pay_run_payments_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # PayRun Payments
    # Returns a list of all employee payments that need to be made as a result of a Payrun.\\n  If you specifically want just bank payments (employees where PayMethod is Credit) then you  may find the Bank Payment Instructions API call more useful
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [BOOLEAN] :include_non_employee_payments If set to true then we&#x27;ll also include payments that need to be made to HMRC and PensionProviders
    # @return [Array<(PayrunPaymentsReportReportResponse, Integer, Hash)>] PayrunPaymentsReportReportResponse data, response status code and response headers
    def pay_run_payments_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.pay_run_payments_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.pay_run_payments_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.pay_run_payments_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.pay_run_payments_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.pay_run_payments_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'includeNonEmployeePayments'] = opts[:'include_non_employee_payments'] if !opts[:'include_non_employee_payments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PayrunPaymentsReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#pay_run_payments_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PayRunSummary
    # Returns an array of PayRunSummaryLine for one or multiple periods. Similar to a PayRunJournal except that it can cover multiple periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
    # @return [PayRunSummaryLineIEnumerableReportResponse]
    def pay_run_summary_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = pay_run_summary_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # PayRunSummary
    # Returns an array of PayRunSummaryLine for one or multiple periods. Similar to a PayRunJournal except that it can cover multiple periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [String] :dept_code If specified then only employees assigned to this department code at the time of the payrun will be included
    # @return [Array<(PayRunSummaryLineIEnumerableReportResponse, Integer, Hash)>] PayRunSummaryLineIEnumerableReportResponse data, response status code and response headers
    def pay_run_summary_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.pay_run_summary_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.pay_run_summary_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.pay_run_summary_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.pay_run_summary_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/payrunsummary'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'deptCode'] = opts[:'dept_code'] if !opts[:'dept_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PayRunSummaryLineIEnumerableReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#pay_run_summary_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Payslip
    # Returns a single Payslip for the given PayRunEntry of a PayRun. The type of response depends on the accept header.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [PayslipReportResponse]
    def payslip_reports(employer_id, pay_period, period_number, tax_year, id, opts = {})
      data, _status_code, _headers = payslip_reports_with_http_info(employer_id, pay_period, period_number, tax_year, id, opts)
      data
    end

    # Payslip
    # Returns a single Payslip for the given PayRunEntry of a PayRun. The type of response depends on the accept header.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(PayslipReportResponse, Integer, Hash)>] PayslipReportResponse data, response status code and response headers
    def payslip_reports_with_http_info(employer_id, pay_period, period_number, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.payslip_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.payslip_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.payslip_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.payslip_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.payslip_reports"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportsApi.payslip_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/{id}/payslip'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PayslipReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#payslip_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Payslips
    # Returns a all Payslips for the given PayRun  If you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [BOOLEAN] :unemailed Set this to True if you only want the Payslips that haven&#x27;t been sent by email (default to false)
    # @return [ReportResponse]
    def payslips_reports(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = payslips_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # Payslips
    # Returns a all Payslips for the given PayRun  If you set the accept header to \&quot;text/html\&quot; then unlike other reports the html is NOT in the &lt;code&gt;Content&lt;/code&gt; field.  As there are multiple HTML documents they are encoded as a JSON array of strings in the &lt;code&gt;Model&lt;/code&gt; field.
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [BOOLEAN] :unemailed Set this to True if you only want the Payslips that haven&#x27;t been sent by email
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def payslips_reports_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.payslips_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.payslips_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.payslips_reports"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ReportsApi.payslips_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.payslips_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payslips'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'unemailed'] = opts[:'unemailed'] if !opts[:'unemailed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#payslips_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # RightToWork
    # Returns a report summarising RightToWork information for all employees.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [RightToWorkReportReportResponse]
    def right_to_work_reports(employer_id, opts = {})
      data, _status_code, _headers = right_to_work_reports_with_http_info(employer_id, opts)
      data
    end

    # RightToWork
    # Returns a report summarising RightToWork information for all employees.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(RightToWorkReportReportResponse, Integer, Hash)>] RightToWorkReportReportResponse data, response status code and response headers
    def right_to_work_reports_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.right_to_work_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.right_to_work_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/right-to-work'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RightToWorkReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#right_to_work_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Statutory Pay
    # Returns a report detailing statutory pay for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [StatutoryPayReportReportResponse]
    def statutory_pay_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = statutory_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Statutory Pay
    # Returns a report detailing statutory pay for one or more pay periods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @return [Array<(StatutoryPayReportReportResponse, Integer, Hash)>] StatutoryPayReportReportResponse data, response status code and response headers
    def statutory_pay_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.statutory_pay_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.statutory_pay_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.statutory_pay_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.statutory_pay_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/statutory-pay'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'StatutoryPayReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#statutory_pay_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Umbrella Reconciliation
    # Returns an Umbrella Reconciliation report.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [String] :employee_id Specify an employee id to report on just that employee, otherwise all employees will be included.
    # @return [UmbrellaReconciliationReportReportResponse]
    def umbrella_reconciliation_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = umbrella_reconciliation_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Umbrella Reconciliation
    # Returns an Umbrella Reconciliation report.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [String] :accept 
    # @option opts [Integer] :ordinal 
    # @option opts [String] :employee_id Specify an employee id to report on just that employee, otherwise all employees will be included.
    # @return [Array<(UmbrellaReconciliationReportReportResponse, Integer, Hash)>] UmbrellaReconciliationReportReportResponse data, response status code and response headers
    def umbrella_reconciliation_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.umbrella_reconciliation_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.umbrella_reconciliation_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.umbrella_reconciliation_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.umbrella_reconciliation_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/umbrella-reconciliation'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UmbrellaReconciliationReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#umbrella_reconciliation_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Variance Report
    # Returns a report comparing two pay periods or two ranges of payperiods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [PayPeriods] :pay_period_compare 
    # @option opts [Integer] :ordinal_compare 
    # @option opts [TaxYear] :tax_year_compare 
    # @option opts [Integer] :from_period_compare 
    # @option opts [Integer] :to_period_compare 
    # @option opts [BOOLEAN] :show_percentage If true then any variations will be shown as a percentage.
    # @option opts [Float] :min_change Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored
    # @option opts [String] :accept 
    # @return [VarianceReportReportResponse]
    def variance_report_reports(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = variance_report_reports_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Variance Report
    # Returns a report comparing two pay periods or two ranges of payperiods.
    # @param employer_id 
    # @param pay_period 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @option opts [Integer] :from_period 
    # @option opts [Integer] :to_period 
    # @option opts [PayPeriods] :pay_period_compare 
    # @option opts [Integer] :ordinal_compare 
    # @option opts [TaxYear] :tax_year_compare 
    # @option opts [Integer] :from_period_compare 
    # @option opts [Integer] :to_period_compare 
    # @option opts [BOOLEAN] :show_percentage If true then any variations will be shown as a percentage.
    # @option opts [Float] :min_change Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored
    # @option opts [String] :accept 
    # @return [Array<(VarianceReportReportResponse, Integer, Hash)>] VarianceReportReportResponse data, response status code and response headers
    def variance_report_reports_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.variance_report_reports ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ReportsApi.variance_report_reports"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ReportsApi.variance_report_reports"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ReportsApi.variance_report_reports"
      end
      # resource path
      local_var_path = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/variance'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'fromPeriod'] = opts[:'from_period'] if !opts[:'from_period'].nil?
      query_params[:'toPeriod'] = opts[:'to_period'] if !opts[:'to_period'].nil?
      query_params[:'payPeriodCompare'] = opts[:'pay_period_compare'] if !opts[:'pay_period_compare'].nil?
      query_params[:'ordinalCompare'] = opts[:'ordinal_compare'] if !opts[:'ordinal_compare'].nil?
      query_params[:'taxYearCompare'] = opts[:'tax_year_compare'] if !opts[:'tax_year_compare'].nil?
      query_params[:'fromPeriodCompare'] = opts[:'from_period_compare'] if !opts[:'from_period_compare'].nil?
      query_params[:'toPeriodCompare'] = opts[:'to_period_compare'] if !opts[:'to_period_compare'].nil?
      query_params[:'showPercentage'] = opts[:'show_percentage'] if !opts[:'show_percentage'].nil?
      query_params[:'minChange'] = opts[:'min_change'] if !opts[:'min_change'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/html', 'application/pdf'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VarianceReportReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#variance_report_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
