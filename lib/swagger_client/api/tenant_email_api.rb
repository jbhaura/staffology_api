=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class TenantEmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Email
    # Returns the email along with its status.\\n
    # @param id 
    # @param email_id 
    # @param [Hash] opts the optional parameters
    # @return [TenantEmail]
    def get_email_tenant_email(id, email_id, opts = {})
      data, _status_code, _headers = get_email_tenant_email_with_http_info(id, email_id, opts)
      data
    end

    # Get Email
    # Returns the email along with its status.\\n
    # @param id 
    # @param email_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantEmail, Integer, Hash)>] TenantEmail data, response status code and response headers
    def get_email_tenant_email_with_http_info(id, email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.get_email_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.get_email_tenant_email"
      end
      # verify the required parameter 'email_id' is set
      if @api_client.config.client_side_validation && email_id.nil?
        fail ArgumentError, "Missing the required parameter 'email_id' when calling TenantEmailApi.get_email_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email/{emailId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'emailId' + '}', email_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TenantEmail' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#get_email_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MailSettings
    # Returns the MailSettings for a Tenant.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @return [MailSettings]
    def get_mail_settings_tenant_email(id, opts = {})
      data, _status_code, _headers = get_mail_settings_tenant_email_with_http_info(id, opts)
      data
    end

    # Get MailSettings
    # Returns the MailSettings for a Tenant.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(MailSettings, Integer, Hash)>] MailSettings data, response status code and response headers
    def get_mail_settings_tenant_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.get_mail_settings_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.get_mail_settings_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email/settings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MailSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#get_mail_settings_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Emails
    # Returns a list of all emails sent for this Tenant.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<Item>]
    def index_tenant_email(id, opts = {})
      data, _status_code, _headers = index_tenant_email_with_http_info(id, opts)
      data
    end

    # List Emails
    # Returns a list of all emails sent for this Tenant.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_tenant_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.index_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.index_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#index_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-send Email
    # Re-sends an existing email.\\n
    # @param id 
    # @param email_id 
    # @param [Hash] opts the optional parameters
    # @return [TenantEmail]
    def resend_email_tenant_email(id, email_id, opts = {})
      data, _status_code, _headers = resend_email_tenant_email_with_http_info(id, email_id, opts)
      data
    end

    # Re-send Email
    # Re-sends an existing email.\\n
    # @param id 
    # @param email_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantEmail, Integer, Hash)>] TenantEmail data, response status code and response headers
    def resend_email_tenant_email_with_http_info(id, email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.resend_email_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.resend_email_tenant_email"
      end
      # verify the required parameter 'email_id' is set
      if @api_client.config.client_side_validation && email_id.nil?
        fail ArgumentError, "Missing the required parameter 'email_id' when calling TenantEmailApi.resend_email_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email/{emailId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'emailId' + '}', email_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TenantEmail' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#resend_email_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send test email
    # This API call will generate a test email based on your MailSettings.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email The address to send a test email to
    # @return [EmployerEmail]
    def test_mail_settings_tenant_email(id, opts = {})
      data, _status_code, _headers = test_mail_settings_tenant_email_with_http_info(id, opts)
      data
    end

    # Send test email
    # This API call will generate a test email based on your MailSettings.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email The address to send a test email to
    # @return [Array<(EmployerEmail, Integer, Hash)>] EmployerEmail data, response status code and response headers
    def test_mail_settings_tenant_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.test_mail_settings_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.test_mail_settings_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email/settings/test'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerEmail' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#test_mail_settings_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update MailSettings
    # Updates the MailSettings for a Tenant.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [MailSettings] :body 
    # @return [MailSettings]
    def update_mail_settings_tenant_email(id, opts = {})
      data, _status_code, _headers = update_mail_settings_tenant_email_with_http_info(id, opts)
      data
    end

    # Update MailSettings
    # Updates the MailSettings for a Tenant.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [MailSettings] :body 
    # @return [Array<(MailSettings, Integer, Hash)>] MailSettings data, response status code and response headers
    def update_mail_settings_tenant_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantEmailApi.update_mail_settings_tenant_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantEmailApi.update_mail_settings_tenant_email"
      end
      # resource path
      local_var_path = '/tenants/{id}/email/settings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'MailSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantEmailApi#update_mail_settings_tenant_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
