=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class PensionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Pension
    # Returns the Pension, if any, for an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to retrieve the Pension
    # @param [Hash] opts the optional parameters
    # @return [Pension]
    def get_pension(employer_id, employee_id, opts = {})
      data, _status_code, _headers = get_pension_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Get Pension
    # Returns the Pension, if any, for an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to retrieve the Pension
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pension, Integer, Hash)>] Pension data, response status code and response headers
    def get_pension_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionApi.get_pension ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionApi.get_pension"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling PensionApi.get_pension"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/pension'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Pension' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionApi#get_pension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Pension
    # Removes the Pension for an Employee.  For Non-AE Pensions, this is the same as an Update with an empty JSON object.\\n  For AE Pensions this will remove the employee from the pension and delete any associated AeAssessments
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to remove the Pension
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_pension(employer_id, employee_id, opts = {})
      remove_pension_with_http_info(employer_id, employee_id, opts)
      nil
    end

    # Remove Pension
    # Removes the Pension for an Employee.  For Non-AE Pensions, this is the same as an Update with an empty JSON object.\\n  For AE Pensions this will remove the employee from the pension and delete any associated AeAssessments
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to remove the Pension
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_pension_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionApi.remove_pension ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionApi.remove_pension"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling PensionApi.remove_pension"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/pension'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionApi#remove_pension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Pension
    # Updates the Pension for an Employee.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to update the Pension
    # @param [Hash] opts the optional parameters
    # @option opts [Pension] :body 
    # @return [Pension]
    def update_pension(employer_id, employee_id, opts = {})
      data, _status_code, _headers = update_pension_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Update Pension
    # Updates the Pension for an Employee.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to update the Pension
    # @param [Hash] opts the optional parameters
    # @option opts [Pension] :body 
    # @return [Array<(Pension, Integer, Hash)>] Pension data, response status code and response headers
    def update_pension_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionApi.update_pension ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionApi.update_pension"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling PensionApi.update_pension"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/pension'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Pension' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionApi#update_pension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
