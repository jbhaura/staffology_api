=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class EngineApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Calculate NI due.
    # Calculates National Insurance Contributions due given the values specified.\\n  You would never need to use this API call in practice. It is provided just for information and testing purposes.\\n  Access is limited so you'll probably receive a 401 response if you try to use it.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year If not provided then current tax year will be used.
    # @option opts [Float] :gross The gross amount for which tax should be calculated.
    # @option opts [String] :ni_category The letter from the NI table
    # @option opts [PayPeriods] :pay_period The PayPeriod (Weekly, Monthly, etc)
    # @return [NationalInsuranceCalculation]
    def calculate_ni_engine(opts = {})
      data, _status_code, _headers = calculate_ni_engine_with_http_info(opts)
      data
    end

    # Calculate NI due.
    # Calculates National Insurance Contributions due given the values specified.\\n  You would never need to use this API call in practice. It is provided just for information and testing purposes.\\n  Access is limited so you&#x27;ll probably receive a 401 response if you try to use it.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year If not provided then current tax year will be used.
    # @option opts [Float] :gross The gross amount for which tax should be calculated.
    # @option opts [String] :ni_category The letter from the NI table
    # @option opts [PayPeriods] :pay_period The PayPeriod (Weekly, Monthly, etc)
    # @return [Array<(NationalInsuranceCalculation, Integer, Hash)>] NationalInsuranceCalculation data, response status code and response headers
    def calculate_ni_engine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngineApi.calculate_ni_engine ...'
      end
      # resource path
      local_var_path = '/engine/ni'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?
      query_params[:'gross'] = opts[:'gross'] if !opts[:'gross'].nil?
      query_params[:'niCategory'] = opts[:'ni_category'] if !opts[:'ni_category'].nil?
      query_params[:'payPeriod'] = opts[:'pay_period'] if !opts[:'pay_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'NationalInsuranceCalculation' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngineApi#calculate_ni_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Calculate Tax due.
    # Calculates tax amount due, given the values specified.\\n  You would never need to use this API call. It is provided just for information and testing purposes.\\n  Access is limited so you'll probably receive a 401 response if you try to use it.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year If not provided then current tax year will be used.
    # @option opts [String] :tax_code If not provided then the default code for the tax year will be used.
    # @option opts [Float] :gross The gross amount for which tax should be calculated.
    # @option opts [DateTime] :period_start 
    # @option opts [DateTime] :period_end 
    # @option opts [PayPeriods] :pay_period The PayPeriod (Weekly, Monthly, etc)
    # @option opts [Integer] :period The period that this payment is being made for (default to 1)
    # @option opts [BOOLEAN] :week1 If set to true then tax will be calculated in a Week1/Month1 basis (default to false)
    # @option opts [Float] :gross_to_date Gross pay to date (default to 0)
    # @option opts [Float] :tax_to_date Tax paid to date (default to 0)
    # @return [Float]
    def calculate_tax_engine(opts = {})
      data, _status_code, _headers = calculate_tax_engine_with_http_info(opts)
      data
    end

    # Calculate Tax due.
    # Calculates tax amount due, given the values specified.\\n  You would never need to use this API call. It is provided just for information and testing purposes.\\n  Access is limited so you&#x27;ll probably receive a 401 response if you try to use it.
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year If not provided then current tax year will be used.
    # @option opts [String] :tax_code If not provided then the default code for the tax year will be used.
    # @option opts [Float] :gross The gross amount for which tax should be calculated.
    # @option opts [DateTime] :period_start 
    # @option opts [DateTime] :period_end 
    # @option opts [PayPeriods] :pay_period The PayPeriod (Weekly, Monthly, etc)
    # @option opts [Integer] :period The period that this payment is being made for
    # @option opts [BOOLEAN] :week1 If set to true then tax will be calculated in a Week1/Month1 basis
    # @option opts [Float] :gross_to_date Gross pay to date
    # @option opts [Float] :tax_to_date Tax paid to date
    # @return [Array<(Float, Integer, Hash)>] Float data, response status code and response headers
    def calculate_tax_engine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngineApi.calculate_tax_engine ...'
      end
      # resource path
      local_var_path = '/engine/tax'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?
      query_params[:'taxCode'] = opts[:'tax_code'] if !opts[:'tax_code'].nil?
      query_params[:'gross'] = opts[:'gross'] if !opts[:'gross'].nil?
      query_params[:'periodStart'] = opts[:'period_start'] if !opts[:'period_start'].nil?
      query_params[:'periodEnd'] = opts[:'period_end'] if !opts[:'period_end'].nil?
      query_params[:'payPeriod'] = opts[:'pay_period'] if !opts[:'pay_period'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'week1'] = opts[:'week1'] if !opts[:'week1'].nil?
      query_params[:'grossToDate'] = opts[:'gross_to_date'] if !opts[:'gross_to_date'].nil?
      query_params[:'taxToDate'] = opts[:'tax_to_date'] if !opts[:'tax_to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Float' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngineApi#calculate_tax_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Configuration
    # Returns the raw configuration data that is used as the basis for any calculations for the given tax year.\\nYou would never need to use this configuration values yourself in any API calls. It is provided just for information purposes
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The year that you want to retrieve details for. If not provided then current tax year will be used.
    # @return [TaxYearConfig]
    def config_engine(opts = {})
      data, _status_code, _headers = config_engine_with_http_info(opts)
      data
    end

    # Get Configuration
    # Returns the raw configuration data that is used as the basis for any calculations for the given tax year.\\nYou would never need to use this configuration values yourself in any API calls. It is provided just for information purposes
    # @param [Hash] opts the optional parameters
    # @option opts [TaxYear] :tax_year The year that you want to retrieve details for. If not provided then current tax year will be used.
    # @return [Array<(TaxYearConfig, Integer, Hash)>] TaxYearConfig data, response status code and response headers
    def config_engine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngineApi.config_engine ...'
      end
      # resource path
      local_var_path = '/engine/config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taxYear'] = opts[:'tax_year'] if !opts[:'tax_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TaxYearConfig' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngineApi#config_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tenant Branding
    # Returns Tenant Branding. Not for public use, will return 401
    # @param brand_code The Id of the Tenant you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Tenant]
    def get_tenant_branding_engine(brand_code, opts = {})
      data, _status_code, _headers = get_tenant_branding_engine_with_http_info(brand_code, opts)
      data
    end

    # Tenant Branding
    # Returns Tenant Branding. Not for public use, will return 401
    # @param brand_code The Id of the Tenant you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def get_tenant_branding_engine_with_http_info(brand_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngineApi.get_tenant_branding_engine ...'
      end
      # verify the required parameter 'brand_code' is set
      if @api_client.config.client_side_validation && brand_code.nil?
        fail ArgumentError, "Missing the required parameter 'brand_code' when calling EngineApi.get_tenant_branding_engine"
      end
      # resource path
      local_var_path = '/engine/branding/{brandCode}'.sub('{' + 'brandCode' + '}', brand_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngineApi#get_tenant_branding_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Configuration
    # Returns the National Insurance thresholds for the given PayPeriod
    # @param tax_year The year that you want to retrieve details for.
    # @param pay_period The PayPeriod (ie, monthly) that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :period_start 
    # @option opts [DateTime] :period_end 
    # @return [PeriodValues]
    def period_values_engine(tax_year, pay_period, opts = {})
      data, _status_code, _headers = period_values_engine_with_http_info(tax_year, pay_period, opts)
      data
    end

    # Get Configuration
    # Returns the National Insurance thresholds for the given PayPeriod
    # @param tax_year The year that you want to retrieve details for.
    # @param pay_period The PayPeriod (ie, monthly) that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :period_start 
    # @option opts [DateTime] :period_end 
    # @return [Array<(PeriodValues, Integer, Hash)>] PeriodValues data, response status code and response headers
    def period_values_engine_with_http_info(tax_year, pay_period, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngineApi.period_values_engine ...'
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling EngineApi.period_values_engine"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling EngineApi.period_values_engine"
      end
      # resource path
      local_var_path = '/engine/config/{taxYear}/ni/{payPeriod}'.sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'periodStart'] = opts[:'period_start'] if !opts[:'period_start'].nil?
      query_params[:'periodEnd'] = opts[:'period_end'] if !opts[:'period_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PeriodValues' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngineApi#period_values_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
