=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class TenantApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Admin User
    # Adds the specified user as an admin for the Tenant
    # @param id The Id of the Tenant you want to remove the  admin User from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [nil]
    def add_admin_user_tenant(id, opts = {})
      add_admin_user_tenant_with_http_info(id, opts)
      nil
    end

    # Add Admin User
    # Adds the specified user as an admin for the Tenant
    # @param id The Id of the Tenant you want to remove the  admin User from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_admin_user_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.add_admin_user_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.add_admin_user_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/admins'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#add_admin_user_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Admin Users
    # Returns a list of admin users for the Tenant
    # @param id The Id of the Tenant you want to list admin Users for.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def admin_users_tenant(id, opts = {})
      data, _status_code, _headers = admin_users_tenant_with_http_info(id, opts)
      data
    end

    # List Admin Users
    # Returns a list of admin users for the Tenant
    # @param id The Id of the Tenant you want to list admin Users for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def admin_users_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.admin_users_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.admin_users_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/admins'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#admin_users_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bill
    # Returns details of a UsageBill for a User of this Tenant
    # @param id The Id of the Tenant the bill belongs to.
    # @param year 
    # @param month 
    # @param bill_id The Id of the UsageBill.
    # @param [Hash] opts the optional parameters
    # @return [UsageBill]
    def bill_tenant(id, year, month, bill_id, opts = {})
      data, _status_code, _headers = bill_tenant_with_http_info(id, year, month, bill_id, opts)
      data
    end

    # Get Bill
    # Returns details of a UsageBill for a User of this Tenant
    # @param id The Id of the Tenant the bill belongs to.
    # @param year 
    # @param month 
    # @param bill_id The Id of the UsageBill.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageBill, Integer, Hash)>] UsageBill data, response status code and response headers
    def bill_tenant_with_http_info(id, year, month, bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.bill_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.bill_tenant"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling TenantApi.bill_tenant"
      end
      # verify the required parameter 'month' is set
      if @api_client.config.client_side_validation && month.nil?
        fail ArgumentError, "Missing the required parameter 'month' when calling TenantApi.bill_tenant"
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling TenantApi.bill_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/bills/{year}/{month}/{billId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'year' + '}', year.to_s).sub('{' + 'month' + '}', month.to_s).sub('{' + 'billId' + '}', bill_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageBill' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#bill_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bills
    # Returns a list of UsageBill for Users of this Tenant, for the Year and Month supplied
    # @param id The Id of the Tenant you want to list bills for.
    # @param year 
    # @param month 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def bills_tenant(id, year, month, opts = {})
      data, _status_code, _headers = bills_tenant_with_http_info(id, year, month, opts)
      data
    end

    # Get Bills
    # Returns a list of UsageBill for Users of this Tenant, for the Year and Month supplied
    # @param id The Id of the Tenant you want to list bills for.
    # @param year 
    # @param month 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def bills_tenant_with_http_info(id, year, month, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.bills_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.bills_tenant"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling TenantApi.bills_tenant"
      end
      # verify the required parameter 'month' is set
      if @api_client.config.client_side_validation && month.nil?
        fail ArgumentError, "Missing the required parameter 'month' when calling TenantApi.bills_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/bills/{year}/{month}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'year' + '}', year.to_s).sub('{' + 'month' + '}', month.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#bills_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Bills for Period
    # Generates usage and creates bills for all Tenants\\n  Only available to SuperAdmins
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :month 
    # @option opts [Integer] :year 
    # @return [Array<Item>]
    def create_bills_tenant(opts = {})
      data, _status_code, _headers = create_bills_tenant_with_http_info(opts)
      data
    end

    # Create Bills for Period
    # Generates usage and creates bills for all Tenants\\n  Only available to SuperAdmins
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :month 
    # @option opts [Integer] :year 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def create_bills_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.create_bills_tenant ...'
      end
      # resource path
      local_var_path = '/tenants/bills'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'month'] = opts[:'month'] if !opts[:'month'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#create_bills_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Tenant
    # Use this method to create a new Tenant\\n  Only available to SuperAdmins
    # @param [Hash] opts the optional parameters
    # @option opts [Tenant] :body 
    # @return [Tenant]
    def create_tenant(opts = {})
      data, _status_code, _headers = create_tenant_with_http_info(opts)
      data
    end

    # Create a Tenant
    # Use this method to create a new Tenant\\n  Only available to SuperAdmins
    # @param [Hash] opts the optional parameters
    # @option opts [Tenant] :body 
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def create_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.create_tenant ...'
      end
      # resource path
      local_var_path = '/tenants'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#create_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable User Account
    # Disables (or re-enabled) a user account
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body A message to show the user explaining why the account is disabled.
    # @option opts [BOOLEAN] :disabled Whether or not the account should be disabled.
    # @return [nil]
    def disabled_tenant(id, user_id, opts = {})
      disabled_tenant_with_http_info(id, user_id, opts)
      nil
    end

    # Disable User Account
    # Disables (or re-enabled) a user account
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body A message to show the user explaining why the account is disabled.
    # @option opts [BOOLEAN] :disabled Whether or not the account should be disabled.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disabled_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.disabled_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.disabled_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.disabled_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/disabled'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disabled'] = opts[:'disabled'] if !opts[:'disabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#disabled_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable Employer Creation
    # Enable (or disable) a user accounts ability to create new employers
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled Whether or not the account can create employers.
    # @return [nil]
    def employer_creation_tenant(id, user_id, opts = {})
      employer_creation_tenant_with_http_info(id, user_id, opts)
      nil
    end

    # Enable Employer Creation
    # Enable (or disable) a user accounts ability to create new employers
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled Whether or not the account can create employers.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def employer_creation_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.employer_creation_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.employer_creation_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.employer_creation_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/employercreation'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#employer_creation_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employer Usage
    # Returns all activity for the given Employer
    # @param id The Id of the Tenant.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def employer_usage_tenant(id, employer_id, opts = {})
      data, _status_code, _headers = employer_usage_tenant_with_http_info(id, employer_id, opts)
      data
    end

    # Get Employer Usage
    # Returns all activity for the given Employer
    # @param id The Id of the Tenant.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def employer_usage_tenant_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.employer_usage_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.employer_usage_tenant"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling TenantApi.employer_usage_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/employers/{employerId}/usage'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#employer_usage_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employer Users
    # Returns all users for the given Employer
    # @param id The Id of the Tenant.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def employer_users_tenant(id, employer_id, opts = {})
      data, _status_code, _headers = employer_users_tenant_with_http_info(id, employer_id, opts)
      data
    end

    # Get Employer Users
    # Returns all users for the given Employer
    # @param id The Id of the Tenant.
    # @param employer_id The Id of the Employer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def employer_users_tenant_with_http_info(id, employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.employer_users_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.employer_users_tenant"
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling TenantApi.employer_users_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/employers/{employerId}/users'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#employer_users_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Tenant
    # If you are an administrator for a Tenant then you can retrieve the settings for it using this API call
    # @param id The Id of the Tenant you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Tenant]
    def get_tenant(id, opts = {})
      data, _status_code, _headers = get_tenant_with_http_info(id, opts)
      data
    end

    # Get a Tenant
    # If you are an administrator for a Tenant then you can retrieve the settings for it using this API call
    # @param id The Id of the Tenant you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def get_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.get_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.get_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#get_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Users with no Billable Activity.
    # Returns a .csv file containing users created in or before the given month that do not have billable activity.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :month 
    # @option opts [Integer] :year 
    # @return [ReportResponse]
    def get_users_with_no_billable_activity_tenant(id, opts = {})
      data, _status_code, _headers = get_users_with_no_billable_activity_tenant_with_http_info(id, opts)
      data
    end

    # Get Users with no Billable Activity.
    # Returns a .csv file containing users created in or before the given month that do not have billable activity.
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :month 
    # @option opts [Integer] :year 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def get_users_with_no_billable_activity_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.get_users_with_no_billable_activity_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.get_users_with_no_billable_activity_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/reports/users/nobillableactivity'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'month'] = opts[:'month'] if !opts[:'month'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#get_users_with_no_billable_activity_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Admin User
    # Removes the specified admin user for the Tenant
    # @param id The Id of the Tenant you want to remove the  admin User from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [nil]
    def remove_admin_user_tenant(id, opts = {})
      remove_admin_user_tenant_with_http_info(id, opts)
      nil
    end

    # Remove Admin User
    # Removes the specified admin user for the Tenant
    # @param id The Id of the Tenant you want to remove the  admin User from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_admin_user_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.remove_admin_user_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.remove_admin_user_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/admins'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#remove_admin_user_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set User Accounting Id
    # Updates the Customer Accounting Id for a user
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_id The CustomerAccountingId for the user.
    # @return [nil]
    def set_accounting_id_tenant(id, user_id, opts = {})
      set_accounting_id_tenant_with_http_info(id, user_id, opts)
      nil
    end

    # Set User Accounting Id
    # Updates the Customer Accounting Id for a user
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_id The CustomerAccountingId for the user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_accounting_id_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.set_accounting_id_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.set_accounting_id_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.set_accounting_id_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/accounting'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accountingId'] = opts[:'accounting_id'] if !opts[:'accounting_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#set_accounting_id_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Bureau Redirect
    # Sets or removes the redirect email address for a users Bureau-related notifications
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_address The email address to redirect to, or an empty string to remove the redirect.
    # @return [nil]
    def set_bureau_redirect_email_address_tenant(id, user_id, opts = {})
      set_bureau_redirect_email_address_tenant_with_http_info(id, user_id, opts)
      nil
    end

    # Set Bureau Redirect
    # Sets or removes the redirect email address for a users Bureau-related notifications
    # @param id The Id of the Tenant.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_address The email address to redirect to, or an empty string to remove the redirect.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_bureau_redirect_email_address_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.set_bureau_redirect_email_address_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.set_bureau_redirect_email_address_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.set_bureau_redirect_email_address_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/bureauredir'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailAddress'] = opts[:'email_address'] if !opts[:'email_address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#set_bureau_redirect_email_address_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set User Tenant
    # Changes the Tenant for a User. Only applicable if you manage two or more Tenants
    # @param id The Id of the Tenant the user is currently assigned to.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_tenant_id The Id of the Tenant the user is to be assigned to.
    # @return [nil]
    def set_tenant_tenant(id, user_id, opts = {})
      set_tenant_tenant_with_http_info(id, user_id, opts)
      nil
    end

    # Set User Tenant
    # Changes the Tenant for a User. Only applicable if you manage two or more Tenants
    # @param id The Id of the Tenant the user is currently assigned to.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_tenant_id The Id of the Tenant the user is to be assigned to.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_tenant_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.set_tenant_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.set_tenant_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.set_tenant_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/tenant'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'newTenantId'] = opts[:'new_tenant_id'] if !opts[:'new_tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#set_tenant_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Bill
    # Updates the UsageBill.
    # @param id The Id of the Tenant the bill belongs to.
    # @param year 
    # @param month 
    # @param bill_id The Id of the UsageBill.
    # @param [Hash] opts the optional parameters
    # @option opts [UsageBill] :body 
    # @return [UsageBill]
    def update_bill_tenant(id, year, month, bill_id, opts = {})
      data, _status_code, _headers = update_bill_tenant_with_http_info(id, year, month, bill_id, opts)
      data
    end

    # Update Bill
    # Updates the UsageBill.
    # @param id The Id of the Tenant the bill belongs to.
    # @param year 
    # @param month 
    # @param bill_id The Id of the UsageBill.
    # @param [Hash] opts the optional parameters
    # @option opts [UsageBill] :body 
    # @return [Array<(UsageBill, Integer, Hash)>] UsageBill data, response status code and response headers
    def update_bill_tenant_with_http_info(id, year, month, bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_bill_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_bill_tenant"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling TenantApi.update_bill_tenant"
      end
      # verify the required parameter 'month' is set
      if @api_client.config.client_side_validation && month.nil?
        fail ArgumentError, "Missing the required parameter 'month' when calling TenantApi.update_bill_tenant"
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling TenantApi.update_bill_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/bills/{year}/{month}/{billId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'year' + '}', year.to_s).sub('{' + 'month' + '}', month.to_s).sub('{' + 'billId' + '}', bill_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'UsageBill' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_bill_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update CSS Colors
    # Update the colors for a Tenant
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<StringStringKeyValuePair>] :body 
    # @return [Array<StringStringKeyValuePair>]
    def update_css_colors_tenant(id, opts = {})
      data, _status_code, _headers = update_css_colors_tenant_with_http_info(id, opts)
      data
    end

    # Update CSS Colors
    # Update the colors for a Tenant
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<StringStringKeyValuePair>] :body 
    # @return [Array<(Array<StringStringKeyValuePair>, Integer, Hash)>] Array<StringStringKeyValuePair> data, response status code and response headers
    def update_css_colors_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_css_colors_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_css_colors_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/css/colors'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Array<StringStringKeyValuePair>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_css_colors_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update CSS
    # Update the custom CSS for a Tenant
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [String]
    def update_css_tenant(id, opts = {})
      data, _status_code, _headers = update_css_tenant_with_http_info(id, opts)
      data
    end

    # Update CSS
    # Update the custom CSS for a Tenant
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def update_css_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_css_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_css_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/css'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_css_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload Favicon
    # Upload an image to use as favicon. We'll upload it and set the URL on the FavIcon property of the Tenant.
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Tenant]
    def update_fav_icon_tenant(id, opts = {})
      data, _status_code, _headers = update_fav_icon_tenant_with_http_info(id, opts)
      data
    end

    # Upload Favicon
    # Upload an image to use as favicon. We&#x27;ll upload it and set the URL on the FavIcon property of the Tenant.
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def update_fav_icon_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_fav_icon_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_fav_icon_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/favicon'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_fav_icon_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload Logo
    # Upload an image to use as your main logo. We'll upload it and set the URL on the HomeImgUrl property of the Tenant.
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Tenant]
    def update_logo_tenant(id, opts = {})
      data, _status_code, _headers = update_logo_tenant_with_http_info(id, opts)
      data
    end

    # Upload Logo
    # Upload an image to use as your main logo. We&#x27;ll upload it and set the URL on the HomeImgUrl property of the Tenant.
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def update_logo_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_logo_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_logo_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/logo'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_logo_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Tenant
    # If you are an administrator for a Tenant then you can update the settings for it using this API call
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Tenant] :body 
    # @return [Tenant]
    def update_tenant(id, opts = {})
      data, _status_code, _headers = update_tenant_with_http_info(id, opts)
      data
    end

    # Update a Tenant
    # If you are an administrator for a Tenant then you can update the settings for it using this API call
    # @param id The Id of the Tenant you want to update.
    # @param [Hash] opts the optional parameters
    # @option opts [Tenant] :body 
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def update_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.update_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.update_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#update_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Usage
    # Returns activity for Users of this Tenant, for the Year and Month supplied
    # @param id The Id of the Tenant.
    # @param year 
    # @param month 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def usage_tenant(id, year, month, opts = {})
      data, _status_code, _headers = usage_tenant_with_http_info(id, year, month, opts)
      data
    end

    # Get Usage
    # Returns activity for Users of this Tenant, for the Year and Month supplied
    # @param id The Id of the Tenant.
    # @param year 
    # @param month 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def usage_tenant_with_http_info(id, year, month, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.usage_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.usage_tenant"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling TenantApi.usage_tenant"
      end
      # verify the required parameter 'month' is set
      if @api_client.config.client_side_validation && month.nil?
        fail ArgumentError, "Missing the required parameter 'month' when calling TenantApi.usage_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/usage/{year}/{month}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'year' + '}', year.to_s).sub('{' + 'month' + '}', month.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#usage_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get User Bills
    # Returns all UsageBills for a User
    # @param id The Id of the Tenant you want to get a Users UsageBills for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def user_bills_tenant(id, user_id, opts = {})
      data, _status_code, _headers = user_bills_tenant_with_http_info(id, user_id, opts)
      data
    end

    # Get User Bills
    # Returns all UsageBills for a User
    # @param id The Id of the Tenant you want to get a Users UsageBills for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def user_bills_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.user_bills_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.user_bills_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.user_bills_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/bills'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#user_bills_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get User Employers
    # Returns Employer details for a User that belongs to the Tenant
    # @param id The Id of the Tenant you want to get User Employers for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def user_employers_tenant(id, user_id, opts = {})
      data, _status_code, _headers = user_employers_tenant_with_http_info(id, user_id, opts)
      data
    end

    # Get User Employers
    # Returns Employer details for a User that belongs to the Tenant
    # @param id The Id of the Tenant you want to get User Employers for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def user_employers_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.user_employers_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.user_employers_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.user_employers_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}/employers'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#user_employers_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a User
    # Returns details of a User that belongs to the Tenant
    # @param id The Id of the Tenant you want to get a User for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [User]
    def user_tenant(id, user_id, opts = {})
      data, _status_code, _headers = user_tenant_with_http_info(id, user_id, opts)
      data
    end

    # Get a User
    # Returns details of a User that belongs to the Tenant
    # @param id The Id of the Tenant you want to get a User for.
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_tenant_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.user_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.user_tenant"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TenantApi.user_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/{userId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#user_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search Users
    # Returns a list of users for the Tenant that match the search
    # @param id The Id of the Tenant you want to search Users for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<Item>]
    def users_search_tenant(id, opts = {})
      data, _status_code, _headers = users_search_tenant_with_http_info(id, opts)
      data
    end

    # Search Users
    # Returns a list of users for the Tenant that match the search
    # @param id The Id of the Tenant you want to search Users for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def users_search_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.users_search_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.users_search_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users/search'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#users_search_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Users
    # Returns a list of users for the Tenant
    # @param id The Id of the Tenant you want to list Users for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @option opts [BOOLEAN] :sort_by_last_login  (default to false)
    # @return [Array<Item>]
    def users_tenant(id, opts = {})
      data, _status_code, _headers = users_tenant_with_http_info(id, opts)
      data
    end

    # List Users
    # Returns a list of users for the Tenant
    # @param id The Id of the Tenant you want to list Users for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @option opts [BOOLEAN] :sort_by_last_login 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def users_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.users_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.users_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortByLastLogin'] = opts[:'sort_by_last_login'] if !opts[:'sort_by_last_login'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#users_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Weekly Activity Report
    # Returns a report detailing User activity, summarised by week, for the given date range
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def weekly_activity_tenant(id, opts = {})
      data, _status_code, _headers = weekly_activity_tenant_with_http_info(id, opts)
      data
    end

    # Weekly Activity Report
    # Returns a report detailing User activity, summarised by week, for the given date range
    # @param id The Id of the Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from_date 
    # @option opts [DateTime] :to_date 
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def weekly_activity_tenant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TenantApi.weekly_activity_tenant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TenantApi.weekly_activity_tenant"
      end
      # resource path
      local_var_path = '/tenants/{id}/reports/weeklyactivity'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantApi#weekly_activity_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
