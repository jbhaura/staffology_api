=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class ProcessingNoteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Document
    # Adds document to the ProcessingNote
    # @param employer_id 
    # @param id The Id of the ProcessingNote you want to attach documents to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [nil]
    def add_document_processing_note(employer_id, id, opts = {})
      add_document_processing_note_with_http_info(employer_id, id, opts)
      nil
    end

    # Add Document
    # Adds document to the ProcessingNote
    # @param employer_id 
    # @param id The Id of the ProcessingNote you want to attach documents to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_document_processing_note_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.add_document_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.add_document_processing_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessingNoteApi.add_document_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{id}/documents'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#add_document_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create ProcessingNote
    # Creates a Processing Note for the PayRun.\\n  You must have Bureau Features enabled and the payrun must be editable.
    # @param employer_id 
    # @param tax_year 
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [ProcessingNote] :body 
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [ProcessingNote]
    def create_processing_note(employer_id, tax_year, pay_period, period_number, opts = {})
      data, _status_code, _headers = create_processing_note_with_http_info(employer_id, tax_year, pay_period, period_number, opts)
      data
    end

    # Create ProcessingNote
    # Creates a Processing Note for the PayRun.\\n  You must have Bureau Features enabled and the payrun must be editable.
    # @param employer_id 
    # @param tax_year 
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [ProcessingNote] :body 
    # @option opts [Integer] :ordinal 
    # @return [Array<(ProcessingNote, Integer, Hash)>] ProcessingNote data, response status code and response headers
    def create_processing_note_with_http_info(employer_id, tax_year, pay_period, period_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.create_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.create_processing_note"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ProcessingNoteApi.create_processing_note"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ProcessingNoteApi.create_processing_note"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ProcessingNoteApi.create_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/processingnotes'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ProcessingNote' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#create_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete ProcessingNote Document
    # Deletes the document specified by the documentId for the ProcessingNote specified by the Id
    # @param employer_id 
    # @param id 
    # @param document_id The Id of the Document you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_document_processing_note(employer_id, id, document_id, opts = {})
      delete_document_processing_note_with_http_info(employer_id, id, document_id, opts)
      nil
    end

    # Delete ProcessingNote Document
    # Deletes the document specified by the documentId for the ProcessingNote specified by the Id
    # @param employer_id 
    # @param id 
    # @param document_id The Id of the Document you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_document_processing_note_with_http_info(employer_id, id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.delete_document_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.delete_document_processing_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessingNoteApi.delete_document_processing_note"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ProcessingNoteApi.delete_document_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{id}/documents/{documentId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#delete_document_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ProcessingNote Document
    # Gets the document specified by the documentId for the ProcessingNote specified by the Id
    # @param employer_id 
    # @param id 
    # @param document_id The Id of the Document you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_document_processing_note(employer_id, id, document_id, opts = {})
      data, _status_code, _headers = get_document_processing_note_with_http_info(employer_id, id, document_id, opts)
      data
    end

    # Get ProcessingNote Document
    # Gets the document specified by the documentId for the ProcessingNote specified by the Id
    # @param employer_id 
    # @param id 
    # @param document_id The Id of the Document you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_document_processing_note_with_http_info(employer_id, id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.get_document_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.get_document_processing_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessingNoteApi.get_document_processing_note"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ProcessingNoteApi.get_document_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{id}/documents/{documentId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#get_document_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a ProcessingNote
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [ProcessingNote]
    def get_processing_note(employer_id, pay_period, period_number, tax_year, id, opts = {})
      data, _status_code, _headers = get_processing_note_with_http_info(employer_id, pay_period, period_number, tax_year, id, opts)
      data
    end

    # Get a ProcessingNote
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @return [Array<(ProcessingNote, Integer, Hash)>] ProcessingNote data, response status code and response headers
    def get_processing_note_with_http_info(employer_id, pay_period, period_number, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.get_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.get_processing_note"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ProcessingNoteApi.get_processing_note"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ProcessingNoteApi.get_processing_note"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ProcessingNoteApi.get_processing_note"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessingNoteApi.get_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/processingnotes/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProcessingNote' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#get_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List ProcessingNotes for a PayRun
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal  (default to 1)
    # @option opts [String] :payrun_entry_id Optionally filter ProcessingNotes to just those for the specified PayRunEntry
    # @return [Array<Item>]
    def list_processing_note(employer_id, pay_period, period_number, tax_year, opts = {})
      data, _status_code, _headers = list_processing_note_with_http_info(employer_id, pay_period, period_number, tax_year, opts)
      data
    end

    # List ProcessingNotes for a PayRun
    # @param employer_id 
    # @param pay_period 
    # @param period_number 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @option opts [String] :payrun_entry_id Optionally filter ProcessingNotes to just those for the specified PayRunEntry
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_processing_note_with_http_info(employer_id, pay_period, period_number, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessingNoteApi.list_processing_note ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ProcessingNoteApi.list_processing_note"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling ProcessingNoteApi.list_processing_note"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling ProcessingNoteApi.list_processing_note"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling ProcessingNoteApi.list_processing_note"
      end
      # resource path
      local_var_path = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/processingnotes'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?
      query_params[:'payrunEntryId'] = opts[:'payrun_entry_id'] if !opts[:'payrun_entry_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessingNoteApi#list_processing_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
