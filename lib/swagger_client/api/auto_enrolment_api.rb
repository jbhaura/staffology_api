=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class AutoEnrolmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assess Employee for AutoEnrolment
    # Asseses an Employee for AutoEnrolment
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee you want to assess
    # @param [Hash] opts the optional parameters
    # @return [AeAssessment]
    def assess_auto_enrolment(employer_id, employee_id, opts = {})
      data, _status_code, _headers = assess_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Assess Employee for AutoEnrolment
    # Asseses an Employee for AutoEnrolment
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee you want to assess
    # @param [Hash] opts the optional parameters
    # @return [Array<(AeAssessment, Integer, Hash)>] AeAssessment data, response status code and response headers
    def assess_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.assess_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.assess_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.assess_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AeAssessment' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#assess_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete AE Assessment
    # Deletes the AeAssessment specified by the Id for the Employee specified by the EmployeeId.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of the Assessment.
    # @return [nil]
    def delete_auto_enrolment(employer_id, employee_id, opts = {})
      delete_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      nil
    end

    # Delete AE Assessment
    # Deletes the AeAssessment specified by the Id for the Employee specified by the EmployeeId.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of the Assessment.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.delete_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.delete_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.delete_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#delete_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Email Letter
    # Send via email letter that needs to be sent to an employee as a result of the assessment.\\n  The letter is then marked as having been sent.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @return [EmployerEmail]
    def email_letter_auto_enrolment(employer_id, employee_id, id, opts = {})
      data, _status_code, _headers = email_letter_auto_enrolment_with_http_info(employer_id, employee_id, id, opts)
      data
    end

    # Email Letter
    # Send via email letter that needs to be sent to an employee as a result of the assessment.\\n  The letter is then marked as having been sent.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmployerEmail, Integer, Hash)>] EmployerEmail data, response status code and response headers
    def email_letter_auto_enrolment_with_http_info(employer_id, employee_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.email_letter_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.email_letter_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.email_letter_auto_enrolment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutoEnrolmentApi.email_letter_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/email'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerEmail' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#email_letter_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get AE Assessment
    # Returns the specified AeAssessment for the specified Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of the Assessment.
    # @return [AeAssessment]
    def get_auto_enrolment(employer_id, employee_id, opts = {})
      data, _status_code, _headers = get_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Get AE Assessment
    # Returns the specified AeAssessment for the specified Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of the Assessment.
    # @return [Array<(AeAssessment, Integer, Hash)>] AeAssessment data, response status code and response headers
    def get_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.get_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.get_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.get_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AeAssessment' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#get_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Last AE Assessment
    # Returns the most recent AeAssessment for an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @return [AeAssessment]
    def get_last_auto_enrolment(employer_id, employee_id, opts = {})
      data, _status_code, _headers = get_last_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Get Last AE Assessment
    # Returns the most recent AeAssessment for an Employee
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param [Hash] opts the optional parameters
    # @return [Array<(AeAssessment, Integer, Hash)>] AeAssessment data, response status code and response headers
    def get_last_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.get_last_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.get_last_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.get_last_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/last'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AeAssessment' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#get_last_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Letter
    # Returns either a PDF or HTML (depending on accept header)   of the letter that needs to be sent to an employee as a result of the assessment.\\n  The same ReportResponse model that is used for reports is used here.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [ReportResponse]
    def get_letter_auto_enrolment(employer_id, employee_id, id, opts = {})
      data, _status_code, _headers = get_letter_auto_enrolment_with_http_info(employer_id, employee_id, id, opts)
      data
    end

    # Get Letter
    # Returns either a PDF or HTML (depending on accept header)   of the letter that needs to be sent to an employee as a result of the assessment.\\n  The same ReportResponse model that is used for reports is used here.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def get_letter_auto_enrolment_with_http_info(employer_id, employee_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.get_letter_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.get_letter_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.get_letter_auto_enrolment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutoEnrolmentApi.get_letter_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pdf', 'text/html'])
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#get_letter_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get AE Assessments
    # Returns all AE Assessments for the Employee specified.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to retrieve AE Assessments
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_auto_enrolment(employer_id, employee_id, opts = {})
      data, _status_code, _headers = list_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Get AE Assessments
    # Returns all AE Assessments for the Employee specified.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee for which you want to retrieve AE Assessments
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.list_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.list_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.list_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#list_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark Letter as Sent
    # Update an Assessment to mark the letter as sent.\\n  This is done automatically if you send the letter via email so you'd  only need to use this is you are printing/posting the letter.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_letter_as_sent_auto_enrolment(employer_id, employee_id, id, opts = {})
      mark_letter_as_sent_auto_enrolment_with_http_info(employer_id, employee_id, id, opts)
      nil
    end

    # Mark Letter as Sent
    # Update an Assessment to mark the letter as sent.\\n  This is done automatically if you send the letter via email so you&#x27;d  only need to use this is you are printing/posting the letter.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee the assessment is for
    # @param id The Id of the Assessment
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_letter_as_sent_auto_enrolment_with_http_info(employer_id, employee_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.mark_letter_as_sent_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.mark_letter_as_sent_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.mark_letter_as_sent_auto_enrolment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutoEnrolmentApi.mark_letter_as_sent_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/sent'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#mark_letter_as_sent_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pending Letters
    # Returns all AE Assessments that are awaiting a letter to be sent
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def pending_letters_auto_enrolment(employer_id, opts = {})
      data, _status_code, _headers = pending_letters_auto_enrolment_with_http_info(employer_id, opts)
      data
    end

    # Pending Letters
    # Returns all AE Assessments that are awaiting a letter to be sent
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def pending_letters_auto_enrolment_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.pending_letters_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.pending_letters_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/autoenrolment/letters/pending'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#pending_letters_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pending Postponement Letters
    # Returns all employees that are awaiting a postponement letter to be sent.\\n  Because there is no associated AeAssessment they can't be returned with the other pending letters
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def pending_postponement_letters_auto_enrolment(employer_id, opts = {})
      data, _status_code, _headers = pending_postponement_letters_auto_enrolment_with_http_info(employer_id, opts)
      data
    end

    # Pending Postponement Letters
    # Returns all employees that are awaiting a postponement letter to be sent.\\n  Because there is no associated AeAssessment they can&#x27;t be returned with the other pending letters
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def pending_postponement_letters_auto_enrolment_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.pending_postponement_letters_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.pending_postponement_letters_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/autoenrolment/letters/pending/postponement'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#pending_postponement_letters_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cyclical Re-enrolment
    # Performs a Cyclical Re-enrolment. All employees that have opted-out or ceased membership    will be re-assessed and auto-enrolled if necessary.\\n  The employers cyclical re-enrolment date will then be updated to the date provided.
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :cyclical_reenrolment_date The new Cyclical Re-enrolment Date for the  Employer
    # @return [Array<Item>]
    def reenrol_auto_enrolment(employer_id, opts = {})
      data, _status_code, _headers = reenrol_auto_enrolment_with_http_info(employer_id, opts)
      data
    end

    # Cyclical Re-enrolment
    # Performs a Cyclical Re-enrolment. All employees that have opted-out or ceased membership    will be re-assessed and auto-enrolled if necessary.\\n  The employers cyclical re-enrolment date will then be updated to the date provided.
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :cyclical_reenrolment_date The new Cyclical Re-enrolment Date for the  Employer
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def reenrol_auto_enrolment_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.reenrol_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.reenrol_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/autoenrolment/renrol'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cyclicalReenrolmentDate'] = opts[:'cyclical_reenrolment_date'] if !opts[:'cyclical_reenrolment_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#reenrol_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update State
    # Updates the AutoEnrolment state for an Employee.\\n   You would use this API call to process notices such as Opt Out, Opt In, etc.\\n  A new assessment is returned showing the result of the state change.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee you want to set the status for
    # @param [Hash] opts the optional parameters
    # @option opts [AeEmployeeState] :state The AutoEnrolment State to set for the Employee
    # @option opts [AeStatus] :status 
    # @option opts [DateTime] :state_date Optional. Will default to the current date
    # @option opts [String] :pension_id Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn
    # @option opts [String] :worker_group_id Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided.
    # @return [AeAssessment]
    def set_state_auto_enrolment(employer_id, employee_id, opts = {})
      data, _status_code, _headers = set_state_auto_enrolment_with_http_info(employer_id, employee_id, opts)
      data
    end

    # Update State
    # Updates the AutoEnrolment state for an Employee.\\n   You would use this API call to process notices such as Opt Out, Opt In, etc.\\n  A new assessment is returned showing the result of the state change.
    # @param employer_id The Id of the Employer to which the Employee belongs
    # @param employee_id The Id of the Employee you want to set the status for
    # @param [Hash] opts the optional parameters
    # @option opts [AeEmployeeState] :state The AutoEnrolment State to set for the Employee
    # @option opts [AeStatus] :status 
    # @option opts [DateTime] :state_date Optional. Will default to the current date
    # @option opts [String] :pension_id Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn
    # @option opts [String] :worker_group_id Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided.
    # @return [Array<(AeAssessment, Integer, Hash)>] AeAssessment data, response status code and response headers
    def set_state_auto_enrolment_with_http_info(employer_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoEnrolmentApi.set_state_auto_enrolment ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling AutoEnrolmentApi.set_state_auto_enrolment"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling AutoEnrolmentApi.set_state_auto_enrolment"
      end
      # resource path
      local_var_path = '/employers/{employerId}/employees/{employeeId}/autoenrolment/state'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'stateDate'] = opts[:'state_date'] if !opts[:'state_date'].nil?
      query_params[:'pensionId'] = opts[:'pension_id'] if !opts[:'pension_id'].nil?
      query_params[:'workerGroupId'] = opts[:'worker_group_id'] if !opts[:'worker_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AeAssessment' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoEnrolmentApi#set_state_auto_enrolment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
