=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class EmployerGroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create EmployerGroup
    # Creates a new EmployerGroup for the user.
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerGroup] :body 
    # @return [EmployerGroup]
    def create_employer_group(opts = {})
      data, _status_code, _headers = create_employer_group_with_http_info(opts)
      data
    end

    # Create EmployerGroup
    # Creates a new EmployerGroup for the user.
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerGroup] :body 
    # @return [Array<(EmployerGroup, Integer, Hash)>] EmployerGroup data, response status code and response headers
    def create_employer_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerGroupApi.create_employer_group ...'
      end
      # resource path
      local_var_path = '/employers/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'EmployerGroup' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerGroupApi#create_employer_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EmployerGroup
    # Deletes the specified EmployerGroup.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employer_group(code, opts = {})
      delete_employer_group_with_http_info(code, opts)
      nil
    end

    # Delete EmployerGroup
    # Deletes the specified EmployerGroup.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_employer_group_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerGroupApi.delete_employer_group ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling EmployerGroupApi.delete_employer_group"
      end
      # resource path
      local_var_path = '/employers/groups/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerGroupApi#delete_employer_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EmployerGroup
    # Gets the EmployerGroup specified.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [EmployerGroup]
    def get_employer_group(code, opts = {})
      data, _status_code, _headers = get_employer_group_with_http_info(code, opts)
      data
    end

    # Get EmployerGroup
    # Gets the EmployerGroup specified.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmployerGroup, Integer, Hash)>] EmployerGroup data, response status code and response headers
    def get_employer_group_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerGroupApi.get_employer_group ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling EmployerGroupApi.get_employer_group"
      end
      # resource path
      local_var_path = '/employers/groups/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerGroup' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerGroupApi#get_employer_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List EmployerGroups
    # Lists all EmployerGroups for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def index_employer_group(opts = {})
      data, _status_code, _headers = index_employer_group_with_http_info(opts)
      data
    end

    # List EmployerGroups
    # Lists all EmployerGroups for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_employer_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerGroupApi.index_employer_group ...'
      end
      # resource path
      local_var_path = '/employers/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerGroupApi#index_employer_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update EmployerGroup
    # Updates a EmployerGroup for the user.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerGroup] :body 
    # @return [EmployerGroup]
    def update_employer_group(code, opts = {})
      data, _status_code, _headers = update_employer_group_with_http_info(code, opts)
      data
    end

    # Update EmployerGroup
    # Updates a EmployerGroup for the user.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerGroup] :body 
    # @return [Array<(EmployerGroup, Integer, Hash)>] EmployerGroup data, response status code and response headers
    def update_employer_group_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerGroupApi.update_employer_group ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling EmployerGroupApi.update_employer_group"
      end
      # resource path
      local_var_path = '/employers/groups/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'EmployerGroup' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerGroupApi#update_employer_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
