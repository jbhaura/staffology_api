=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class PensionSchemeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Contributions for Payrun
    # Returns contributions for a specific scheme and payrun
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear to query
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal  (default to 1)
    # @return [PensionContributionsSubmission]
    def contributions_for_payrun_pension_scheme(employer_id, id, tax_year, pay_period, period_number, opts = {})
      data, _status_code, _headers = contributions_for_payrun_pension_scheme_with_http_info(employer_id, id, tax_year, pay_period, period_number, opts)
      data
    end

    # Contributions for Payrun
    # Returns contributions for a specific scheme and payrun
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear to query
    # @param pay_period 
    # @param period_number 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal 
    # @return [Array<(PensionContributionsSubmission, Integer, Hash)>] PensionContributionsSubmission data, response status code and response headers
    def contributions_for_payrun_pension_scheme_with_http_info(employer_id, id, tax_year, pay_period, period_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.contributions_for_payrun_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.contributions_for_payrun_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.contributions_for_payrun_pension_scheme"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PensionSchemeApi.contributions_for_payrun_pension_scheme"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PensionSchemeApi.contributions_for_payrun_pension_scheme"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling PensionSchemeApi.contributions_for_payrun_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{payPeriod}/{periodNumber}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PensionContributionsSubmission' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#contributions_for_payrun_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Contributions Data
    # Returns an ExternalProviderConversation showing data sent to and received from the ExternalDataProvider for the pension contribution submission.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission.
    # @param [Hash] opts the optional parameters
    # @return [ExternalProviderConversation]
    def contributions_pension_scheme(employer_id, id, tax_year, submission_id, opts = {})
      data, _status_code, _headers = contributions_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts)
      data
    end

    # Contributions Data
    # Returns an ExternalProviderConversation showing data sent to and received from the ExternalDataProvider for the pension contribution submission.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalProviderConversation, Integer, Hash)>] ExternalProviderConversation data, response status code and response headers
    def contributions_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.contributions_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.contributions_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.contributions_pension_scheme"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PensionSchemeApi.contributions_pension_scheme"
      end
      # verify the required parameter 'submission_id' is set
      if @api_client.config.client_side_validation && submission_id.nil?
        fail ArgumentError, "Missing the required parameter 'submission_id' when calling PensionSchemeApi.contributions_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{submissionId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'submissionId' + '}', submission_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ExternalProviderConversation' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#contributions_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a PensionScheme
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PensionScheme] :body 
    # @return [PensionScheme]
    def create_pension_scheme(employer_id, opts = {})
      data, _status_code, _headers = create_pension_scheme_with_http_info(employer_id, opts)
      data
    end

    # Create a PensionScheme
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PensionScheme] :body 
    # @return [Array<(PensionScheme, Integer, Hash)>] PensionScheme data, response status code and response headers
    def create_pension_scheme_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.create_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.create_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PensionScheme' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#create_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a PensionScheme
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pension_scheme(employer_id, id, opts = {})
      delete_pension_scheme_with_http_info(employer_id, id, opts)
      nil
    end

    # Delete a PensionScheme
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pension_scheme_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.delete_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.delete_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.delete_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#delete_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Employees
    # Returns the employees that are enrolled in the specified scheme
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme you want to retrieve Employees for.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def employees_pension_scheme(employer_id, id, opts = {})
      data, _status_code, _headers = employees_pension_scheme_with_http_info(employer_id, id, opts)
      data
    end

    # Get Employees
    # Returns the employees that are enrolled in the specified scheme
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme you want to retrieve Employees for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def employees_pension_scheme_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.employees_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.employees_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.employees_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/employees'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#employees_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a PensionScheme
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PensionScheme]
    def get_pension_scheme(employer_id, id, opts = {})
      data, _status_code, _headers = get_pension_scheme_with_http_info(employer_id, id, opts)
      data
    end

    # Get a PensionScheme
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PensionScheme, Integer, Hash)>] PensionScheme data, response status code and response headers
    def get_pension_scheme_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.get_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.get_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.get_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PensionScheme' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#get_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List PensionSchemes
    # @param employer_id The Id of the Employer for which you want to list PensionSchemes
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def index_pension_scheme(employer_id, opts = {})
      data, _status_code, _headers = index_pension_scheme_with_http_info(employer_id, opts)
      data
    end

    # List PensionSchemes
    # @param employer_id The Id of the Employer for which you want to list PensionSchemes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_pension_scheme_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.index_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.index_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#index_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Contributions
    # Returns a list of Items that tell you which PayRuns contain contributions to this scheme and the Url to the relevant report.\\n  IF the scheme is connected to an ExternalDataProvider then the status of the submission will also be included.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear to query
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_contributions_pension_scheme(employer_id, id, tax_year, opts = {})
      data, _status_code, _headers = list_contributions_pension_scheme_with_http_info(employer_id, id, tax_year, opts)
      data
    end

    # List Contributions
    # Returns a list of Items that tell you which PayRuns contain contributions to this scheme and the Url to the relevant report.\\n  IF the scheme is connected to an ExternalDataProvider then the status of the submission will also be included.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear to query
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_contributions_pension_scheme_with_http_info(employer_id, id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.list_contributions_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.list_contributions_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.list_contributions_pension_scheme"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PensionSchemeApi.list_contributions_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#list_contributions_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as Sent
    # Marks the Pension Contributions as sent
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission.
    # @param [Hash] opts the optional parameters
    # @return [ExternalProviderConversation]
    def mark_as_sent_pension_scheme(employer_id, id, tax_year, submission_id, opts = {})
      data, _status_code, _headers = mark_as_sent_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts)
      data
    end

    # Mark as Sent
    # Marks the Pension Contributions as sent
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalProviderConversation, Integer, Hash)>] ExternalProviderConversation data, response status code and response headers
    def mark_as_sent_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.mark_as_sent_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.mark_as_sent_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.mark_as_sent_pension_scheme"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PensionSchemeApi.mark_as_sent_pension_scheme"
      end
      # verify the required parameter 'submission_id' is set
      if @api_client.config.client_side_validation && submission_id.nil?
        fail ArgumentError, "Missing the required parameter 'submission_id' when calling PensionSchemeApi.mark_as_sent_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{submissionId}/markassent'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'submissionId' + '}', submission_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ExternalProviderConversation' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#mark_as_sent_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-submit Contributions
    # Re-submits previously failed Contributions to a Pension Scheme.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission to re-submit.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resubmit_contributions_pension_scheme(employer_id, id, tax_year, submission_id, opts = {})
      resubmit_contributions_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts)
      nil
    end

    # Re-submit Contributions
    # Re-submits previously failed Contributions to a Pension Scheme.
    # @param employer_id The Id of the Employer to which the PensionScheme belongs.
    # @param id The Id of the PensionScheme.
    # @param tax_year The TaxYear of the submission
    # @param submission_id The Id of the Submission to re-submit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def resubmit_contributions_pension_scheme_with_http_info(employer_id, id, tax_year, submission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.resubmit_contributions_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.resubmit_contributions_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.resubmit_contributions_pension_scheme"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PensionSchemeApi.resubmit_contributions_pension_scheme"
      end
      # verify the required parameter 'submission_id' is set
      if @api_client.config.client_side_validation && submission_id.nil?
        fail ArgumentError, "Missing the required parameter 'submission_id' when calling PensionSchemeApi.resubmit_contributions_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{submissionId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'submissionId' + '}', submission_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#resubmit_contributions_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a PensionScheme
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [PensionScheme] :body 
    # @return [PensionScheme]
    def update_pension_scheme(employer_id, id, opts = {})
      data, _status_code, _headers = update_pension_scheme_with_http_info(employer_id, id, opts)
      data
    end

    # Update a PensionScheme
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [PensionScheme] :body 
    # @return [Array<(PensionScheme, Integer, Hash)>] PensionScheme data, response status code and response headers
    def update_pension_scheme_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PensionSchemeApi.update_pension_scheme ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PensionSchemeApi.update_pension_scheme"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PensionSchemeApi.update_pension_scheme"
      end
      # resource path
      local_var_path = '/employers/{employerId}/pensionschemes/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PensionScheme' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PensionSchemeApi#update_pension_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
