=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class EmployerTemplateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get EmployerTemplate
    # Gets the EmployerTemplate specified by the Type.
    # @param employer_id The Id of the Employer to which the EmployerTemplate belongs.
    # @param type The EmployerTemplateType you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [EmployerTemplate]
    def get_employer_template(employer_id, type, opts = {})
      data, _status_code, _headers = get_employer_template_with_http_info(employer_id, type, opts)
      data
    end

    # Get EmployerTemplate
    # Gets the EmployerTemplate specified by the Type.
    # @param employer_id The Id of the Employer to which the EmployerTemplate belongs.
    # @param type The EmployerTemplateType you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmployerTemplate, Integer, Hash)>] EmployerTemplate data, response status code and response headers
    def get_employer_template_with_http_info(employer_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerTemplateApi.get_employer_template ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployerTemplateApi.get_employer_template"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling EmployerTemplateApi.get_employer_template"
      end
      # resource path
      local_var_path = '/employers/{employerId}/templates/{type}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerTemplate' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerTemplateApi#get_employer_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List EmployerTemplates
    # Lists all EmployerTemplates for the Employer specified.
    # @param employer_id The Id of the Employer for which you want to list Pay Codes
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def index_employer_template(employer_id, opts = {})
      data, _status_code, _headers = index_employer_template_with_http_info(employer_id, opts)
      data
    end

    # List EmployerTemplates
    # Lists all EmployerTemplates for the Employer specified.
    # @param employer_id The Id of the Employer for which you want to list Pay Codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def index_employer_template_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerTemplateApi.index_employer_template ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployerTemplateApi.index_employer_template"
      end
      # resource path
      local_var_path = '/employers/{employerId}/templates'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerTemplateApi#index_employer_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update EmployerTemplate
    # Updates the EmployerTemplate specified by the Type.\\nThe only values need to supply are <code>Content</code>  and (if applicable) <code>Subject</code>.\\n  If these values are empty strings or not provided then the template will revert to the default values.
    # @param employer_id The Id of the Employer to which the EmployerTemplate belongs.
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerTemplate] :body The EmployerTemplateType you want to retrieve.
    # @return [EmployerTemplate]
    def update_employer_template(employer_id, type, opts = {})
      data, _status_code, _headers = update_employer_template_with_http_info(employer_id, type, opts)
      data
    end

    # Update EmployerTemplate
    # Updates the EmployerTemplate specified by the Type.\\nThe only values need to supply are &lt;code&gt;Content&lt;/code&gt;  and (if applicable) &lt;code&gt;Subject&lt;/code&gt;.\\n  If these values are empty strings or not provided then the template will revert to the default values.
    # @param employer_id The Id of the Employer to which the EmployerTemplate belongs.
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerTemplate] :body The EmployerTemplateType you want to retrieve.
    # @return [Array<(EmployerTemplate, Integer, Hash)>] EmployerTemplate data, response status code and response headers
    def update_employer_template_with_http_info(employer_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployerTemplateApi.update_employer_template ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployerTemplateApi.update_employer_template"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling EmployerTemplateApi.update_employer_template"
      end
      # resource path
      local_var_path = '/employers/{employerId}/templates/{type}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'EmployerTemplate' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployerTemplateApi#update_employer_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
