=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class FpsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create FPS
    # Creates a new Full Payment Submission.  This is limited to corrections, to a previous year, for a single employee.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Fps] :body 
    # @return [Fps]
    def create_fps(employer_id, tax_year, opts = {})
      data, _status_code, _headers = create_fps_with_http_info(employer_id, tax_year, opts)
      data
    end

    # Create FPS
    # Creates a new Full Payment Submission.  This is limited to corrections, to a previous year, for a single employee.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @option opts [Fps] :body 
    # @return [Array<(Fps, Integer, Hash)>] Fps data, response status code and response headers
    def create_fps_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.create_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.create_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.create_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Fps' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#create_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete FPS
    # Not implemented, FPSes cannot be deleted
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fps(employer_id, tax_year, id, opts = {})
      delete_fps_with_http_info(employer_id, tax_year, id, opts)
      nil
    end

    # Delete FPS
    # Not implemented, FPSes cannot be deleted
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fps_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.delete_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.delete_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.delete_fps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FpsApi.delete_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#delete_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get FPS
    # Retrieves the Full Payment Submission specified
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Fps]
    def get_fps(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = get_fps_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Get FPS
    # Retrieves the Full Payment Submission specified
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fps, Integer, Hash)>] Fps data, response status code and response headers
    def get_fps_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.get_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.get_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.get_fps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FpsApi.get_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Fps' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#get_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List FPS
    # Returns all Full Payment Submissions for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_fps(employer_id, tax_year, opts = {})
      data, _status_code, _headers = list_fps_with_http_info(employer_id, tax_year, opts)
      data
    end

    # List FPS
    # Returns all Full Payment Submissions for the given tax year.
    # @param employer_id 
    # @param tax_year 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_fps_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.list_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.list_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.list_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#list_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark as Sent
    # Marks an Full Payment Submission as having been sent to HMRC and accepted by them\\nYou only use this method if the FPS has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Fps]
    def mark_as_accepted_fps(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = mark_as_accepted_fps_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Mark as Sent
    # Marks an Full Payment Submission as having been sent to HMRC and accepted by them\\nYou only use this method if the FPS has been submitted via an external system.\\nIt will automatically be updated as Sent and/or Accepted if it&#x27;s submitted via this API.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fps, Integer, Hash)>] Fps data, response status code and response headers
    def mark_as_accepted_fps_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.mark_as_accepted_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.mark_as_accepted_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.mark_as_accepted_fps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FpsApi.mark_as_accepted_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/{id}/markasaccepted'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Fps' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#mark_as_accepted_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get most recent FPS for Employee
    # Returns the most recent Full Payment Submission that includes the specified employee
    # @param employer_id 
    # @param tax_year 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :correction Only search for FPS&#x27;s submitted as a correction to a previous year (default to false)
    # @return [Item]
    def most_recent_for_employee_fps(employer_id, tax_year, employee_id, opts = {})
      data, _status_code, _headers = most_recent_for_employee_fps_with_http_info(employer_id, tax_year, employee_id, opts)
      data
    end

    # Get most recent FPS for Employee
    # Returns the most recent Full Payment Submission that includes the specified employee
    # @param employer_id 
    # @param tax_year 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :correction Only search for FPS&#x27;s submitted as a correction to a previous year
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def most_recent_for_employee_fps_with_http_info(employer_id, tax_year, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.most_recent_for_employee_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.most_recent_for_employee_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.most_recent_for_employee_fps"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling FpsApi.most_recent_for_employee_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/mostrecentforemployee/{employeeId}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'correction'] = opts[:'correction'] if !opts[:'correction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#most_recent_for_employee_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # FPS Requiring Attention
    # Returns all Full Payment Submissions that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def requiring_attention_fps(employer_id, opts = {})
      data, _status_code, _headers = requiring_attention_fps_with_http_info(employer_id, opts)
      data
    end

    # FPS Requiring Attention
    # Returns all Full Payment Submissions that have a Submission Status of NotSubmitted or ErrorResponse
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def requiring_attention_fps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.requiring_attention_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.requiring_attention_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/requiringattention'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#requiring_attention_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit FPS
    # Submits an existing Full Payment Submission to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Fps]
    def submit_fps(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = submit_fps_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Submit FPS
    # Submits an existing Full Payment Submission to HMRC.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fps, Integer, Hash)>] Fps data, response status code and response headers
    def submit_fps_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.submit_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.submit_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.submit_fps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FpsApi.submit_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/{id}/submit'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Fps' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#submit_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update FPS
    # Updates an existing Full Payment Submission.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Fps] :body 
    # @return [Fps]
    def update_fps(employer_id, tax_year, id, opts = {})
      data, _status_code, _headers = update_fps_with_http_info(employer_id, tax_year, id, opts)
      data
    end

    # Update FPS
    # Updates an existing Full Payment Submission.
    # @param employer_id 
    # @param tax_year 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Fps] :body 
    # @return [Array<(Fps, Integer, Hash)>] Fps data, response status code and response headers
    def update_fps_with_http_info(employer_id, tax_year, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FpsApi.update_fps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling FpsApi.update_fps"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling FpsApi.update_fps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FpsApi.update_fps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/rti/fps/{taxYear}/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Fps' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FpsApi#update_fps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
