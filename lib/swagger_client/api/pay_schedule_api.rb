=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class PayScheduleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a PaySchedule
    # Create PaySchedule using a certain pay frequency.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for.
    # @param tax_year The year that the PaySchedule is for.
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedule] :body 
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (default to 1)
    # @return [nil]
    def create_pay_schedule(employer_id, pay_period, tax_year, opts = {})
      create_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts)
      nil
    end

    # Create a PaySchedule
    # Create PaySchedule using a certain pay frequency.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for.
    # @param tax_year The year that the PaySchedule is for.
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedule] :body 
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.create_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.create_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.create_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.create_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#create_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PaySchedule
    # Delete the PaySchedule for the PayPeriod and TaxYear specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for.
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (default to 1)
    # @return [nil]
    def delete_pay_schedule(employer_id, pay_period, tax_year, opts = {})
      delete_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts)
      nil
    end

    # Delete PaySchedule
    # Delete the PaySchedule for the PayPeriod and TaxYear specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for.
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.delete_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.delete_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.delete_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.delete_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#delete_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PaySchedules
    # Get all PaySchedules for the given TaxYear.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @return [Array<PaySchedule>]
    def get_all_pay_schedule(employer_id, tax_year, opts = {})
      data, _status_code, _headers = get_all_pay_schedule_with_http_info(employer_id, tax_year, opts)
      data
    end

    # Get PaySchedules
    # Get all PaySchedules for the given TaxYear.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PaySchedule>, Integer, Hash)>] Array<PaySchedule> data, response status code and response headers
    def get_all_pay_schedule_with_http_info(employer_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.get_all_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.get_all_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.get_all_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<PaySchedule>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#get_all_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PaySchedule
    # Get the PaySchedule for the PayPeriod and TaxYear specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for.
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (default to 1)
    # @return [PaySchedule]
    def get_pay_schedule(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = get_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Get PaySchedule
    # Get the PaySchedule for the PayPeriod and TaxYear specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for.
    # @param tax_year The year that you want to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @return [Array<(PaySchedule, Integer, Hash)>] PaySchedule data, response status code and response headers
    def get_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.get_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.get_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.get_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.get_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PaySchedule' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#get_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PaySchedulePeriods
    # Get the PaySchedulePeriods for PaySchedule specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule periods
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for
    # @param tax_year The year that you want to retrieve details for
    # @param ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period_number Optionally specify a period number to get a result just for that period
    # @option opts [BOOLEAN] :include_events  (default to false)
    # @return [Array<PaySchedulePeriod>]
    def get_periods_pay_schedule(employer_id, pay_period, tax_year, ordinal, opts = {})
      data, _status_code, _headers = get_periods_pay_schedule_with_http_info(employer_id, pay_period, tax_year, ordinal, opts)
      data
    end

    # Get PaySchedulePeriods
    # Get the PaySchedulePeriods for PaySchedule specified.
    # @param employer_id The Id of the Employer for which you want to get the PaySchedule periods
    # @param pay_period The PayPeriod (ie, Monthly) that you want to retrieve details for
    # @param tax_year The year that you want to retrieve details for
    # @param ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period_number Optionally specify a period number to get a result just for that period
    # @option opts [BOOLEAN] :include_events 
    # @return [Array<(Array<PaySchedulePeriod>, Integer, Hash)>] Array<PaySchedulePeriod> data, response status code and response headers
    def get_periods_pay_schedule_with_http_info(employer_id, pay_period, tax_year, ordinal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.get_periods_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.get_periods_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.get_periods_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.get_periods_pay_schedule"
      end
      # verify the required parameter 'ordinal' is set
      if @api_client.config.client_side_validation && ordinal.nil?
        fail ArgumentError, "Missing the required parameter 'ordinal' when calling PayScheduleApi.get_periods_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'ordinal' + '}', ordinal.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'periodNumber'] = opts[:'period_number'] if !opts[:'period_number'].nil?
      query_params[:'includeEvents'] = opts[:'include_events'] if !opts[:'include_events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<PaySchedulePeriod>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#get_periods_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update PaySchedule
    # Update PaySchedule for the PayPeriod.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for.
    # @param tax_year The year that the PaySchedule is for.
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedule] :body 
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (default to 1)
    # @return [PaySchedule]
    def save_pay_schedule(employer_id, pay_period, tax_year, opts = {})
      data, _status_code, _headers = save_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts)
      data
    end

    # Update PaySchedule
    # Update PaySchedule for the PayPeriod.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedule
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for.
    # @param tax_year The year that the PaySchedule is for.
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedule] :body 
    # @option opts [Integer] :ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)
    # @return [Array<(PaySchedule, Integer, Hash)>] PaySchedule data, response status code and response headers
    def save_pay_schedule_with_http_info(employer_id, pay_period, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.save_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.save_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.save_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.save_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ordinal'] = opts[:'ordinal'] if !opts[:'ordinal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PaySchedule' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#save_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update PaySchedulePeriod
    # Update the PaymentDate for a PaySchedulePeriod.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedulePeriod
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for
    # @param tax_year The year that the PaySchedule is for
    # @param ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod.
    # @param period_number Specify the number of the period that you want to update the PaymentDate for
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedulePeriod] :body 
    # @return [PaySchedulePeriod]
    def update_pay_schedule_period_pay_schedule(employer_id, pay_period, tax_year, ordinal, period_number, opts = {})
      data, _status_code, _headers = update_pay_schedule_period_pay_schedule_with_http_info(employer_id, pay_period, tax_year, ordinal, period_number, opts)
      data
    end

    # Update PaySchedulePeriod
    # Update the PaymentDate for a PaySchedulePeriod.
    # @param employer_id The Id of the Employer for which you want to update the PaySchedulePeriod
    # @param pay_period The PayPeriod (ie, Monthly) that you want to update details for
    # @param tax_year The year that the PaySchedule is for
    # @param ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod.
    # @param period_number Specify the number of the period that you want to update the PaymentDate for
    # @param [Hash] opts the optional parameters
    # @option opts [PaySchedulePeriod] :body 
    # @return [Array<(PaySchedulePeriod, Integer, Hash)>] PaySchedulePeriod data, response status code and response headers
    def update_pay_schedule_period_pay_schedule_with_http_info(employer_id, pay_period, tax_year, ordinal, period_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayScheduleApi.update_pay_schedule_period_pay_schedule ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PayScheduleApi.update_pay_schedule_period_pay_schedule"
      end
      # verify the required parameter 'pay_period' is set
      if @api_client.config.client_side_validation && pay_period.nil?
        fail ArgumentError, "Missing the required parameter 'pay_period' when calling PayScheduleApi.update_pay_schedule_period_pay_schedule"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling PayScheduleApi.update_pay_schedule_period_pay_schedule"
      end
      # verify the required parameter 'ordinal' is set
      if @api_client.config.client_side_validation && ordinal.nil?
        fail ArgumentError, "Missing the required parameter 'ordinal' when calling PayScheduleApi.update_pay_schedule_period_pay_schedule"
      end
      # verify the required parameter 'period_number' is set
      if @api_client.config.client_side_validation && period_number.nil?
        fail ArgumentError, "Missing the required parameter 'period_number' when calling PayScheduleApi.update_pay_schedule_period_pay_schedule"
      end
      # resource path
      local_var_path = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods/{periodNumber}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'payPeriod' + '}', pay_period.to_s).sub('{' + 'taxYear' + '}', tax_year.to_s).sub('{' + 'ordinal' + '}', ordinal.to_s).sub('{' + 'periodNumber' + '}', period_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PaySchedulePeriod' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayScheduleApi#update_pay_schedule_period_pay_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
