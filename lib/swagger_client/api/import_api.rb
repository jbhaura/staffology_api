=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class ImportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PaymentsCsvMapping
    # Creates a new PaymentsCsvMapping for the Employer.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentsCsvMapping] :body 
    # @return [nil]
    def create_payments_csv_mapping_import(employer_id, opts = {})
      create_payments_csv_mapping_import_with_http_info(employer_id, opts)
      nil
    end

    # Create PaymentsCsvMapping
    # Creates a new PaymentsCsvMapping for the Employer.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentsCsvMapping] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_payments_csv_mapping_import_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.create_payments_csv_mapping_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.create_payments_csv_mapping_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#create_payments_csv_mapping_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PaymentsCsvMapping
    # Deletes the specified PaymentsCsvMapping.
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_payment_csv_mapping_import(employer_id, id, opts = {})
      delete_payment_csv_mapping_import_with_http_info(employer_id, id, opts)
      nil
    end

    # Delete PaymentsCsvMapping
    # Deletes the specified PaymentsCsvMapping.
    # @param employer_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_payment_csv_mapping_import_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.delete_payment_csv_mapping_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.delete_payment_csv_mapping_import"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImportApi.delete_payment_csv_mapping_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#delete_payment_csv_mapping_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List PaymentsCsvMappings
    # Lists all PaymentsCsvMappings for an Employer.
    # @param employer_id The Id of the Employer for which you want to list mappings
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_payments_csv_mappings_import(employer_id, opts = {})
      data, _status_code, _headers = list_payments_csv_mappings_import_with_http_info(employer_id, opts)
      data
    end

    # List PaymentsCsvMappings
    # Lists all PaymentsCsvMappings for an Employer.
    # @param employer_id The Id of the Employer for which you want to list mappings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_payments_csv_mappings_import_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.list_payments_csv_mappings_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.list_payments_csv_mappings_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#list_payments_csv_mappings_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PaymentsCsvMapping CSV File
    # Gets a CSV file in the format needed to import for the specified PaymentsCsvMapping\\n  This is only available for PaymentsCsvMapping with a Type of ColumnBased
    # @param employer_id The Id of the Employer to which the PaymentCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [ReportResponse]
    def payments_csv_mapping_csv_file_import(employer_id, id, opts = {})
      data, _status_code, _headers = payments_csv_mapping_csv_file_import_with_http_info(employer_id, id, opts)
      data
    end

    # Get PaymentsCsvMapping CSV File
    # Gets a CSV file in the format needed to import for the specified PaymentsCsvMapping\\n  This is only available for PaymentsCsvMapping with a Type of ColumnBased
    # @param employer_id The Id of the Employer to which the PaymentCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportResponse, Integer, Hash)>] ReportResponse data, response status code and response headers
    def payments_csv_mapping_csv_file_import_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.payments_csv_mapping_csv_file_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.payments_csv_mapping_csv_file_import"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImportApi.payments_csv_mapping_csv_file_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings/{id}/csv'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ReportResponse' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#payments_csv_mapping_csv_file_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PaymentsCsvMapping
    # Gets the PaymentsCsvMapping specified.
    # @param employer_id The Id of the Employer to which the PaymentCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [PaymentsCsvMapping]
    def payments_csv_mapping_import(employer_id, id, opts = {})
      data, _status_code, _headers = payments_csv_mapping_import_with_http_info(employer_id, id, opts)
      data
    end

    # Get PaymentsCsvMapping
    # Gets the PaymentsCsvMapping specified.
    # @param employer_id The Id of the Employer to which the PaymentCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentsCsvMapping, Integer, Hash)>] PaymentsCsvMapping data, response status code and response headers
    def payments_csv_mapping_import_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.payments_csv_mapping_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.payments_csv_mapping_import"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImportApi.payments_csv_mapping_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PaymentsCsvMapping' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#payments_csv_mapping_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update PaymentsCsvMapping
    # Updates the PaymentsCsvMapping specified.
    # @param employer_id The Id of the Employer to which the PaymentsCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentsCsvMapping] :body 
    # @return [PaymentsCsvMapping]
    def update_payments_csv_mapping_import(employer_id, id, opts = {})
      data, _status_code, _headers = update_payments_csv_mapping_import_with_http_info(employer_id, id, opts)
      data
    end

    # Update PaymentsCsvMapping
    # Updates the PaymentsCsvMapping specified.
    # @param employer_id The Id of the Employer to which the PaymentsCsvMapping belongs.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentsCsvMapping] :body 
    # @return [Array<(PaymentsCsvMapping, Integer, Hash)>] PaymentsCsvMapping data, response status code and response headers
    def update_payments_csv_mapping_import_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.update_payments_csv_mapping_import ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling ImportApi.update_payments_csv_mapping_import"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImportApi.update_payments_csv_mapping_import"
      end
      # resource path
      local_var_path = '/employers/{employerId}/import/payments/mappings/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'PaymentsCsvMapping' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#update_payments_csv_mapping_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
