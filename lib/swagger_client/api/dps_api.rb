=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class DpsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply Notice
    # Applies the specified DPS Notice.
    # @param employer_id 
    # @param id The Id of the DpsNotice you want to apply.
    # @param [Hash] opts the optional parameters
    # @return [DpsNotice]
    def apply_dps(employer_id, id, opts = {})
      data, _status_code, _headers = apply_dps_with_http_info(employer_id, id, opts)
      data
    end

    # Apply Notice
    # Applies the specified DPS Notice.
    # @param employer_id 
    # @param id The Id of the DpsNotice you want to apply.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DpsNotice, Integer, Hash)>] DpsNotice data, response status code and response headers
    def apply_dps_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.apply_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.apply_dps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DpsApi.apply_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DpsNotice' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#apply_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check for new Notices
    # Checks with HMRC for new notices. Returns an integer showing how many new notices were found
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def check_for_notices_dps(employer_id, opts = {})
      data, _status_code, _headers = check_for_notices_dps_with_http_info(employer_id, opts)
      data
    end

    # Check for new Notices
    # Checks with HMRC for new notices. Returns an integer showing how many new notices were found
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def check_for_notices_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.check_for_notices_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.check_for_notices_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Integer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#check_for_notices_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete All Notices
    # @param employer_id The Id of the Employer that you want to delete all notices for.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_dps(employer_id, opts = {})
      delete_all_dps_with_http_info(employer_id, opts)
      nil
    end

    # Delete All Notices
    # @param employer_id The Id of the Employer that you want to delete all notices for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.delete_all_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.delete_all_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#delete_all_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Notice
    # @param employer_id The Id of the Employer to which the DpsNotice belongs.
    # @param id The Id of the DsNotice you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dps(employer_id, id, opts = {})
      delete_dps_with_http_info(employer_id, id, opts)
      nil
    end

    # Delete Notice
    # @param employer_id The Id of the Employer to which the DpsNotice belongs.
    # @param id The Id of the DsNotice you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dps_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.delete_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.delete_dps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DpsApi.delete_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#delete_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Notice
    # Returns the specified DPS Notice.
    # @param employer_id 
    # @param id The Id of the DpsNotice you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [DpsNotice]
    def get_dps(employer_id, id, opts = {})
      data, _status_code, _headers = get_dps_with_http_info(employer_id, id, opts)
      data
    end

    # Get Notice
    # Returns the specified DPS Notice.
    # @param employer_id 
    # @param id The Id of the DpsNotice you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DpsNotice, Integer, Hash)>] DpsNotice data, response status code and response headers
    def get_dps_with_http_info(employer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.get_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.get_dps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DpsApi.get_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices/{id}'.sub('{' + 'employerId' + '}', employer_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DpsNotice' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#get_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DPS Settings
    # Returns the DpsSettings for the Employer
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [DpsSettings]
    def get_dps_settings_dps(employer_id, opts = {})
      data, _status_code, _headers = get_dps_settings_dps_with_http_info(employer_id, opts)
      data
    end

    # Get DPS Settings
    # Returns the DpsSettings for the Employer
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @return [Array<(DpsSettings, Integer, Hash)>] DpsSettings data, response status code and response headers
    def get_dps_settings_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.get_dps_settings_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.get_dps_settings_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/settings'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DpsSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#get_dps_settings_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Notices
    # Lists DPS Notices.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<Item>]
    def list_notices_dps(employer_id, opts = {})
      data, _status_code, _headers = list_notices_dps_with_http_info(employer_id, opts)
      data
    end

    # List Notices
    # Lists DPS Notices.
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_num 
    # @option opts [Integer] :page_size 
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_notices_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.list_notices_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.list_notices_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#list_notices_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Parse notices from XML
    # Checks the supplied XML string for notices. They're then processed in the same was as if received from HMRC.  Only used for testing the parsing of DPS XML.\\n  Returns an integer showing how many new notices were found
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Integer]
    def parse_xml_dps(employer_id, opts = {})
      data, _status_code, _headers = parse_xml_dps_with_http_info(employer_id, opts)
      data
    end

    # Parse notices from XML
    # Checks the supplied XML string for notices. They&#x27;re then processed in the same was as if received from HMRC.  Only used for testing the parsing of DPS XML.\\n  Returns an integer showing how many new notices were found
    # @param employer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def parse_xml_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.parse_xml_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.parse_xml_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/notices/xml'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Integer' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#parse_xml_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DPS Settings
    # Updates the DpsSettings for the Employer
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [DpsSettings] :body 
    # @return [DpsSettings]
    def update_dps_settings_dps(employer_id, opts = {})
      data, _status_code, _headers = update_dps_settings_dps_with_http_info(employer_id, opts)
      data
    end

    # Update DPS Settings
    # Updates the DpsSettings for the Employer
    # @param employer_id The Id of the Employer
    # @param [Hash] opts the optional parameters
    # @option opts [DpsSettings] :body 
    # @return [Array<(DpsSettings, Integer, Hash)>] DpsSettings data, response status code and response headers
    def update_dps_settings_dps_with_http_info(employer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DpsApi.update_dps_settings_dps ...'
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling DpsApi.update_dps_settings_dps"
      end
      # resource path
      local_var_path = '/employers/{employerId}/dps/settings'.sub('{' + 'employerId' + '}', employer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'DpsSettings' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DpsApi#update_dps_settings_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
