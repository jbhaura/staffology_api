=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate an Account
    # New accounts need to be activated to confirm Terms and Conditions have been accepted.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [User] :body 
    # @option opts [String] :brand_code 
    # @return [User]
    def activate_account(opts = {})
      data, _status_code, _headers = activate_account_with_http_info(opts)
      data
    end

    # Activate an Account
    # New accounts need to be activated to confirm Terms and Conditions have been accepted.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [User] :body 
    # @option opts [String] :brand_code 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def activate_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.activate_account ...'
      end
      # resource path
      local_var_path = '/account/activate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brandCode'] = opts[:'brand_code'] if !opts[:'brand_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#activate_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change Email Address
    # The user.PendingEmailAddress will be set to the give address and a  new verification email will be sent.\\n  Once the link in the email is clicked on then the user account will be updated to use the new email address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_address 
    # @return [User]
    def change_email_address_account(opts = {})
      data, _status_code, _headers = change_email_address_account_with_http_info(opts)
      data
    end

    # Change Email Address
    # The user.PendingEmailAddress will be set to the give address and a  new verification email will be sent.\\n  Once the link in the email is clicked on then the user account will be updated to use the new email address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_address 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def change_email_address_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.change_email_address_account ...'
      end
      # resource path
      local_var_path = '/account/emailaddress'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailAddress'] = opts[:'email_address'] if !opts[:'email_address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#change_email_address_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create ApiKey
    # Creates a new APIKey. The only property that's required or used is Name.\\n  A new ApiKey will be generated and returned to you.
    # @param [Hash] opts the optional parameters
    # @option opts [Item] :body 
    # @return [Item]
    def create_api_key_account(opts = {})
      data, _status_code, _headers = create_api_key_account_with_http_info(opts)
      data
    end

    # Create ApiKey
    # Creates a new APIKey. The only property that&#x27;s required or used is Name.\\n  A new ApiKey will be generated and returned to you.
    # @param [Hash] opts the optional parameters
    # @option opts [Item] :body 
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def create_api_key_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_api_key_account ...'
      end
      # resource path
      local_var_path = '/account/keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_api_key_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Demo Employer
    # Creates a demo employer for the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_demo_employer_account(opts = {})
      create_demo_employer_account_with_http_info(opts)
      nil
    end

    # Create Demo Employer
    # Creates a demo employer for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_demo_employer_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_demo_employer_account ...'
      end
      # resource path
      local_var_path = '/account/demo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_demo_employer_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete ApiKey
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_key_account(id, opts = {})
      delete_api_key_account_with_http_info(id, opts)
      nil
    end

    # Delete ApiKey
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_api_key_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_api_key_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountApi.delete_api_key_account"
      end
      # resource path
      local_var_path = '/account/keys/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_api_key_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Account Details
    # Returns the details for the authorised account.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :defaults You can leave this empty, it&#x27;s for internal use only.
    # @option opts [String] :defaults_key You can leave this empty, it&#x27;s for internal use only.
    # @return [User]
    def get_account(opts = {})
      data, _status_code, _headers = get_account_with_http_info(opts)
      data
    end

    # Get Account Details
    # Returns the details for the authorised account.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :defaults You can leave this empty, it&#x27;s for internal use only.
    # @option opts [String] :defaults_key You can leave this empty, it&#x27;s for internal use only.
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account ...'
      end
      # resource path
      local_var_path = '/account'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaults'] = opts[:'defaults'] if !opts[:'defaults'].nil?
      query_params[:'defaultsKey'] = opts[:'defaults_key'] if !opts[:'defaults_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ApiKey
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Item]
    def get_api_key_account(id, opts = {})
      data, _status_code, _headers = get_api_key_account_with_http_info(id, opts)
      data
    end

    # Get ApiKey
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def get_api_key_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_api_key_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountApi.get_api_key_account"
      end
      # resource path
      local_var_path = '/account/keys/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_api_key_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EmployerDefaults
    # Get the EmployerDefaults for the currently authorised User.
    # @param [Hash] opts the optional parameters
    # @return [EmployerDefaults]
    def get_employer_defaults_account(opts = {})
      data, _status_code, _headers = get_employer_defaults_account_with_http_info(opts)
      data
    end

    # Get EmployerDefaults
    # Get the EmployerDefaults for the currently authorised User.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmployerDefaults, Integer, Hash)>] EmployerDefaults data, response status code and response headers
    def get_employer_defaults_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_employer_defaults_account ...'
      end
      # resource path
      local_var_path = '/account/employerdefaults'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmployerDefaults' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_employer_defaults_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Invitations
    # Returns any pending Invitations for the authorised user.\\n  If the email address isn't yet verified then the Name displayed in the Item will be the users  email address instead of the company name.\\n  Invitations cannot be accepted until the email address for the user is verified.
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def get_invitations_account(opts = {})
      data, _status_code, _headers = get_invitations_account_with_http_info(opts)
      data
    end

    # Get Invitations
    # Returns any pending Invitations for the authorised user.\\n  If the email address isn&#x27;t yet verified then the Name displayed in the Item will be the users  email address instead of the company name.\\n  Invitations cannot be accepted until the email address for the user is verified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def get_invitations_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_invitations_account ...'
      end
      # resource path
      local_var_path = '/account/invitations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_invitations_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tenant
    # Returns branding details for the specified tenant. This is used by the web app and is unlikely to be used by third-parties.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id 
    # @option opts [String] :key 
    # @return [Tenant]
    def get_tenant_account(opts = {})
      data, _status_code, _headers = get_tenant_account_with_http_info(opts)
      data
    end

    # Get Tenant
    # Returns branding details for the specified tenant. This is used by the web app and is unlikely to be used by third-parties.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id 
    # @option opts [String] :key 
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def get_tenant_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_tenant_account ...'
      end
      # resource path
      local_var_path = '/account/Tenant'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenantId'] = opts[:'tenant_id'] if !opts[:'tenant_id'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Tenant' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_tenant_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List ApiKeys
    # @param [Hash] opts the optional parameters
    # @return [Array<Item>]
    def list_api_keys_account(opts = {})
      data, _status_code, _headers = list_api_keys_account_with_http_info(opts)
      data
    end

    # List ApiKeys
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Item>, Integer, Hash)>] Array<Item> data, response status code and response headers
    def list_api_keys_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.list_api_keys_account ...'
      end
      # resource path
      local_var_path = '/account/keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Item>' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#list_api_keys_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Profile
    # Updates your profile. Only FirstName and LastName fields are updated.
    # @param [Hash] opts the optional parameters
    # @option opts [User] :body 
    # @return [User]
    def profile_account(opts = {})
      data, _status_code, _headers = profile_account_with_http_info(opts)
      data
    end

    # Update Profile
    # Updates your profile. Only FirstName and LastName fields are updated.
    # @param [Hash] opts the optional parameters
    # @option opts [User] :body 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def profile_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.profile_account ...'
      end
      # resource path
      local_var_path = '/account/profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#profile_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set EmployerDefaults
    # Set the EmployerDefaults for the currently authorised User.
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerDefaults] :body 
    # @return [EmployerDefaults]
    def set_employer_defaults_account(opts = {})
      data, _status_code, _headers = set_employer_defaults_account_with_http_info(opts)
      data
    end

    # Set EmployerDefaults
    # Set the EmployerDefaults for the currently authorised User.
    # @param [Hash] opts the optional parameters
    # @option opts [EmployerDefaults] :body 
    # @return [Array<(EmployerDefaults, Integer, Hash)>] EmployerDefaults data, response status code and response headers
    def set_employer_defaults_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.set_employer_defaults_account ...'
      end
      # resource path
      local_var_path = '/account/employerdefaults'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'EmployerDefaults' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#set_employer_defaults_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Cookie Preferences
    # Updates cookie preferences for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [CookiePreference] :body 
    # @return [CookiePreference]
    def update_cookie_preferences_account(opts = {})
      data, _status_code, _headers = update_cookie_preferences_account_with_http_info(opts)
      data
    end

    # Update Cookie Preferences
    # Updates cookie preferences for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [CookiePreference] :body 
    # @return [Array<(CookiePreference, Integer, Hash)>] CookiePreference data, response status code and response headers
    def update_cookie_preferences_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_cookie_preferences_account ...'
      end
      # resource path
      local_var_path = '/account/cookiepreferences'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'CookiePreference' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_cookie_preferences_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Photo
    # Submit an image here and we'll upload it, resize it to 200px squared and set it as the image for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [User]
    def update_photo_account(opts = {})
      data, _status_code, _headers = update_photo_account_with_http_info(opts)
      data
    end

    # Update Photo
    # Submit an image here and we&#x27;ll upload it, resize it to 200px squared and set it as the image for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_photo_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_photo_account ...'
      end
      # resource path
      local_var_path = '/account/photo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'User' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_photo_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-send Verification Email
    # Users should receive an email to verify their email address when they first register or if they change their email address.\\n  However, this API endpoint can be used to re-send the email.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def verify_account(opts = {})
      verify_account_with_http_info(opts)
      nil
    end

    # Re-send Verification Email
    # Users should receive an email to verify their email address when they first register or if they change their email address.\\n  However, this API endpoint can be used to re-send the email.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def verify_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.verify_account ...'
      end
      # resource path
      local_var_path = '/account/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#verify_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Verify Email Address
    # Used to process the link sent in an email to verify an email address.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :u The value from the link in the email.
    # @option opts [String] :k The value from the link in the email.
    # @return [BOOLEAN]
    def verify_response_account(opts = {})
      data, _status_code, _headers = verify_response_account_with_http_info(opts)
      data
    end

    # Verify Email Address
    # Used to process the link sent in an email to verify an email address.\\n
    # @param [Hash] opts the optional parameters
    # @option opts [String] :u The value from the link in the email.
    # @option opts [String] :k The value from the link in the email.
    # @return [Array<(BOOLEAN, Integer, Hash)>] BOOLEAN data, response status code and response headers
    def verify_response_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.verify_response_account ...'
      end
      # resource path
      local_var_path = '/account/verify/respond'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'u'] = opts[:'u'] if !opts[:'u'].nil?
      query_params[:'k'] = opts[:'k'] if !opts[:'k'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BOOLEAN' 

      auth_names = opts[:auth_names] || ['Basic', 'oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#verify_response_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
