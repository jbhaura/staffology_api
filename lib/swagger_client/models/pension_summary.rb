=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # If a PayRunEntry contains pension contributions then it'll also include a PensionSummary model   giving further information about the Pension Scheme and the contributions made
  class PensionSummary
    # [readonly] The Id of the Pension.
    attr_accessor :pension_id

    # [readonly] The name of the PensionScheme to which contributions have been made.
    attr_accessor :name

    # [readonly] The Id of the PensionScheme.
    attr_accessor :pension_scheme_id

    # [readonly]
    attr_accessor :start_date

    # [readonly] The Id of the WorkerGroup.
    attr_accessor :worker_group_id

    attr_accessor :pension_rule

    # [readonly] Papdis information from the PensionScheme
    attr_accessor :papdis_pension_provider_id

    # [readonly] Papdis information from the PensionScheme
    attr_accessor :papdis_employer_id

    # [readonly] If the PensionScheme is set to SubtractBasicRateTax then this value  is used to reduce the contribution amount.\\n  Otherwise it is set as 1.
    attr_accessor :employee_pension_contribution_multiplier

    # [readonly] Any Additional Voluntary Contribution the Employee has chosen to make  Otherwise it is set as 1.
    attr_accessor :additional_voluntary_contribution

    # [readonly] Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,
    attr_accessor :avc_is_percentage

    # [readonly] Any Additional Voluntary Contribution the Employee has chosen to make  Otherwise it is set as 1.
    attr_accessor :auto_enrolled

    attr_accessor :worker_group

    # [readonly] If the WorkerGroup ContributionLevelType is a Tiered Scheme then the name of the tier to force the employee on to may be specified.\\n  If none is specified then the Tier is determined by the earnings in the period
    attr_accessor :forced_tier

    attr_accessor :tiers

    # [readonly] Assumed Pensionable Pay. If the employee is receiving any Statutory Leave that has an AssumedPensionablePay value set  then it'll be shown here.
    attr_accessor :assumed_pensionable_pay

    # [readonly] If the pension scheme is set to override the Pensionale PayCodes, then this is what they've been set to.\\n
    attr_accessor :pensionable_pay_codes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pension_id' => :'pensionId',
        :'name' => :'name',
        :'pension_scheme_id' => :'pensionSchemeId',
        :'start_date' => :'startDate',
        :'worker_group_id' => :'workerGroupId',
        :'pension_rule' => :'pensionRule',
        :'papdis_pension_provider_id' => :'papdisPensionProviderId',
        :'papdis_employer_id' => :'papdisEmployerId',
        :'employee_pension_contribution_multiplier' => :'employeePensionContributionMultiplier',
        :'additional_voluntary_contribution' => :'additionalVoluntaryContribution',
        :'avc_is_percentage' => :'avcIsPercentage',
        :'auto_enrolled' => :'autoEnrolled',
        :'worker_group' => :'workerGroup',
        :'forced_tier' => :'forcedTier',
        :'tiers' => :'tiers',
        :'assumed_pensionable_pay' => :'assumedPensionablePay',
        :'pensionable_pay_codes' => :'pensionablePayCodes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pension_id' => :'Object',
        :'name' => :'Object',
        :'pension_scheme_id' => :'Object',
        :'start_date' => :'Object',
        :'worker_group_id' => :'Object',
        :'pension_rule' => :'Object',
        :'papdis_pension_provider_id' => :'Object',
        :'papdis_employer_id' => :'Object',
        :'employee_pension_contribution_multiplier' => :'Object',
        :'additional_voluntary_contribution' => :'Object',
        :'avc_is_percentage' => :'Object',
        :'auto_enrolled' => :'Object',
        :'worker_group' => :'Object',
        :'forced_tier' => :'Object',
        :'tiers' => :'Object',
        :'assumed_pensionable_pay' => :'Object',
        :'pensionable_pay_codes' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'papdis_pension_provider_id',
        :'papdis_employer_id',
        :'forced_tier',
        :'tiers',
        :'assumed_pensionable_pay',
        :'pensionable_pay_codes'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PensionSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PensionSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pension_id')
        self.pension_id = attributes[:'pension_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pension_scheme_id')
        self.pension_scheme_id = attributes[:'pension_scheme_id']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'worker_group_id')
        self.worker_group_id = attributes[:'worker_group_id']
      end

      if attributes.key?(:'pension_rule')
        self.pension_rule = attributes[:'pension_rule']
      end

      if attributes.key?(:'papdis_pension_provider_id')
        self.papdis_pension_provider_id = attributes[:'papdis_pension_provider_id']
      end

      if attributes.key?(:'papdis_employer_id')
        self.papdis_employer_id = attributes[:'papdis_employer_id']
      end

      if attributes.key?(:'employee_pension_contribution_multiplier')
        self.employee_pension_contribution_multiplier = attributes[:'employee_pension_contribution_multiplier']
      end

      if attributes.key?(:'additional_voluntary_contribution')
        self.additional_voluntary_contribution = attributes[:'additional_voluntary_contribution']
      end

      if attributes.key?(:'avc_is_percentage')
        self.avc_is_percentage = attributes[:'avc_is_percentage']
      end

      if attributes.key?(:'auto_enrolled')
        self.auto_enrolled = attributes[:'auto_enrolled']
      end

      if attributes.key?(:'worker_group')
        self.worker_group = attributes[:'worker_group']
      end

      if attributes.key?(:'forced_tier')
        self.forced_tier = attributes[:'forced_tier']
      end

      if attributes.key?(:'tiers')
        if (value = attributes[:'tiers']).is_a?(Array)
          self.tiers = value
        end
      end

      if attributes.key?(:'assumed_pensionable_pay')
        self.assumed_pensionable_pay = attributes[:'assumed_pensionable_pay']
      end

      if attributes.key?(:'pensionable_pay_codes')
        if (value = attributes[:'pensionable_pay_codes']).is_a?(Array)
          self.pensionable_pay_codes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pension_id == o.pension_id &&
          name == o.name &&
          pension_scheme_id == o.pension_scheme_id &&
          start_date == o.start_date &&
          worker_group_id == o.worker_group_id &&
          pension_rule == o.pension_rule &&
          papdis_pension_provider_id == o.papdis_pension_provider_id &&
          papdis_employer_id == o.papdis_employer_id &&
          employee_pension_contribution_multiplier == o.employee_pension_contribution_multiplier &&
          additional_voluntary_contribution == o.additional_voluntary_contribution &&
          avc_is_percentage == o.avc_is_percentage &&
          auto_enrolled == o.auto_enrolled &&
          worker_group == o.worker_group &&
          forced_tier == o.forced_tier &&
          tiers == o.tiers &&
          assumed_pensionable_pay == o.assumed_pensionable_pay &&
          pensionable_pay_codes == o.pensionable_pay_codes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pension_id, name, pension_scheme_id, start_date, worker_group_id, pension_rule, papdis_pension_provider_id, papdis_employer_id, employee_pension_contribution_multiplier, additional_voluntary_contribution, avc_is_percentage, auto_enrolled, worker_group, forced_tier, tiers, assumed_pensionable_pay, pensionable_pay_codes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
