=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # If you don't want to use our customisable PDFs for Payslips then you can retrieve the raw data used to create a Payslip.\\n  This is the model you will be provided with for each employee.
  class Payslip
    # [readonly] Indicates if the Payrun has been finalised
    attr_accessor :is_closed

    # [readonly] A description of the period that Payslip relates to.
    attr_accessor :period

    # [readonly] The start date of the period this Payslip covers.
    attr_accessor :from

    # [readonly] The end date of the period this Payslip covers.
    attr_accessor :to

    # [readonly] The date the Employee will be paid on
    attr_accessor :payment_date

    # [readonly] Any note that should appear on the payslip
    attr_accessor :note

    # [readonly] Details of remaining allowance to show on payslip
    attr_accessor :allowance_note

    attr_accessor :employee

    # [readonly] The Logo to include on the payslip
    attr_accessor :logo_url

    attr_accessor :employer

    attr_accessor :employer_address

    attr_accessor :hmrc_details

    attr_accessor :pay_options

    attr_accessor :employment_details

    attr_accessor :personal_details

    attr_accessor :totals

    attr_accessor :totals_ytd

    # [readonly] The lines to display on the Payslip
    attr_accessor :lines

    # [readonly] The Employer NI Contribution amount
    attr_accessor :employer_ni

    # [readonly] AThe Employer Pension Contribution Amount
    attr_accessor :employer_pension_contribs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_closed' => :'isClosed',
        :'period' => :'period',
        :'from' => :'from',
        :'to' => :'to',
        :'payment_date' => :'paymentDate',
        :'note' => :'note',
        :'allowance_note' => :'allowanceNote',
        :'employee' => :'employee',
        :'logo_url' => :'logoUrl',
        :'employer' => :'employer',
        :'employer_address' => :'employerAddress',
        :'hmrc_details' => :'hmrcDetails',
        :'pay_options' => :'payOptions',
        :'employment_details' => :'employmentDetails',
        :'personal_details' => :'personalDetails',
        :'totals' => :'totals',
        :'totals_ytd' => :'totalsYtd',
        :'lines' => :'lines',
        :'employer_ni' => :'employerNi',
        :'employer_pension_contribs' => :'employerPensionContribs'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_closed' => :'Object',
        :'period' => :'Object',
        :'from' => :'Object',
        :'to' => :'Object',
        :'payment_date' => :'Object',
        :'note' => :'Object',
        :'allowance_note' => :'Object',
        :'employee' => :'Object',
        :'logo_url' => :'Object',
        :'employer' => :'Object',
        :'employer_address' => :'Object',
        :'hmrc_details' => :'Object',
        :'pay_options' => :'Object',
        :'employment_details' => :'Object',
        :'personal_details' => :'Object',
        :'totals' => :'Object',
        :'totals_ytd' => :'Object',
        :'lines' => :'Object',
        :'employer_ni' => :'Object',
        :'employer_pension_contribs' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'period',
        :'note',
        :'allowance_note',
        :'logo_url',
        :'lines',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Payslip` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Payslip`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_closed')
        self.is_closed = attributes[:'is_closed']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'allowance_note')
        self.allowance_note = attributes[:'allowance_note']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'logo_url')
        self.logo_url = attributes[:'logo_url']
      end

      if attributes.key?(:'employer')
        self.employer = attributes[:'employer']
      end

      if attributes.key?(:'employer_address')
        self.employer_address = attributes[:'employer_address']
      end

      if attributes.key?(:'hmrc_details')
        self.hmrc_details = attributes[:'hmrc_details']
      end

      if attributes.key?(:'pay_options')
        self.pay_options = attributes[:'pay_options']
      end

      if attributes.key?(:'employment_details')
        self.employment_details = attributes[:'employment_details']
      end

      if attributes.key?(:'personal_details')
        self.personal_details = attributes[:'personal_details']
      end

      if attributes.key?(:'totals')
        self.totals = attributes[:'totals']
      end

      if attributes.key?(:'totals_ytd')
        self.totals_ytd = attributes[:'totals_ytd']
      end

      if attributes.key?(:'lines')
        if (value = attributes[:'lines']).is_a?(Array)
          self.lines = value
        end
      end

      if attributes.key?(:'employer_ni')
        self.employer_ni = attributes[:'employer_ni']
      end

      if attributes.key?(:'employer_pension_contribs')
        self.employer_pension_contribs = attributes[:'employer_pension_contribs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_closed == o.is_closed &&
          period == o.period &&
          from == o.from &&
          to == o.to &&
          payment_date == o.payment_date &&
          note == o.note &&
          allowance_note == o.allowance_note &&
          employee == o.employee &&
          logo_url == o.logo_url &&
          employer == o.employer &&
          employer_address == o.employer_address &&
          hmrc_details == o.hmrc_details &&
          pay_options == o.pay_options &&
          employment_details == o.employment_details &&
          personal_details == o.personal_details &&
          totals == o.totals &&
          totals_ytd == o.totals_ytd &&
          lines == o.lines &&
          employer_ni == o.employer_ni &&
          employer_pension_contribs == o.employer_pension_contribs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_closed, period, from, to, payment_date, note, allowance_note, employee, logo_url, employer, employer_address, hmrc_details, pay_options, employment_details, personal_details, totals, totals_ytd, lines, employer_ni, employer_pension_contribs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
