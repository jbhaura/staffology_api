=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class FpsEmployment
    attr_accessor :employee_current_ni_letter

    attr_accessor :off_payroll_worker

    attr_accessor :occ_pen_ind

    attr_accessor :directors_nic

    attr_accessor :tax_wk_of_appt_of_director

    attr_accessor :starter

    attr_accessor :pay_id

    attr_accessor :pay_id_chgd

    attr_accessor :payment_to_a_non_individual

    attr_accessor :irr_emp

    attr_accessor :leaving_date

    attr_accessor :figures_to_date

    attr_accessor :payment

    attr_accessor :n_iletters_and_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'employee_current_ni_letter' => :'employeeCurrentNiLetter',
        :'off_payroll_worker' => :'offPayrollWorker',
        :'occ_pen_ind' => :'occPenInd',
        :'directors_nic' => :'directorsNIC',
        :'tax_wk_of_appt_of_director' => :'taxWkOfApptOfDirector',
        :'starter' => :'starter',
        :'pay_id' => :'payId',
        :'pay_id_chgd' => :'payIdChgd',
        :'payment_to_a_non_individual' => :'paymentToANonIndividual',
        :'irr_emp' => :'irrEmp',
        :'leaving_date' => :'leavingDate',
        :'figures_to_date' => :'figuresToDate',
        :'payment' => :'payment',
        :'n_iletters_and_values' => :'nIlettersAndValues'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'employee_current_ni_letter' => :'Object',
        :'off_payroll_worker' => :'Object',
        :'occ_pen_ind' => :'Object',
        :'directors_nic' => :'Object',
        :'tax_wk_of_appt_of_director' => :'Object',
        :'starter' => :'Object',
        :'pay_id' => :'Object',
        :'pay_id_chgd' => :'Object',
        :'payment_to_a_non_individual' => :'Object',
        :'irr_emp' => :'Object',
        :'leaving_date' => :'Object',
        :'figures_to_date' => :'Object',
        :'payment' => :'Object',
        :'n_iletters_and_values' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'employee_current_ni_letter',
        :'off_payroll_worker',
        :'occ_pen_ind',
        :'directors_nic',
        :'tax_wk_of_appt_of_director',
        :'pay_id',
        :'payment_to_a_non_individual',
        :'irr_emp',
        :'leaving_date',
        :'n_iletters_and_values'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::FpsEmployment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::FpsEmployment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'employee_current_ni_letter')
        self.employee_current_ni_letter = attributes[:'employee_current_ni_letter']
      end

      if attributes.key?(:'off_payroll_worker')
        self.off_payroll_worker = attributes[:'off_payroll_worker']
      end

      if attributes.key?(:'occ_pen_ind')
        self.occ_pen_ind = attributes[:'occ_pen_ind']
      end

      if attributes.key?(:'directors_nic')
        self.directors_nic = attributes[:'directors_nic']
      end

      if attributes.key?(:'tax_wk_of_appt_of_director')
        self.tax_wk_of_appt_of_director = attributes[:'tax_wk_of_appt_of_director']
      end

      if attributes.key?(:'starter')
        self.starter = attributes[:'starter']
      end

      if attributes.key?(:'pay_id')
        self.pay_id = attributes[:'pay_id']
      end

      if attributes.key?(:'pay_id_chgd')
        self.pay_id_chgd = attributes[:'pay_id_chgd']
      end

      if attributes.key?(:'payment_to_a_non_individual')
        self.payment_to_a_non_individual = attributes[:'payment_to_a_non_individual']
      end

      if attributes.key?(:'irr_emp')
        self.irr_emp = attributes[:'irr_emp']
      end

      if attributes.key?(:'leaving_date')
        self.leaving_date = attributes[:'leaving_date']
      end

      if attributes.key?(:'figures_to_date')
        self.figures_to_date = attributes[:'figures_to_date']
      end

      if attributes.key?(:'payment')
        self.payment = attributes[:'payment']
      end

      if attributes.key?(:'n_iletters_and_values')
        if (value = attributes[:'n_iletters_and_values']).is_a?(Array)
          self.n_iletters_and_values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          employee_current_ni_letter == o.employee_current_ni_letter &&
          off_payroll_worker == o.off_payroll_worker &&
          occ_pen_ind == o.occ_pen_ind &&
          directors_nic == o.directors_nic &&
          tax_wk_of_appt_of_director == o.tax_wk_of_appt_of_director &&
          starter == o.starter &&
          pay_id == o.pay_id &&
          pay_id_chgd == o.pay_id_chgd &&
          payment_to_a_non_individual == o.payment_to_a_non_individual &&
          irr_emp == o.irr_emp &&
          leaving_date == o.leaving_date &&
          figures_to_date == o.figures_to_date &&
          payment == o.payment &&
          n_iletters_and_values == o.n_iletters_and_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [employee_current_ni_letter, off_payroll_worker, occ_pen_ind, directors_nic, tax_wk_of_appt_of_director, starter, pay_id, pay_id_chgd, payment_to_a_non_individual, irr_emp, leaving_date, figures_to_date, payment, n_iletters_and_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
