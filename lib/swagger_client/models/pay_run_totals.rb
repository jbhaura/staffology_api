=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Used to represent totals for a PayRun or PayRunEntry.\\n  If a value is 0 then it will not be shown in the JSON.
  class PayRunTotals
    # [readonly] The amount to be paid to this Employee as a result of the PayOptions that have been set
    attr_accessor :basic_pay

    # [readonly] Gross pay
    attr_accessor :gross

    # [readonly] The amount of the Gross that is subject to NI
    attr_accessor :gross_for_ni

    # [readonly] The amount of the Gross that is subject to PAYE
    attr_accessor :gross_for_tax

    # [readonly]
    attr_accessor :employer_ni

    # [readonly]
    attr_accessor :employee_ni

    # [readonly] The amount included in EmployerNi that is in relation to Off-Payroll Workers
    attr_accessor :employer_ni_off_payroll

    # [readonly]
    attr_accessor :real_time_class1_a_ni

    # [readonly]
    attr_accessor :tax

    # [readonly] The Net Pay for this Employee
    attr_accessor :net_pay

    # [readonly] The value of adjustments made to the Net Pay (Non taxable/NIable additions/deductions)
    attr_accessor :adjustments

    # The value of all additions.  This minus Deductions should equal TakeHomePay
    attr_accessor :additions

    # The value of all deductions.  Additions minus This value should equal TakeHomePay
    attr_accessor :deductions

    # [readonly] The amount this Employee takes home
    attr_accessor :take_home_pay

    # [readonly] The value of any payments being made to this Employee that aren't being subjected to PAYE or NI
    attr_accessor :non_tax_or_nic_pmt

    # [readonly] Items subject to Class 1 NIC but not taxed under PAYE regulations excluding pension contributions
    attr_accessor :items_subject_to_class1_nic

    # [readonly] The value of any deductions being made to the Net Pay for this Employee
    attr_accessor :dedns_from_net_pay

    # [readonly] Value of payments marked as Trivial Commutation Payment (A - TCLS)
    attr_accessor :tcp_tcls

    # [readonly] Value of payments marked as Trivial Commutation Payment (B - Personal Pension)
    attr_accessor :tcp_pp

    # [readonly] Value of payments marked as Trivial Commutation Payment (C - Occupational Pension)
    attr_accessor :tcp_op

    # [readonly] Value of payments marked as flexibly accessing death benefit (taxable)
    attr_accessor :flexi_dd_death

    # [readonly] Value of payments marked as flexibly accessing death benefit (non taxable)
    attr_accessor :flexi_dd_death_non_tax

    # [readonly] Value of payments marked as flexibly accessing pension (taxable)
    attr_accessor :flexi_dd_pension

    # [readonly] Value of payments marked as flexibly accessing pension (non taxable)
    attr_accessor :flexi_dd_pension_non_tax

    # [readonly] Statutory Maternity Pay
    attr_accessor :smp

    # [readonly] Statutory Paternity Pay
    attr_accessor :spp

    # [readonly] Statutory Adoption Pay
    attr_accessor :sap

    # [readonly] Statutory Shared Parental Pay
    attr_accessor :shpp

    # [readonly] Statutory Parental Bereavement Pay
    attr_accessor :spbp

    # [readonly] Statutory Sick  Pay
    attr_accessor :ssp

    # [readonly]
    attr_accessor :student_loan_recovered

    # [readonly]
    attr_accessor :postgrad_loan_recovered

    # [readonly] The amount of the Gross that is subject to Pension Deductions.\\n  If the Pension Scheme uses Qualifying Earnings (upper and lower limits) then this value is before those are applied
    attr_accessor :pensionable_earnings

    # [readonly] The amount of the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.
    attr_accessor :pensionable_pay

    # [readonly] The value of any pay that shouldn't count towards determining a pension tier.
    attr_accessor :non_tierable_pay

    # [readonly] The value of the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
    attr_accessor :employee_pension_contribution

    # [readonly] The value of the Pension Contribution being made by this Employee as an Additional Voluntary Contribution
    attr_accessor :employee_pension_contribution_avc

    # [readonly] The value of the Pension Contribution being made by the Employer for this Employee
    attr_accessor :employer_pension_contribution

    # [readonly] Value of employee pension contributions that are not paid under 'net pay arrangements', including any AVC
    attr_accessor :empee_pen_contribns_not_paid

    # [readonly] Value of employee pension contributions paid under 'net pay arrangements', including any AVC
    attr_accessor :empee_pen_contribns_paid

    # [readonly] Value of deductions made due to AttachmentOrders
    attr_accessor :attachment_order_deductions

    # [readonly] Value of any CIS Deduction made
    attr_accessor :cis_deduction

    # [readonly] Value of any VAT paid to CIS Subcontractor
    attr_accessor :cis_vat

    # [readonly] Value of any pre-tax fee charged to the CIS Subcontractor for processing the payment
    attr_accessor :cis_umbrella_fee

    # [readonly] Value of any post-tax fee charged to the CIS Subcontractor for processing the payment
    attr_accessor :cis_umbrella_fee_post_tax

    # [readonly] Value of any Payrolled Benefits In Kind
    attr_accessor :pbik

    # [readonly] The number of miles paid for Mileage Allowance Payments
    attr_accessor :maps_miles

    # [readonly] Value of any Umbrella fee charged for processing the payment
    attr_accessor :umbrella_fee

    # [readonly] Value of any Apprenticeship Levy fee deducted for processing the umbrella payment
    attr_accessor :app_levy_deduction

    # [readonly] Payment After Leaving
    attr_accessor :payment_after_leaving

    # [readonly] Tax On Payment After Leaving
    attr_accessor :tax_on_payment_after_leaving

    # [readonly] The number of employees with NilPaid on the PayRun
    attr_accessor :nil_paid

    # [readonly] The number of Leavers on ths PayRun
    attr_accessor :leavers

    # [readonly] The number of Starters on this PayRun
    attr_accessor :starters

    attr_accessor :total_cost

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'basic_pay' => :'basicPay',
        :'gross' => :'gross',
        :'gross_for_ni' => :'grossForNi',
        :'gross_for_tax' => :'grossForTax',
        :'employer_ni' => :'employerNi',
        :'employee_ni' => :'employeeNi',
        :'employer_ni_off_payroll' => :'employerNiOffPayroll',
        :'real_time_class1_a_ni' => :'realTimeClass1ANi',
        :'tax' => :'tax',
        :'net_pay' => :'netPay',
        :'adjustments' => :'adjustments',
        :'additions' => :'additions',
        :'deductions' => :'deductions',
        :'take_home_pay' => :'takeHomePay',
        :'non_tax_or_nic_pmt' => :'nonTaxOrNICPmt',
        :'items_subject_to_class1_nic' => :'itemsSubjectToClass1NIC',
        :'dedns_from_net_pay' => :'dednsFromNetPay',
        :'tcp_tcls' => :'tcp_Tcls',
        :'tcp_pp' => :'tcp_Pp',
        :'tcp_op' => :'tcp_Op',
        :'flexi_dd_death' => :'flexiDd_Death',
        :'flexi_dd_death_non_tax' => :'flexiDd_Death_NonTax',
        :'flexi_dd_pension' => :'flexiDd_Pension',
        :'flexi_dd_pension_non_tax' => :'flexiDd_Pension_NonTax',
        :'smp' => :'smp',
        :'spp' => :'spp',
        :'sap' => :'sap',
        :'shpp' => :'shpp',
        :'spbp' => :'spbp',
        :'ssp' => :'ssp',
        :'student_loan_recovered' => :'studentLoanRecovered',
        :'postgrad_loan_recovered' => :'postgradLoanRecovered',
        :'pensionable_earnings' => :'pensionableEarnings',
        :'pensionable_pay' => :'pensionablePay',
        :'non_tierable_pay' => :'nonTierablePay',
        :'employee_pension_contribution' => :'employeePensionContribution',
        :'employee_pension_contribution_avc' => :'employeePensionContributionAvc',
        :'employer_pension_contribution' => :'employerPensionContribution',
        :'empee_pen_contribns_not_paid' => :'empeePenContribnsNotPaid',
        :'empee_pen_contribns_paid' => :'empeePenContribnsPaid',
        :'attachment_order_deductions' => :'attachmentOrderDeductions',
        :'cis_deduction' => :'cisDeduction',
        :'cis_vat' => :'cisVat',
        :'cis_umbrella_fee' => :'cisUmbrellaFee',
        :'cis_umbrella_fee_post_tax' => :'cisUmbrellaFeePostTax',
        :'pbik' => :'pbik',
        :'maps_miles' => :'mapsMiles',
        :'umbrella_fee' => :'umbrellaFee',
        :'app_levy_deduction' => :'appLevyDeduction',
        :'payment_after_leaving' => :'paymentAfterLeaving',
        :'tax_on_payment_after_leaving' => :'taxOnPaymentAfterLeaving',
        :'nil_paid' => :'nilPaid',
        :'leavers' => :'leavers',
        :'starters' => :'starters',
        :'total_cost' => :'totalCost'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'basic_pay' => :'Object',
        :'gross' => :'Object',
        :'gross_for_ni' => :'Object',
        :'gross_for_tax' => :'Object',
        :'employer_ni' => :'Object',
        :'employee_ni' => :'Object',
        :'employer_ni_off_payroll' => :'Object',
        :'real_time_class1_a_ni' => :'Object',
        :'tax' => :'Object',
        :'net_pay' => :'Object',
        :'adjustments' => :'Object',
        :'additions' => :'Object',
        :'deductions' => :'Object',
        :'take_home_pay' => :'Object',
        :'non_tax_or_nic_pmt' => :'Object',
        :'items_subject_to_class1_nic' => :'Object',
        :'dedns_from_net_pay' => :'Object',
        :'tcp_tcls' => :'Object',
        :'tcp_pp' => :'Object',
        :'tcp_op' => :'Object',
        :'flexi_dd_death' => :'Object',
        :'flexi_dd_death_non_tax' => :'Object',
        :'flexi_dd_pension' => :'Object',
        :'flexi_dd_pension_non_tax' => :'Object',
        :'smp' => :'Object',
        :'spp' => :'Object',
        :'sap' => :'Object',
        :'shpp' => :'Object',
        :'spbp' => :'Object',
        :'ssp' => :'Object',
        :'student_loan_recovered' => :'Object',
        :'postgrad_loan_recovered' => :'Object',
        :'pensionable_earnings' => :'Object',
        :'pensionable_pay' => :'Object',
        :'non_tierable_pay' => :'Object',
        :'employee_pension_contribution' => :'Object',
        :'employee_pension_contribution_avc' => :'Object',
        :'employer_pension_contribution' => :'Object',
        :'empee_pen_contribns_not_paid' => :'Object',
        :'empee_pen_contribns_paid' => :'Object',
        :'attachment_order_deductions' => :'Object',
        :'cis_deduction' => :'Object',
        :'cis_vat' => :'Object',
        :'cis_umbrella_fee' => :'Object',
        :'cis_umbrella_fee_post_tax' => :'Object',
        :'pbik' => :'Object',
        :'maps_miles' => :'Object',
        :'umbrella_fee' => :'Object',
        :'app_levy_deduction' => :'Object',
        :'payment_after_leaving' => :'Object',
        :'tax_on_payment_after_leaving' => :'Object',
        :'nil_paid' => :'Object',
        :'leavers' => :'Object',
        :'starters' => :'Object',
        :'total_cost' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PayRunTotals` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PayRunTotals`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'basic_pay')
        self.basic_pay = attributes[:'basic_pay']
      end

      if attributes.key?(:'gross')
        self.gross = attributes[:'gross']
      end

      if attributes.key?(:'gross_for_ni')
        self.gross_for_ni = attributes[:'gross_for_ni']
      end

      if attributes.key?(:'gross_for_tax')
        self.gross_for_tax = attributes[:'gross_for_tax']
      end

      if attributes.key?(:'employer_ni')
        self.employer_ni = attributes[:'employer_ni']
      end

      if attributes.key?(:'employee_ni')
        self.employee_ni = attributes[:'employee_ni']
      end

      if attributes.key?(:'employer_ni_off_payroll')
        self.employer_ni_off_payroll = attributes[:'employer_ni_off_payroll']
      end

      if attributes.key?(:'real_time_class1_a_ni')
        self.real_time_class1_a_ni = attributes[:'real_time_class1_a_ni']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'net_pay')
        self.net_pay = attributes[:'net_pay']
      end

      if attributes.key?(:'adjustments')
        self.adjustments = attributes[:'adjustments']
      end

      if attributes.key?(:'additions')
        self.additions = attributes[:'additions']
      end

      if attributes.key?(:'deductions')
        self.deductions = attributes[:'deductions']
      end

      if attributes.key?(:'take_home_pay')
        self.take_home_pay = attributes[:'take_home_pay']
      end

      if attributes.key?(:'non_tax_or_nic_pmt')
        self.non_tax_or_nic_pmt = attributes[:'non_tax_or_nic_pmt']
      end

      if attributes.key?(:'items_subject_to_class1_nic')
        self.items_subject_to_class1_nic = attributes[:'items_subject_to_class1_nic']
      end

      if attributes.key?(:'dedns_from_net_pay')
        self.dedns_from_net_pay = attributes[:'dedns_from_net_pay']
      end

      if attributes.key?(:'tcp_tcls')
        self.tcp_tcls = attributes[:'tcp_tcls']
      end

      if attributes.key?(:'tcp_pp')
        self.tcp_pp = attributes[:'tcp_pp']
      end

      if attributes.key?(:'tcp_op')
        self.tcp_op = attributes[:'tcp_op']
      end

      if attributes.key?(:'flexi_dd_death')
        self.flexi_dd_death = attributes[:'flexi_dd_death']
      end

      if attributes.key?(:'flexi_dd_death_non_tax')
        self.flexi_dd_death_non_tax = attributes[:'flexi_dd_death_non_tax']
      end

      if attributes.key?(:'flexi_dd_pension')
        self.flexi_dd_pension = attributes[:'flexi_dd_pension']
      end

      if attributes.key?(:'flexi_dd_pension_non_tax')
        self.flexi_dd_pension_non_tax = attributes[:'flexi_dd_pension_non_tax']
      end

      if attributes.key?(:'smp')
        self.smp = attributes[:'smp']
      end

      if attributes.key?(:'spp')
        self.spp = attributes[:'spp']
      end

      if attributes.key?(:'sap')
        self.sap = attributes[:'sap']
      end

      if attributes.key?(:'shpp')
        self.shpp = attributes[:'shpp']
      end

      if attributes.key?(:'spbp')
        self.spbp = attributes[:'spbp']
      end

      if attributes.key?(:'ssp')
        self.ssp = attributes[:'ssp']
      end

      if attributes.key?(:'student_loan_recovered')
        self.student_loan_recovered = attributes[:'student_loan_recovered']
      end

      if attributes.key?(:'postgrad_loan_recovered')
        self.postgrad_loan_recovered = attributes[:'postgrad_loan_recovered']
      end

      if attributes.key?(:'pensionable_earnings')
        self.pensionable_earnings = attributes[:'pensionable_earnings']
      end

      if attributes.key?(:'pensionable_pay')
        self.pensionable_pay = attributes[:'pensionable_pay']
      end

      if attributes.key?(:'non_tierable_pay')
        self.non_tierable_pay = attributes[:'non_tierable_pay']
      end

      if attributes.key?(:'employee_pension_contribution')
        self.employee_pension_contribution = attributes[:'employee_pension_contribution']
      end

      if attributes.key?(:'employee_pension_contribution_avc')
        self.employee_pension_contribution_avc = attributes[:'employee_pension_contribution_avc']
      end

      if attributes.key?(:'employer_pension_contribution')
        self.employer_pension_contribution = attributes[:'employer_pension_contribution']
      end

      if attributes.key?(:'empee_pen_contribns_not_paid')
        self.empee_pen_contribns_not_paid = attributes[:'empee_pen_contribns_not_paid']
      end

      if attributes.key?(:'empee_pen_contribns_paid')
        self.empee_pen_contribns_paid = attributes[:'empee_pen_contribns_paid']
      end

      if attributes.key?(:'attachment_order_deductions')
        self.attachment_order_deductions = attributes[:'attachment_order_deductions']
      end

      if attributes.key?(:'cis_deduction')
        self.cis_deduction = attributes[:'cis_deduction']
      end

      if attributes.key?(:'cis_vat')
        self.cis_vat = attributes[:'cis_vat']
      end

      if attributes.key?(:'cis_umbrella_fee')
        self.cis_umbrella_fee = attributes[:'cis_umbrella_fee']
      end

      if attributes.key?(:'cis_umbrella_fee_post_tax')
        self.cis_umbrella_fee_post_tax = attributes[:'cis_umbrella_fee_post_tax']
      end

      if attributes.key?(:'pbik')
        self.pbik = attributes[:'pbik']
      end

      if attributes.key?(:'maps_miles')
        self.maps_miles = attributes[:'maps_miles']
      end

      if attributes.key?(:'umbrella_fee')
        self.umbrella_fee = attributes[:'umbrella_fee']
      end

      if attributes.key?(:'app_levy_deduction')
        self.app_levy_deduction = attributes[:'app_levy_deduction']
      end

      if attributes.key?(:'payment_after_leaving')
        self.payment_after_leaving = attributes[:'payment_after_leaving']
      end

      if attributes.key?(:'tax_on_payment_after_leaving')
        self.tax_on_payment_after_leaving = attributes[:'tax_on_payment_after_leaving']
      end

      if attributes.key?(:'nil_paid')
        self.nil_paid = attributes[:'nil_paid']
      end

      if attributes.key?(:'leavers')
        self.leavers = attributes[:'leavers']
      end

      if attributes.key?(:'starters')
        self.starters = attributes[:'starters']
      end

      if attributes.key?(:'total_cost')
        self.total_cost = attributes[:'total_cost']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          basic_pay == o.basic_pay &&
          gross == o.gross &&
          gross_for_ni == o.gross_for_ni &&
          gross_for_tax == o.gross_for_tax &&
          employer_ni == o.employer_ni &&
          employee_ni == o.employee_ni &&
          employer_ni_off_payroll == o.employer_ni_off_payroll &&
          real_time_class1_a_ni == o.real_time_class1_a_ni &&
          tax == o.tax &&
          net_pay == o.net_pay &&
          adjustments == o.adjustments &&
          additions == o.additions &&
          deductions == o.deductions &&
          take_home_pay == o.take_home_pay &&
          non_tax_or_nic_pmt == o.non_tax_or_nic_pmt &&
          items_subject_to_class1_nic == o.items_subject_to_class1_nic &&
          dedns_from_net_pay == o.dedns_from_net_pay &&
          tcp_tcls == o.tcp_tcls &&
          tcp_pp == o.tcp_pp &&
          tcp_op == o.tcp_op &&
          flexi_dd_death == o.flexi_dd_death &&
          flexi_dd_death_non_tax == o.flexi_dd_death_non_tax &&
          flexi_dd_pension == o.flexi_dd_pension &&
          flexi_dd_pension_non_tax == o.flexi_dd_pension_non_tax &&
          smp == o.smp &&
          spp == o.spp &&
          sap == o.sap &&
          shpp == o.shpp &&
          spbp == o.spbp &&
          ssp == o.ssp &&
          student_loan_recovered == o.student_loan_recovered &&
          postgrad_loan_recovered == o.postgrad_loan_recovered &&
          pensionable_earnings == o.pensionable_earnings &&
          pensionable_pay == o.pensionable_pay &&
          non_tierable_pay == o.non_tierable_pay &&
          employee_pension_contribution == o.employee_pension_contribution &&
          employee_pension_contribution_avc == o.employee_pension_contribution_avc &&
          employer_pension_contribution == o.employer_pension_contribution &&
          empee_pen_contribns_not_paid == o.empee_pen_contribns_not_paid &&
          empee_pen_contribns_paid == o.empee_pen_contribns_paid &&
          attachment_order_deductions == o.attachment_order_deductions &&
          cis_deduction == o.cis_deduction &&
          cis_vat == o.cis_vat &&
          cis_umbrella_fee == o.cis_umbrella_fee &&
          cis_umbrella_fee_post_tax == o.cis_umbrella_fee_post_tax &&
          pbik == o.pbik &&
          maps_miles == o.maps_miles &&
          umbrella_fee == o.umbrella_fee &&
          app_levy_deduction == o.app_levy_deduction &&
          payment_after_leaving == o.payment_after_leaving &&
          tax_on_payment_after_leaving == o.tax_on_payment_after_leaving &&
          nil_paid == o.nil_paid &&
          leavers == o.leavers &&
          starters == o.starters &&
          total_cost == o.total_cost
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [basic_pay, gross, gross_for_ni, gross_for_tax, employer_ni, employee_ni, employer_ni_off_payroll, real_time_class1_a_ni, tax, net_pay, adjustments, additions, deductions, take_home_pay, non_tax_or_nic_pmt, items_subject_to_class1_nic, dedns_from_net_pay, tcp_tcls, tcp_pp, tcp_op, flexi_dd_death, flexi_dd_death_non_tax, flexi_dd_pension, flexi_dd_pension_non_tax, smp, spp, sap, shpp, spbp, ssp, student_loan_recovered, postgrad_loan_recovered, pensionable_earnings, pensionable_pay, non_tierable_pay, employee_pension_contribution, employee_pension_contribution_avc, employer_pension_contribution, empee_pen_contribns_not_paid, empee_pen_contribns_paid, attachment_order_deductions, cis_deduction, cis_vat, cis_umbrella_fee, cis_umbrella_fee_post_tax, pbik, maps_miles, umbrella_fee, app_levy_deduction, payment_after_leaving, tax_on_payment_after_leaving, nil_paid, leavers, starters, total_cost].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
