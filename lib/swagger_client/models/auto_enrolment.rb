=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class AutoEnrolment
    attr_accessor :state

    # [readonly]
    attr_accessor :state_date

    attr_accessor :uk_worker

    # The number of days, if any, to defer assessment of this employee.\\n  You're allowed to defer assessment of new employees by up to 3 months.\\n
    attr_accessor :days_to_defer_assessment

    # [readonly] If a value is present, then employee wont be enrolled on an AE Pension until after this date.  This is automatically set to a date if the employee is deemed to be an EligibleJobHolder, but the employer has set a Postponement period and this value is currently null  This is automatically set to null if it already has a value and the employee is deemed NOT to be an EligibleJobHolder - ie, they previously qualified but now do not.
    attr_accessor :postponement_date

    # If set to true then the value in DaysToDeferAssessment will be treated as a number of months, not a number of days
    attr_accessor :defer_by_months_not_days

    attr_accessor :exempt

    attr_accessor :ae_exclusion_code

    attr_accessor :ae_postponement_letter_sent

    attr_accessor :last_assessment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state' => :'state',
        :'state_date' => :'stateDate',
        :'uk_worker' => :'ukWorker',
        :'days_to_defer_assessment' => :'daysToDeferAssessment',
        :'postponement_date' => :'postponementDate',
        :'defer_by_months_not_days' => :'deferByMonthsNotDays',
        :'exempt' => :'exempt',
        :'ae_exclusion_code' => :'aeExclusionCode',
        :'ae_postponement_letter_sent' => :'aePostponementLetterSent',
        :'last_assessment' => :'lastAssessment'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'state' => :'Object',
        :'state_date' => :'Object',
        :'uk_worker' => :'Object',
        :'days_to_defer_assessment' => :'Object',
        :'postponement_date' => :'Object',
        :'defer_by_months_not_days' => :'Object',
        :'exempt' => :'Object',
        :'ae_exclusion_code' => :'Object',
        :'ae_postponement_letter_sent' => :'Object',
        :'last_assessment' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'state_date',
        :'postponement_date',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AutoEnrolment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AutoEnrolment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'state_date')
        self.state_date = attributes[:'state_date']
      end

      if attributes.key?(:'uk_worker')
        self.uk_worker = attributes[:'uk_worker']
      end

      if attributes.key?(:'days_to_defer_assessment')
        self.days_to_defer_assessment = attributes[:'days_to_defer_assessment']
      end

      if attributes.key?(:'postponement_date')
        self.postponement_date = attributes[:'postponement_date']
      end

      if attributes.key?(:'defer_by_months_not_days')
        self.defer_by_months_not_days = attributes[:'defer_by_months_not_days']
      end

      if attributes.key?(:'exempt')
        self.exempt = attributes[:'exempt']
      end

      if attributes.key?(:'ae_exclusion_code')
        self.ae_exclusion_code = attributes[:'ae_exclusion_code']
      end

      if attributes.key?(:'ae_postponement_letter_sent')
        self.ae_postponement_letter_sent = attributes[:'ae_postponement_letter_sent']
      end

      if attributes.key?(:'last_assessment')
        self.last_assessment = attributes[:'last_assessment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state == o.state &&
          state_date == o.state_date &&
          uk_worker == o.uk_worker &&
          days_to_defer_assessment == o.days_to_defer_assessment &&
          postponement_date == o.postponement_date &&
          defer_by_months_not_days == o.defer_by_months_not_days &&
          exempt == o.exempt &&
          ae_exclusion_code == o.ae_exclusion_code &&
          ae_postponement_letter_sent == o.ae_postponement_letter_sent &&
          last_assessment == o.last_assessment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [state, state_date, uk_worker, days_to_defer_assessment, postponement_date, defer_by_months_not_days, exempt, ae_exclusion_code, ae_postponement_letter_sent, last_assessment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
