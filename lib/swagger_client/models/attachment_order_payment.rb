=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Used to represent a payment towards an Attachment of Earnings Order (AEO)
  class AttachmentOrderPayment
    attr_accessor :attachment_order

    attr_accessor :tax_year

    attr_accessor :pay_period

    # [readonly] The date this deduction was made
    attr_accessor :date

    # [readonly] Description of deduction, usually the reference from the AttachmentOrder
    attr_accessor :description

    # [readonly] The total Attachable pay for the Employee on this PayRun
    attr_accessor :attachable_pay

    # [readonly] The amount of the Attachable Pay that must be protected
    attr_accessor :protected_pay

    # [readonly] Deductions made on this PayRun for this employee due to  other higher priority AttachmentOrders
    attr_accessor :other_attachment_order_deductions

    # [readonly] The amount that should be deducted, if arrestable pay is available.  Not including any shortfall
    attr_accessor :desired_deduction

    # [readonly] Any shortfall (ie arrears) that existed before this PayRun.
    attr_accessor :shortfall

    # [readonly] Total amount paid to date, including this deduction.
    attr_accessor :total_paid

    # [readonly] The actual amount deducted
    attr_accessor :resulting_deduction

    # [readonly] The resulting shortfall (including any shortfall from previous periods
    attr_accessor :resulting_shortfall

    # [readonly] Any admin fee charged
    attr_accessor :admin_fee

    attr_accessor :employee

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'attachment_order' => :'attachmentOrder',
        :'tax_year' => :'taxYear',
        :'pay_period' => :'payPeriod',
        :'date' => :'date',
        :'description' => :'description',
        :'attachable_pay' => :'attachablePay',
        :'protected_pay' => :'protectedPay',
        :'other_attachment_order_deductions' => :'otherAttachmentOrderDeductions',
        :'desired_deduction' => :'desiredDeduction',
        :'shortfall' => :'shortfall',
        :'total_paid' => :'totalPaid',
        :'resulting_deduction' => :'resultingDeduction',
        :'resulting_shortfall' => :'resultingShortfall',
        :'admin_fee' => :'adminFee',
        :'employee' => :'employee',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'attachment_order' => :'Object',
        :'tax_year' => :'Object',
        :'pay_period' => :'Object',
        :'date' => :'Object',
        :'description' => :'Object',
        :'attachable_pay' => :'Object',
        :'protected_pay' => :'Object',
        :'other_attachment_order_deductions' => :'Object',
        :'desired_deduction' => :'Object',
        :'shortfall' => :'Object',
        :'total_paid' => :'Object',
        :'resulting_deduction' => :'Object',
        :'resulting_shortfall' => :'Object',
        :'admin_fee' => :'Object',
        :'employee' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AttachmentOrderPayment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AttachmentOrderPayment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'attachment_order')
        self.attachment_order = attributes[:'attachment_order']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'attachable_pay')
        self.attachable_pay = attributes[:'attachable_pay']
      end

      if attributes.key?(:'protected_pay')
        self.protected_pay = attributes[:'protected_pay']
      end

      if attributes.key?(:'other_attachment_order_deductions')
        self.other_attachment_order_deductions = attributes[:'other_attachment_order_deductions']
      end

      if attributes.key?(:'desired_deduction')
        self.desired_deduction = attributes[:'desired_deduction']
      end

      if attributes.key?(:'shortfall')
        self.shortfall = attributes[:'shortfall']
      end

      if attributes.key?(:'total_paid')
        self.total_paid = attributes[:'total_paid']
      end

      if attributes.key?(:'resulting_deduction')
        self.resulting_deduction = attributes[:'resulting_deduction']
      end

      if attributes.key?(:'resulting_shortfall')
        self.resulting_shortfall = attributes[:'resulting_shortfall']
      end

      if attributes.key?(:'admin_fee')
        self.admin_fee = attributes[:'admin_fee']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attachment_order == o.attachment_order &&
          tax_year == o.tax_year &&
          pay_period == o.pay_period &&
          date == o.date &&
          description == o.description &&
          attachable_pay == o.attachable_pay &&
          protected_pay == o.protected_pay &&
          other_attachment_order_deductions == o.other_attachment_order_deductions &&
          desired_deduction == o.desired_deduction &&
          shortfall == o.shortfall &&
          total_paid == o.total_paid &&
          resulting_deduction == o.resulting_deduction &&
          resulting_shortfall == o.resulting_shortfall &&
          admin_fee == o.admin_fee &&
          employee == o.employee &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [attachment_order, tax_year, pay_period, date, description, attachable_pay, protected_pay, other_attachment_order_deductions, desired_deduction, shortfall, total_paid, resulting_deduction, resulting_shortfall, admin_fee, employee, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
