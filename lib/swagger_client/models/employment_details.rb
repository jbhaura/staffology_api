=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class EmploymentDetails
    # Set to True if this Employee is a CIS Subcontractor. The <code>Cis</code> property contains further information
    attr_accessor :cis_sub_contractor

    # The Employees Payroll Code. Must be unique within the Employer.
    attr_accessor :payroll_code

    # Job Title of Primary post of the Employee
    attr_accessor :job_title

    # Set to true to temporarily exclude the employee from payruns
    attr_accessor :on_hold

    # Set to true if the employee is on furlough.
    attr_accessor :on_furlough

    # Furlough Start Date.
    attr_accessor :furlough_start

    # Furlough End Date.
    attr_accessor :furlough_end

    attr_accessor :furlough_calculation_basis

    attr_accessor :furlough_calculation_basis_amount

    # Set to true if the employee is partially furloughed.
    attr_accessor :partial_furlough

    attr_accessor :furlough_hours_normally_worked

    attr_accessor :furlough_hours_on_furlough

    # Set to True if this Employee is an apprentice. This affects the calculations for National Minimum Wage
    attr_accessor :is_apprentice

    # Used when calculating payments for Leave.\\n  If null then the default Working Pattern is used
    attr_accessor :working_pattern

    # If this property has a non-empty value then a change of Payroll code will be declared on the next FPS.
    attr_accessor :force_previous_payroll_code

    attr_accessor :starter_details

    attr_accessor :directorship_details

    attr_accessor :leaver_details

    attr_accessor :cis

    attr_accessor :department

    # List of Posts held by Employee
    attr_accessor :posts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cis_sub_contractor' => :'cisSubContractor',
        :'payroll_code' => :'payrollCode',
        :'job_title' => :'jobTitle',
        :'on_hold' => :'onHold',
        :'on_furlough' => :'onFurlough',
        :'furlough_start' => :'furloughStart',
        :'furlough_end' => :'furloughEnd',
        :'furlough_calculation_basis' => :'furloughCalculationBasis',
        :'furlough_calculation_basis_amount' => :'furloughCalculationBasisAmount',
        :'partial_furlough' => :'partialFurlough',
        :'furlough_hours_normally_worked' => :'furloughHoursNormallyWorked',
        :'furlough_hours_on_furlough' => :'furloughHoursOnFurlough',
        :'is_apprentice' => :'isApprentice',
        :'working_pattern' => :'workingPattern',
        :'force_previous_payroll_code' => :'forcePreviousPayrollCode',
        :'starter_details' => :'starterDetails',
        :'directorship_details' => :'directorshipDetails',
        :'leaver_details' => :'leaverDetails',
        :'cis' => :'cis',
        :'department' => :'department',
        :'posts' => :'posts'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cis_sub_contractor' => :'Object',
        :'payroll_code' => :'Object',
        :'job_title' => :'Object',
        :'on_hold' => :'Object',
        :'on_furlough' => :'Object',
        :'furlough_start' => :'Object',
        :'furlough_end' => :'Object',
        :'furlough_calculation_basis' => :'Object',
        :'furlough_calculation_basis_amount' => :'Object',
        :'partial_furlough' => :'Object',
        :'furlough_hours_normally_worked' => :'Object',
        :'furlough_hours_on_furlough' => :'Object',
        :'is_apprentice' => :'Object',
        :'working_pattern' => :'Object',
        :'force_previous_payroll_code' => :'Object',
        :'starter_details' => :'Object',
        :'directorship_details' => :'Object',
        :'leaver_details' => :'Object',
        :'cis' => :'Object',
        :'department' => :'Object',
        :'posts' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'job_title',
        :'furlough_start',
        :'furlough_end',
        :'working_pattern',
        :'force_previous_payroll_code',
        :'posts'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::EmploymentDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::EmploymentDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cis_sub_contractor')
        self.cis_sub_contractor = attributes[:'cis_sub_contractor']
      end

      if attributes.key?(:'payroll_code')
        self.payroll_code = attributes[:'payroll_code']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'on_hold')
        self.on_hold = attributes[:'on_hold']
      end

      if attributes.key?(:'on_furlough')
        self.on_furlough = attributes[:'on_furlough']
      end

      if attributes.key?(:'furlough_start')
        self.furlough_start = attributes[:'furlough_start']
      end

      if attributes.key?(:'furlough_end')
        self.furlough_end = attributes[:'furlough_end']
      end

      if attributes.key?(:'furlough_calculation_basis')
        self.furlough_calculation_basis = attributes[:'furlough_calculation_basis']
      end

      if attributes.key?(:'furlough_calculation_basis_amount')
        self.furlough_calculation_basis_amount = attributes[:'furlough_calculation_basis_amount']
      end

      if attributes.key?(:'partial_furlough')
        self.partial_furlough = attributes[:'partial_furlough']
      end

      if attributes.key?(:'furlough_hours_normally_worked')
        self.furlough_hours_normally_worked = attributes[:'furlough_hours_normally_worked']
      end

      if attributes.key?(:'furlough_hours_on_furlough')
        self.furlough_hours_on_furlough = attributes[:'furlough_hours_on_furlough']
      end

      if attributes.key?(:'is_apprentice')
        self.is_apprentice = attributes[:'is_apprentice']
      end

      if attributes.key?(:'working_pattern')
        self.working_pattern = attributes[:'working_pattern']
      end

      if attributes.key?(:'force_previous_payroll_code')
        self.force_previous_payroll_code = attributes[:'force_previous_payroll_code']
      end

      if attributes.key?(:'starter_details')
        self.starter_details = attributes[:'starter_details']
      end

      if attributes.key?(:'directorship_details')
        self.directorship_details = attributes[:'directorship_details']
      end

      if attributes.key?(:'leaver_details')
        self.leaver_details = attributes[:'leaver_details']
      end

      if attributes.key?(:'cis')
        self.cis = attributes[:'cis']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'posts')
        if (value = attributes[:'posts']).is_a?(Array)
          self.posts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payroll_code.nil?
        invalid_properties.push('invalid value for "payroll_code", payroll_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payroll_code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cis_sub_contractor == o.cis_sub_contractor &&
          payroll_code == o.payroll_code &&
          job_title == o.job_title &&
          on_hold == o.on_hold &&
          on_furlough == o.on_furlough &&
          furlough_start == o.furlough_start &&
          furlough_end == o.furlough_end &&
          furlough_calculation_basis == o.furlough_calculation_basis &&
          furlough_calculation_basis_amount == o.furlough_calculation_basis_amount &&
          partial_furlough == o.partial_furlough &&
          furlough_hours_normally_worked == o.furlough_hours_normally_worked &&
          furlough_hours_on_furlough == o.furlough_hours_on_furlough &&
          is_apprentice == o.is_apprentice &&
          working_pattern == o.working_pattern &&
          force_previous_payroll_code == o.force_previous_payroll_code &&
          starter_details == o.starter_details &&
          directorship_details == o.directorship_details &&
          leaver_details == o.leaver_details &&
          cis == o.cis &&
          department == o.department &&
          posts == o.posts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cis_sub_contractor, payroll_code, job_title, on_hold, on_furlough, furlough_start, furlough_end, furlough_calculation_basis, furlough_calculation_basis_amount, partial_furlough, furlough_hours_normally_worked, furlough_hours_on_furlough, is_apprentice, working_pattern, force_previous_payroll_code, starter_details, directorship_details, leaver_details, cis, department, posts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
