=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class RtiSubmissionSettings
    attr_accessor :sender_type

    # The SenderId used to submit RTI documents to HMRC
    attr_accessor :sender_id

    # The Password used to submit RTI documents to HMRC
    attr_accessor :password

    # Whether or not to include Employees paid a zero amount on your FPS
    attr_accessor :exclude_nil_paid

    # [readonly] Whether or not the Bacs Cross Ref field is included on your FPS submissions\\n  This is automatically set to true if you use a bank payments CSV format that supports it  or set to false if not
    attr_accessor :include_hash_cross_ref

    # If set to true, we'll automatically send your FPS to HMRC whenever you finalise a PayRun
    attr_accessor :auto_submit_fps

    # Used for testing the RTI gateway. If set to true then the Document Type name will have \"-TIL\" appended to it
    attr_accessor :test_in_live

    # If set to true then your RTI documents will be sent to HMRCs test services instead of the live service
    attr_accessor :use_test_gateway

    # If a value is provided then it will be used as the timestamp on the RTI submission. This would normally only be used for testing purposes.
    attr_accessor :override_timestamp_value

    attr_accessor :contact

    attr_accessor :agent

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sender_type' => :'senderType',
        :'sender_id' => :'senderId',
        :'password' => :'password',
        :'exclude_nil_paid' => :'excludeNilPaid',
        :'include_hash_cross_ref' => :'includeHashCrossRef',
        :'auto_submit_fps' => :'autoSubmitFps',
        :'test_in_live' => :'testInLive',
        :'use_test_gateway' => :'useTestGateway',
        :'override_timestamp_value' => :'overrideTimestampValue',
        :'contact' => :'contact',
        :'agent' => :'agent',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sender_type' => :'Object',
        :'sender_id' => :'Object',
        :'password' => :'Object',
        :'exclude_nil_paid' => :'Object',
        :'include_hash_cross_ref' => :'Object',
        :'auto_submit_fps' => :'Object',
        :'test_in_live' => :'Object',
        :'use_test_gateway' => :'Object',
        :'override_timestamp_value' => :'Object',
        :'contact' => :'Object',
        :'agent' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'sender_id',
        :'password',
        :'override_timestamp_value',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::RtiSubmissionSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::RtiSubmissionSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sender_type')
        self.sender_type = attributes[:'sender_type']
      end

      if attributes.key?(:'sender_id')
        self.sender_id = attributes[:'sender_id']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'exclude_nil_paid')
        self.exclude_nil_paid = attributes[:'exclude_nil_paid']
      end

      if attributes.key?(:'include_hash_cross_ref')
        self.include_hash_cross_ref = attributes[:'include_hash_cross_ref']
      end

      if attributes.key?(:'auto_submit_fps')
        self.auto_submit_fps = attributes[:'auto_submit_fps']
      end

      if attributes.key?(:'test_in_live')
        self.test_in_live = attributes[:'test_in_live']
      end

      if attributes.key?(:'use_test_gateway')
        self.use_test_gateway = attributes[:'use_test_gateway']
      end

      if attributes.key?(:'override_timestamp_value')
        self.override_timestamp_value = attributes[:'override_timestamp_value']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'agent')
        self.agent = attributes[:'agent']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sender_type == o.sender_type &&
          sender_id == o.sender_id &&
          password == o.password &&
          exclude_nil_paid == o.exclude_nil_paid &&
          include_hash_cross_ref == o.include_hash_cross_ref &&
          auto_submit_fps == o.auto_submit_fps &&
          test_in_live == o.test_in_live &&
          use_test_gateway == o.use_test_gateway &&
          override_timestamp_value == o.override_timestamp_value &&
          contact == o.contact &&
          agent == o.agent &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sender_type, sender_id, password, exclude_nil_paid, include_hash_cross_ref, auto_submit_fps, test_in_live, use_test_gateway, override_timestamp_value, contact, agent, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
