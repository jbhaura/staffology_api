=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class FurloughReport
    attr_accessor :max_claim_per_employee

    attr_accessor :percentage_of_ni_and_pension_to_claim

    attr_accessor :govt_contrib_rate

    attr_accessor :company_name

    attr_accessor :employer_reference

    attr_accessor :company_crn

    attr_accessor :ct_utr

    attr_accessor :sa_utr

    attr_accessor :claim_period_start_date

    attr_accessor :claim_period_end_date

    attr_accessor :number_of_employees_being_furloughed

    attr_accessor :total_claim_amount

    attr_accessor :total_gross_pay

    attr_accessor :amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period

    attr_accessor :amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees

    attr_accessor :amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees

    attr_accessor :lines

    attr_accessor :bank_account_number

    attr_accessor :bank_sort_code

    attr_accessor :bank_account_holders_first_name

    attr_accessor :bank_account_holders_last_name

    attr_accessor :bank_account_holders_address

    attr_accessor :building_society_roll_number

    attr_accessor :company_address

    attr_accessor :contact_name

    attr_accessor :contact_number

    attr_accessor :employer

    attr_accessor :pay_period

    attr_accessor :ordinal

    attr_accessor :period

    attr_accessor :period_to

    attr_accessor :start_period_name

    attr_accessor :end_period_name

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :report

    attr_accessor :tax_year

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'max_claim_per_employee' => :'maxClaimPerEmployee',
        :'percentage_of_ni_and_pension_to_claim' => :'percentageOfNIAndPensionToClaim',
        :'govt_contrib_rate' => :'govtContribRate',
        :'company_name' => :'companyName',
        :'employer_reference' => :'employerReference',
        :'company_crn' => :'companyCrn',
        :'ct_utr' => :'ctUtr',
        :'sa_utr' => :'saUtr',
        :'claim_period_start_date' => :'claimPeriodStartDate',
        :'claim_period_end_date' => :'claimPeriodEndDate',
        :'number_of_employees_being_furloughed' => :'numberOfEmployeesBeingFurloughed',
        :'total_claim_amount' => :'totalClaimAmount',
        :'total_gross_pay' => :'totalGrossPay',
        :'amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period' => :'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod',
        :'amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees' => :'amountClaimedForEmployerNICsContributionsForFurloughedEmployees',
        :'amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees' => :'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees',
        :'lines' => :'lines',
        :'bank_account_number' => :'bankAccountNumber',
        :'bank_sort_code' => :'bankSortCode',
        :'bank_account_holders_first_name' => :'bankAccountHoldersFirstName',
        :'bank_account_holders_last_name' => :'bankAccountHoldersLastName',
        :'bank_account_holders_address' => :'bankAccountHoldersAddress',
        :'building_society_roll_number' => :'buildingSocietyRollNumber',
        :'company_address' => :'companyAddress',
        :'contact_name' => :'contactName',
        :'contact_number' => :'contactNumber',
        :'employer' => :'employer',
        :'pay_period' => :'payPeriod',
        :'ordinal' => :'ordinal',
        :'period' => :'period',
        :'period_to' => :'periodTo',
        :'start_period_name' => :'startPeriodName',
        :'end_period_name' => :'endPeriodName',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'report' => :'report',
        :'tax_year' => :'taxYear'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'max_claim_per_employee' => :'Object',
        :'percentage_of_ni_and_pension_to_claim' => :'Object',
        :'govt_contrib_rate' => :'Object',
        :'company_name' => :'Object',
        :'employer_reference' => :'Object',
        :'company_crn' => :'Object',
        :'ct_utr' => :'Object',
        :'sa_utr' => :'Object',
        :'claim_period_start_date' => :'Object',
        :'claim_period_end_date' => :'Object',
        :'number_of_employees_being_furloughed' => :'Object',
        :'total_claim_amount' => :'Object',
        :'total_gross_pay' => :'Object',
        :'amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period' => :'Object',
        :'amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees' => :'Object',
        :'amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees' => :'Object',
        :'lines' => :'Object',
        :'bank_account_number' => :'Object',
        :'bank_sort_code' => :'Object',
        :'bank_account_holders_first_name' => :'Object',
        :'bank_account_holders_last_name' => :'Object',
        :'bank_account_holders_address' => :'Object',
        :'building_society_roll_number' => :'Object',
        :'company_address' => :'Object',
        :'contact_name' => :'Object',
        :'contact_number' => :'Object',
        :'employer' => :'Object',
        :'pay_period' => :'Object',
        :'ordinal' => :'Object',
        :'period' => :'Object',
        :'period_to' => :'Object',
        :'start_period_name' => :'Object',
        :'end_period_name' => :'Object',
        :'start_date' => :'Object',
        :'end_date' => :'Object',
        :'report' => :'Object',
        :'tax_year' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'company_name',
        :'employer_reference',
        :'company_crn',
        :'ct_utr',
        :'sa_utr',
        :'lines',
        :'bank_account_number',
        :'bank_sort_code',
        :'bank_account_holders_first_name',
        :'bank_account_holders_last_name',
        :'bank_account_holders_address',
        :'building_society_roll_number',
        :'company_address',
        :'contact_name',
        :'contact_number',
        :'start_period_name',
        :'end_period_name',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::FurloughReport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::FurloughReport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'max_claim_per_employee')
        self.max_claim_per_employee = attributes[:'max_claim_per_employee']
      end

      if attributes.key?(:'percentage_of_ni_and_pension_to_claim')
        self.percentage_of_ni_and_pension_to_claim = attributes[:'percentage_of_ni_and_pension_to_claim']
      end

      if attributes.key?(:'govt_contrib_rate')
        self.govt_contrib_rate = attributes[:'govt_contrib_rate']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'employer_reference')
        self.employer_reference = attributes[:'employer_reference']
      end

      if attributes.key?(:'company_crn')
        self.company_crn = attributes[:'company_crn']
      end

      if attributes.key?(:'ct_utr')
        self.ct_utr = attributes[:'ct_utr']
      end

      if attributes.key?(:'sa_utr')
        self.sa_utr = attributes[:'sa_utr']
      end

      if attributes.key?(:'claim_period_start_date')
        self.claim_period_start_date = attributes[:'claim_period_start_date']
      end

      if attributes.key?(:'claim_period_end_date')
        self.claim_period_end_date = attributes[:'claim_period_end_date']
      end

      if attributes.key?(:'number_of_employees_being_furloughed')
        self.number_of_employees_being_furloughed = attributes[:'number_of_employees_being_furloughed']
      end

      if attributes.key?(:'total_claim_amount')
        self.total_claim_amount = attributes[:'total_claim_amount']
      end

      if attributes.key?(:'total_gross_pay')
        self.total_gross_pay = attributes[:'total_gross_pay']
      end

      if attributes.key?(:'amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period')
        self.amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period = attributes[:'amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period']
      end

      if attributes.key?(:'amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees')
        self.amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees = attributes[:'amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees']
      end

      if attributes.key?(:'amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees')
        self.amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees = attributes[:'amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees']
      end

      if attributes.key?(:'lines')
        if (value = attributes[:'lines']).is_a?(Array)
          self.lines = value
        end
      end

      if attributes.key?(:'bank_account_number')
        self.bank_account_number = attributes[:'bank_account_number']
      end

      if attributes.key?(:'bank_sort_code')
        self.bank_sort_code = attributes[:'bank_sort_code']
      end

      if attributes.key?(:'bank_account_holders_first_name')
        self.bank_account_holders_first_name = attributes[:'bank_account_holders_first_name']
      end

      if attributes.key?(:'bank_account_holders_last_name')
        self.bank_account_holders_last_name = attributes[:'bank_account_holders_last_name']
      end

      if attributes.key?(:'bank_account_holders_address')
        self.bank_account_holders_address = attributes[:'bank_account_holders_address']
      end

      if attributes.key?(:'building_society_roll_number')
        self.building_society_roll_number = attributes[:'building_society_roll_number']
      end

      if attributes.key?(:'company_address')
        self.company_address = attributes[:'company_address']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_number')
        self.contact_number = attributes[:'contact_number']
      end

      if attributes.key?(:'employer')
        self.employer = attributes[:'employer']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'period_to')
        self.period_to = attributes[:'period_to']
      end

      if attributes.key?(:'start_period_name')
        self.start_period_name = attributes[:'start_period_name']
      end

      if attributes.key?(:'end_period_name')
        self.end_period_name = attributes[:'end_period_name']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'report')
        self.report = attributes[:'report']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_claim_per_employee == o.max_claim_per_employee &&
          percentage_of_ni_and_pension_to_claim == o.percentage_of_ni_and_pension_to_claim &&
          govt_contrib_rate == o.govt_contrib_rate &&
          company_name == o.company_name &&
          employer_reference == o.employer_reference &&
          company_crn == o.company_crn &&
          ct_utr == o.ct_utr &&
          sa_utr == o.sa_utr &&
          claim_period_start_date == o.claim_period_start_date &&
          claim_period_end_date == o.claim_period_end_date &&
          number_of_employees_being_furloughed == o.number_of_employees_being_furloughed &&
          total_claim_amount == o.total_claim_amount &&
          total_gross_pay == o.total_gross_pay &&
          amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period == o.amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period &&
          amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees == o.amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees &&
          amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees == o.amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees &&
          lines == o.lines &&
          bank_account_number == o.bank_account_number &&
          bank_sort_code == o.bank_sort_code &&
          bank_account_holders_first_name == o.bank_account_holders_first_name &&
          bank_account_holders_last_name == o.bank_account_holders_last_name &&
          bank_account_holders_address == o.bank_account_holders_address &&
          building_society_roll_number == o.building_society_roll_number &&
          company_address == o.company_address &&
          contact_name == o.contact_name &&
          contact_number == o.contact_number &&
          employer == o.employer &&
          pay_period == o.pay_period &&
          ordinal == o.ordinal &&
          period == o.period &&
          period_to == o.period_to &&
          start_period_name == o.start_period_name &&
          end_period_name == o.end_period_name &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          report == o.report &&
          tax_year == o.tax_year
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [max_claim_per_employee, percentage_of_ni_and_pension_to_claim, govt_contrib_rate, company_name, employer_reference, company_crn, ct_utr, sa_utr, claim_period_start_date, claim_period_end_date, number_of_employees_being_furloughed, total_claim_amount, total_gross_pay, amount_claimed_for_gross_pay_to_employees_on_furlough_for_the_period, amount_claimed_for_employer_ni_cs_contributions_for_furloughed_employees, amount_claimed_for_employers_auto_enrolment_pension_costs_for_furloughed_employees, lines, bank_account_number, bank_sort_code, bank_account_holders_first_name, bank_account_holders_last_name, bank_account_holders_address, building_society_roll_number, company_address, contact_name, contact_number, employer, pay_period, ordinal, period, period_to, start_period_name, end_period_name, start_date, end_date, report, tax_year].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
