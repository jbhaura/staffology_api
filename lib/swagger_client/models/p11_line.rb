=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Lines for the P11 Report
  class P11Line
    # [readonly]
    attr_accessor :date

    # [readonly]
    attr_accessor :period

    # [readonly]
    attr_accessor :gross_taxable_pay

    # [readonly]
    attr_accessor :gross_taxable_pay_ytd

    # [readonly]
    attr_accessor :tax

    # [readonly]
    attr_accessor :tax_ytd

    # [readonly]
    attr_accessor :smp_ytd

    # [readonly]
    attr_accessor :spp_ytd

    # [readonly]
    attr_accessor :sap_ytd

    # [readonly]
    attr_accessor :shpp_ytd

    # [readonly]
    attr_accessor :spbp_ytd

    # [readonly]
    attr_accessor :student_loan_ytd

    # [readonly]
    attr_accessor :postgrad_loan_ytd

    # [readonly]
    attr_accessor :ni_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date' => :'date',
        :'period' => :'period',
        :'gross_taxable_pay' => :'grossTaxablePay',
        :'gross_taxable_pay_ytd' => :'grossTaxablePayYTD',
        :'tax' => :'tax',
        :'tax_ytd' => :'taxYTD',
        :'smp_ytd' => :'smpYTD',
        :'spp_ytd' => :'sppYTD',
        :'sap_ytd' => :'sapYTD',
        :'shpp_ytd' => :'shppYTD',
        :'spbp_ytd' => :'spbpYTD',
        :'student_loan_ytd' => :'studentLoanYTD',
        :'postgrad_loan_ytd' => :'postgradLoanYTD',
        :'ni_values' => :'niValues'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'date' => :'Object',
        :'period' => :'Object',
        :'gross_taxable_pay' => :'Object',
        :'gross_taxable_pay_ytd' => :'Object',
        :'tax' => :'Object',
        :'tax_ytd' => :'Object',
        :'smp_ytd' => :'Object',
        :'spp_ytd' => :'Object',
        :'sap_ytd' => :'Object',
        :'shpp_ytd' => :'Object',
        :'spbp_ytd' => :'Object',
        :'student_loan_ytd' => :'Object',
        :'postgrad_loan_ytd' => :'Object',
        :'ni_values' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'period',
        :'ni_values'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::P11Line` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::P11Line`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'gross_taxable_pay')
        self.gross_taxable_pay = attributes[:'gross_taxable_pay']
      end

      if attributes.key?(:'gross_taxable_pay_ytd')
        self.gross_taxable_pay_ytd = attributes[:'gross_taxable_pay_ytd']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'tax_ytd')
        self.tax_ytd = attributes[:'tax_ytd']
      end

      if attributes.key?(:'smp_ytd')
        self.smp_ytd = attributes[:'smp_ytd']
      end

      if attributes.key?(:'spp_ytd')
        self.spp_ytd = attributes[:'spp_ytd']
      end

      if attributes.key?(:'sap_ytd')
        self.sap_ytd = attributes[:'sap_ytd']
      end

      if attributes.key?(:'shpp_ytd')
        self.shpp_ytd = attributes[:'shpp_ytd']
      end

      if attributes.key?(:'spbp_ytd')
        self.spbp_ytd = attributes[:'spbp_ytd']
      end

      if attributes.key?(:'student_loan_ytd')
        self.student_loan_ytd = attributes[:'student_loan_ytd']
      end

      if attributes.key?(:'postgrad_loan_ytd')
        self.postgrad_loan_ytd = attributes[:'postgrad_loan_ytd']
      end

      if attributes.key?(:'ni_values')
        if (value = attributes[:'ni_values']).is_a?(Array)
          self.ni_values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date == o.date &&
          period == o.period &&
          gross_taxable_pay == o.gross_taxable_pay &&
          gross_taxable_pay_ytd == o.gross_taxable_pay_ytd &&
          tax == o.tax &&
          tax_ytd == o.tax_ytd &&
          smp_ytd == o.smp_ytd &&
          spp_ytd == o.spp_ytd &&
          sap_ytd == o.sap_ytd &&
          shpp_ytd == o.shpp_ytd &&
          spbp_ytd == o.spbp_ytd &&
          student_loan_ytd == o.student_loan_ytd &&
          postgrad_loan_ytd == o.postgrad_loan_ytd &&
          ni_values == o.ni_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date, period, gross_taxable_pay, gross_taxable_pay_ytd, tax, tax_ytd, smp_ytd, spp_ytd, sap_ytd, shpp_ytd, spbp_ytd, student_loan_ytd, postgrad_loan_ytd, ni_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
