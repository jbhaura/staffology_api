=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Determines the settings used when the Employer sends emails.\\n  If CustomiseSmtpSettings is false then SmtpSettings will be null and our default internal settings will be used;
  class MailSettings
    attr_accessor :sender_name

    attr_accessor :sender_email

    # If set to true then the SenderEmail provided will only be used in the   ReplyTo fields. The system defaults will be used for the From address.
    attr_accessor :use_system_from_address

    # [readonly] The SenderEmail must be verified before you can send email using that address
    attr_accessor :sender_email_verified

    attr_accessor :customise_smtp_settings

    attr_accessor :smtp_settings

    attr_accessor :customise_html_email_settings

    attr_accessor :html_email_settings

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sender_name' => :'senderName',
        :'sender_email' => :'senderEmail',
        :'use_system_from_address' => :'useSystemFromAddress',
        :'sender_email_verified' => :'senderEmailVerified',
        :'customise_smtp_settings' => :'customiseSmtpSettings',
        :'smtp_settings' => :'smtpSettings',
        :'customise_html_email_settings' => :'customiseHtmlEmailSettings',
        :'html_email_settings' => :'htmlEmailSettings',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sender_name' => :'Object',
        :'sender_email' => :'Object',
        :'use_system_from_address' => :'Object',
        :'sender_email_verified' => :'Object',
        :'customise_smtp_settings' => :'Object',
        :'smtp_settings' => :'Object',
        :'customise_html_email_settings' => :'Object',
        :'html_email_settings' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::MailSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::MailSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      end

      if attributes.key?(:'sender_email')
        self.sender_email = attributes[:'sender_email']
      end

      if attributes.key?(:'use_system_from_address')
        self.use_system_from_address = attributes[:'use_system_from_address']
      end

      if attributes.key?(:'sender_email_verified')
        self.sender_email_verified = attributes[:'sender_email_verified']
      end

      if attributes.key?(:'customise_smtp_settings')
        self.customise_smtp_settings = attributes[:'customise_smtp_settings']
      end

      if attributes.key?(:'smtp_settings')
        self.smtp_settings = attributes[:'smtp_settings']
      end

      if attributes.key?(:'customise_html_email_settings')
        self.customise_html_email_settings = attributes[:'customise_html_email_settings']
      end

      if attributes.key?(:'html_email_settings')
        self.html_email_settings = attributes[:'html_email_settings']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sender_name.nil?
        invalid_properties.push('invalid value for "sender_name", sender_name cannot be nil.')
      end

      if @sender_email.nil?
        invalid_properties.push('invalid value for "sender_email", sender_email cannot be nil.')
      end

      if @customise_smtp_settings.nil?
        invalid_properties.push('invalid value for "customise_smtp_settings", customise_smtp_settings cannot be nil.')
      end

      if @customise_html_email_settings.nil?
        invalid_properties.push('invalid value for "customise_html_email_settings", customise_html_email_settings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sender_name.nil?
      return false if @sender_email.nil?
      return false if @customise_smtp_settings.nil?
      return false if @customise_html_email_settings.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sender_name == o.sender_name &&
          sender_email == o.sender_email &&
          use_system_from_address == o.use_system_from_address &&
          sender_email_verified == o.sender_email_verified &&
          customise_smtp_settings == o.customise_smtp_settings &&
          smtp_settings == o.smtp_settings &&
          customise_html_email_settings == o.customise_html_email_settings &&
          html_email_settings == o.html_email_settings &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sender_name, sender_email, use_system_from_address, sender_email_verified, customise_smtp_settings, smtp_settings, customise_html_email_settings, html_email_settings, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
