=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class PersonalDetails
    attr_accessor :address

    attr_accessor :marital_status

    attr_accessor :title

    attr_accessor :first_name

    attr_accessor :middle_name

    attr_accessor :last_name

    attr_accessor :email

    # If set to true then the employees Payslip will be sent by email when a PayRun is finalised.
    attr_accessor :email_payslip

    # If set to true then when a payslip is sent by email a password will be set on it.
    attr_accessor :password_protect_payslip

    # Set the password to be used on PDFs. If blank then we'll create a password based on the users name and date of birth.
    attr_accessor :pdf_password

    # Only applicable to CIS Subcontractors. If set to true then we will automatically email a CIS Statement when a CIS300 is accepted.
    attr_accessor :email_statement

    attr_accessor :photo_url

    attr_accessor :telephone

    attr_accessor :mobile

    attr_accessor :date_of_birth

    # [readonly] Automatically calculated.
    attr_accessor :state_pension_age

    attr_accessor :gender

    attr_accessor :ni_number

    attr_accessor :passport_number

    attr_accessor :partner_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'marital_status' => :'maritalStatus',
        :'title' => :'title',
        :'first_name' => :'firstName',
        :'middle_name' => :'middleName',
        :'last_name' => :'lastName',
        :'email' => :'email',
        :'email_payslip' => :'emailPayslip',
        :'password_protect_payslip' => :'passwordProtectPayslip',
        :'pdf_password' => :'pdfPassword',
        :'email_statement' => :'emailStatement',
        :'photo_url' => :'photoUrl',
        :'telephone' => :'telephone',
        :'mobile' => :'mobile',
        :'date_of_birth' => :'dateOfBirth',
        :'state_pension_age' => :'statePensionAge',
        :'gender' => :'gender',
        :'ni_number' => :'niNumber',
        :'passport_number' => :'passportNumber',
        :'partner_details' => :'partnerDetails'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address' => :'Object',
        :'marital_status' => :'Object',
        :'title' => :'Object',
        :'first_name' => :'Object',
        :'middle_name' => :'Object',
        :'last_name' => :'Object',
        :'email' => :'Object',
        :'email_payslip' => :'Object',
        :'password_protect_payslip' => :'Object',
        :'pdf_password' => :'Object',
        :'email_statement' => :'Object',
        :'photo_url' => :'Object',
        :'telephone' => :'Object',
        :'mobile' => :'Object',
        :'date_of_birth' => :'Object',
        :'state_pension_age' => :'Object',
        :'gender' => :'Object',
        :'ni_number' => :'Object',
        :'passport_number' => :'Object',
        :'partner_details' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'title',
        :'first_name',
        :'middle_name',
        :'last_name',
        :'email',
        :'pdf_password',
        :'photo_url',
        :'telephone',
        :'mobile',
        :'ni_number',
        :'passport_number',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PersonalDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PersonalDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_payslip')
        self.email_payslip = attributes[:'email_payslip']
      end

      if attributes.key?(:'password_protect_payslip')
        self.password_protect_payslip = attributes[:'password_protect_payslip']
      end

      if attributes.key?(:'pdf_password')
        self.pdf_password = attributes[:'pdf_password']
      end

      if attributes.key?(:'email_statement')
        self.email_statement = attributes[:'email_statement']
      end

      if attributes.key?(:'photo_url')
        self.photo_url = attributes[:'photo_url']
      end

      if attributes.key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'state_pension_age')
        self.state_pension_age = attributes[:'state_pension_age']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'ni_number')
        self.ni_number = attributes[:'ni_number']
      end

      if attributes.key?(:'passport_number')
        self.passport_number = attributes[:'passport_number']
      end

      if attributes.key?(:'partner_details')
        self.partner_details = attributes[:'partner_details']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @marital_status.nil?
        invalid_properties.push('invalid value for "marital_status", marital_status cannot be nil.')
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      if @gender.nil?
        invalid_properties.push('invalid value for "gender", gender cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @marital_status.nil?
      return false if @date_of_birth.nil?
      return false if @gender.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          marital_status == o.marital_status &&
          title == o.title &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name &&
          email == o.email &&
          email_payslip == o.email_payslip &&
          password_protect_payslip == o.password_protect_payslip &&
          pdf_password == o.pdf_password &&
          email_statement == o.email_statement &&
          photo_url == o.photo_url &&
          telephone == o.telephone &&
          mobile == o.mobile &&
          date_of_birth == o.date_of_birth &&
          state_pension_age == o.state_pension_age &&
          gender == o.gender &&
          ni_number == o.ni_number &&
          passport_number == o.passport_number &&
          partner_details == o.partner_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, marital_status, title, first_name, middle_name, last_name, email, email_payslip, password_protect_payslip, pdf_password, email_statement, photo_url, telephone, mobile, date_of_birth, state_pension_age, gender, ni_number, passport_number, partner_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
