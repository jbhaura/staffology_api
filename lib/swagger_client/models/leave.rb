=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Used to represent Leave, including Holiday and Statutory leave (such as Maternity Leave)
  class Leave
    attr_accessor :provider_id

    # If the Leave comes from an ExternalDataProvider, then this is its Id in the ExternalDataProvider
    attr_accessor :external_id

    attr_accessor :type

    attr_accessor :pay

    # The first day of Leave.\\n  If it's a half day PM then set the time portion to 12:00:00, otherwise leave it blank or set it to 00:00:00
    attr_accessor :from

    # The last day of Leave.\\n  If it's a half day AM then set the time portion to 11:59:59, otherwise set it to 23:59:59
    attr_accessor :to

    # A free-form text field to record any comments
    attr_accessor :notes

    # The employees average weekly earnings. Only relevant for Statutory Pay\\n  It's advised that you don't try to calculate this yourself.
    attr_accessor :average_weekly_earnings

    # If set to True then we'll automatically calculate the AverageWeeklyEarnings.   Set it to false if you want to manually provide a figure that overrides our calculations
    attr_accessor :automatic_awe_calculation

    # Only required for Parental Leave with Statutory Pay\\n  If Type is Maternity or Paternity then this is the date the baby is due.\\n  For Adoption Leave this is the Matching Date.
    attr_accessor :baby_date

    # If Pay is StatutoryPay and you want to override our description that goes with the payment then set this to true
    attr_accessor :override_payment_description

    # If OverridePaymentDescription is true and Pay is set to StatutoryPay then we'll use this as the description for the payment amount.
    attr_accessor :overriden_payment_description

    # [readonly] The number of working days covered by this leave.  This is calculated based on the employees Working Pattern.
    attr_accessor :working_days

    # [readonly] The number of days covered by this leave, regardless of whether or not they're working days.  This is calculated based on the employees Working Pattern.
    attr_accessor :total_days

    # If this Leave has Statutory Pay (and isn't for Sick) then if this is set to True  we will use the value set in AssumedPensionablePay to work out the employer pension contributions
    attr_accessor :use_assumed_pensionable_pay

    # if AssumedPensionablePay is True, then this is the value used to calculate the employer pension contributions
    attr_accessor :assumed_pensionable_pay

    # If this Leave has Statutory Pay  and this is set to True and the employe eis paid a fixed amoutn per period  with Leave Adjustments set to automatic, then we'll reduce their pay for the period by the statutory amount  so the employee still gets paid the full amount.
    attr_accessor :offset_pay

    # If this is Sick Leave with Statutory Pay then setting this to true  will force SSP to be paid from day one rather than the usual rule   of the first Working Day after 3 Qualifying Days
    attr_accessor :ssp_pay_from_day_one

    attr_accessor :linked_piw

    # If the LeaveType supports KIT/SPLIT days then use this property to store the list of dates
    attr_accessor :kit_split_days

    # [readonly] The number of attachments associated with this model
    attr_accessor :document_count

    # [readonly] The attachments associated with this model
    attr_accessor :documents

    attr_accessor :employee

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_id' => :'providerId',
        :'external_id' => :'externalId',
        :'type' => :'type',
        :'pay' => :'pay',
        :'from' => :'from',
        :'to' => :'to',
        :'notes' => :'notes',
        :'average_weekly_earnings' => :'averageWeeklyEarnings',
        :'automatic_awe_calculation' => :'automaticAWECalculation',
        :'baby_date' => :'babyDate',
        :'override_payment_description' => :'overridePaymentDescription',
        :'overriden_payment_description' => :'overridenPaymentDescription',
        :'working_days' => :'workingDays',
        :'total_days' => :'totalDays',
        :'use_assumed_pensionable_pay' => :'useAssumedPensionablePay',
        :'assumed_pensionable_pay' => :'assumedPensionablePay',
        :'offset_pay' => :'offsetPay',
        :'ssp_pay_from_day_one' => :'sspPayFromDayOne',
        :'linked_piw' => :'linkedPiw',
        :'kit_split_days' => :'kitSplitDays',
        :'document_count' => :'documentCount',
        :'documents' => :'documents',
        :'employee' => :'employee',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_id' => :'Object',
        :'external_id' => :'Object',
        :'type' => :'Object',
        :'pay' => :'Object',
        :'from' => :'Object',
        :'to' => :'Object',
        :'notes' => :'Object',
        :'average_weekly_earnings' => :'Object',
        :'automatic_awe_calculation' => :'Object',
        :'baby_date' => :'Object',
        :'override_payment_description' => :'Object',
        :'overriden_payment_description' => :'Object',
        :'working_days' => :'Object',
        :'total_days' => :'Object',
        :'use_assumed_pensionable_pay' => :'Object',
        :'assumed_pensionable_pay' => :'Object',
        :'offset_pay' => :'Object',
        :'ssp_pay_from_day_one' => :'Object',
        :'linked_piw' => :'Object',
        :'kit_split_days' => :'Object',
        :'document_count' => :'Object',
        :'documents' => :'Object',
        :'employee' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'external_id',
        :'notes',
        :'baby_date',
        :'overriden_payment_description',
        :'assumed_pensionable_pay',
        :'kit_split_days',
        :'documents',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Leave` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Leave`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'pay')
        self.pay = attributes[:'pay']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'average_weekly_earnings')
        self.average_weekly_earnings = attributes[:'average_weekly_earnings']
      end

      if attributes.key?(:'automatic_awe_calculation')
        self.automatic_awe_calculation = attributes[:'automatic_awe_calculation']
      end

      if attributes.key?(:'baby_date')
        self.baby_date = attributes[:'baby_date']
      end

      if attributes.key?(:'override_payment_description')
        self.override_payment_description = attributes[:'override_payment_description']
      end

      if attributes.key?(:'overriden_payment_description')
        self.overriden_payment_description = attributes[:'overriden_payment_description']
      end

      if attributes.key?(:'working_days')
        self.working_days = attributes[:'working_days']
      end

      if attributes.key?(:'total_days')
        self.total_days = attributes[:'total_days']
      end

      if attributes.key?(:'use_assumed_pensionable_pay')
        self.use_assumed_pensionable_pay = attributes[:'use_assumed_pensionable_pay']
      end

      if attributes.key?(:'assumed_pensionable_pay')
        self.assumed_pensionable_pay = attributes[:'assumed_pensionable_pay']
      end

      if attributes.key?(:'offset_pay')
        self.offset_pay = attributes[:'offset_pay']
      end

      if attributes.key?(:'ssp_pay_from_day_one')
        self.ssp_pay_from_day_one = attributes[:'ssp_pay_from_day_one']
      end

      if attributes.key?(:'linked_piw')
        self.linked_piw = attributes[:'linked_piw']
      end

      if attributes.key?(:'kit_split_days')
        if (value = attributes[:'kit_split_days']).is_a?(Array)
          self.kit_split_days = value
        end
      end

      if attributes.key?(:'document_count')
        self.document_count = attributes[:'document_count']
      end

      if attributes.key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_id == o.provider_id &&
          external_id == o.external_id &&
          type == o.type &&
          pay == o.pay &&
          from == o.from &&
          to == o.to &&
          notes == o.notes &&
          average_weekly_earnings == o.average_weekly_earnings &&
          automatic_awe_calculation == o.automatic_awe_calculation &&
          baby_date == o.baby_date &&
          override_payment_description == o.override_payment_description &&
          overriden_payment_description == o.overriden_payment_description &&
          working_days == o.working_days &&
          total_days == o.total_days &&
          use_assumed_pensionable_pay == o.use_assumed_pensionable_pay &&
          assumed_pensionable_pay == o.assumed_pensionable_pay &&
          offset_pay == o.offset_pay &&
          ssp_pay_from_day_one == o.ssp_pay_from_day_one &&
          linked_piw == o.linked_piw &&
          kit_split_days == o.kit_split_days &&
          document_count == o.document_count &&
          documents == o.documents &&
          employee == o.employee &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_id, external_id, type, pay, from, to, notes, average_weekly_earnings, automatic_awe_calculation, baby_date, override_payment_description, overriden_payment_description, working_days, total_days, use_assumed_pensionable_pay, assumed_pensionable_pay, offset_pay, ssp_pay_from_day_one, linked_piw, kit_split_days, document_count, documents, employee, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
