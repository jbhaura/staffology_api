=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class EmployerEmail
    attr_accessor :_status_message

    attr_accessor :to_name

    attr_accessor :to_email

    attr_accessor :subject

    attr_accessor :button_text

    attr_accessor :button_link

    attr_accessor :body_preview

    attr_accessor :body

    attr_accessor :after_btn_body

    attr_accessor :status

    attr_accessor :status_date

    attr_accessor :status_message

    attr_accessor :send_attempts

    attr_accessor :web_app_base_url

    attr_accessor :attachments

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_status_message' => :'_statusMessage',
        :'to_name' => :'toName',
        :'to_email' => :'toEmail',
        :'subject' => :'subject',
        :'button_text' => :'buttonText',
        :'button_link' => :'buttonLink',
        :'body_preview' => :'bodyPreview',
        :'body' => :'body',
        :'after_btn_body' => :'afterBtnBody',
        :'status' => :'status',
        :'status_date' => :'statusDate',
        :'status_message' => :'statusMessage',
        :'send_attempts' => :'sendAttempts',
        :'web_app_base_url' => :'webAppBaseUrl',
        :'attachments' => :'attachments',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_status_message' => :'Object',
        :'to_name' => :'Object',
        :'to_email' => :'Object',
        :'subject' => :'Object',
        :'button_text' => :'Object',
        :'button_link' => :'Object',
        :'body_preview' => :'Object',
        :'body' => :'Object',
        :'after_btn_body' => :'Object',
        :'status' => :'Object',
        :'status_date' => :'Object',
        :'status_message' => :'Object',
        :'send_attempts' => :'Object',
        :'web_app_base_url' => :'Object',
        :'attachments' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'_status_message',
        :'button_text',
        :'button_link',
        :'body_preview',
        :'body',
        :'after_btn_body',
        :'status_message',
        :'web_app_base_url',
        :'attachments',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::EmployerEmail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::EmployerEmail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_status_message')
        self._status_message = attributes[:'_status_message']
      end

      if attributes.key?(:'to_name')
        self.to_name = attributes[:'to_name']
      end

      if attributes.key?(:'to_email')
        self.to_email = attributes[:'to_email']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'button_text')
        self.button_text = attributes[:'button_text']
      end

      if attributes.key?(:'button_link')
        self.button_link = attributes[:'button_link']
      end

      if attributes.key?(:'body_preview')
        self.body_preview = attributes[:'body_preview']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'after_btn_body')
        self.after_btn_body = attributes[:'after_btn_body']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_date')
        self.status_date = attributes[:'status_date']
      end

      if attributes.key?(:'status_message')
        self.status_message = attributes[:'status_message']
      end

      if attributes.key?(:'send_attempts')
        self.send_attempts = attributes[:'send_attempts']
      end

      if attributes.key?(:'web_app_base_url')
        self.web_app_base_url = attributes[:'web_app_base_url']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @to_name.nil?
        invalid_properties.push('invalid value for "to_name", to_name cannot be nil.')
      end

      if @to_email.nil?
        invalid_properties.push('invalid value for "to_email", to_email cannot be nil.')
      end

      if @subject.nil?
        invalid_properties.push('invalid value for "subject", subject cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @to_name.nil?
      return false if @to_email.nil?
      return false if @subject.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _status_message == o._status_message &&
          to_name == o.to_name &&
          to_email == o.to_email &&
          subject == o.subject &&
          button_text == o.button_text &&
          button_link == o.button_link &&
          body_preview == o.body_preview &&
          body == o.body &&
          after_btn_body == o.after_btn_body &&
          status == o.status &&
          status_date == o.status_date &&
          status_message == o.status_message &&
          send_attempts == o.send_attempts &&
          web_app_base_url == o.web_app_base_url &&
          attachments == o.attachments &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_status_message, to_name, to_email, subject, button_text, button_link, body_preview, body, after_btn_body, status, status_date, status_message, send_attempts, web_app_base_url, attachments, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
