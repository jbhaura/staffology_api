=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Each PayLine has a Code. The Code will match the Code property of a PayCode.\\n  The PayCode that is used determines how the amount is treated with regards to tax, NI and pensions
  class PayCode
    attr_accessor :title

    attr_accessor :code

    # If a non-zero value is provided then when this code is selected in our UI the value will be automatically filled.
    attr_accessor :default_value

    # If set to true then a PayLine using this code will be treated as a deduction as opposed to an addition.
    attr_accessor :is_deduction

    # Determines whether or not the value of PayLines using this code should be taken into consideration when calculating National Insurance Contributions.
    attr_accessor :is_niable

    # Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the PAYE liability.
    attr_accessor :is_taxable

    # Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the total pensionable pay.
    attr_accessor :is_pensionable

    # Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the attachable pay for AttachmentOrders.
    attr_accessor :is_attachable

    # Determines whether or not the value of PayLines using this code are subject to real time Class 1A NIC.
    attr_accessor :is_real_time_class1a_niable

    # If true then any payments made using this code will not contribute towards holiday pay calculations.
    attr_accessor :is_not_contributing_to_holiday_pay

    # If true then any payments made using this code will be used as the basis for calculating QualifyingEarnings for AutoEnrolment assessments.\\n  If it is set to null then when it's next retrieved it'll have the same value as PensionablePay
    attr_accessor :is_qualifying_earnings_for_ae

    # If true then any payments made using this code will not be included when calculating the tier an employee should be on for a Tiered Pension.
    attr_accessor :is_not_tierable

    # If true then any payments made using this code will be reported as  a Trivial Commutation Payment (A - TCLS)
    attr_accessor :is_tcp_tcls

    # If true then any payments made using this code will be reported as  a Trivial Commutation Payment (B - Personal Pension)
    attr_accessor :is_tcp_pp

    # If true then any payments made using this code will be reported as  a Trivial Commutation Payment (C - Occupational Pension)
    attr_accessor :is_tcp_op

    # If true then any payments made using this code will be reported as  a Flexible Drawdown of Death Benefit
    attr_accessor :is_flexi_dd_death_benefit

    # If true then any payments made using this code will be reported as  a Flexible Drawdown flexibly accessing a pension
    attr_accessor :is_flexi_dd_pension

    attr_accessor :calculation_type

    attr_accessor :multiplier_type

    # If the MultiplierType is MultipleOfHourlyRate then this sets the multiple to be used, ie 1.5
    attr_accessor :hourly_rate_multiplier

    # [readonly] System Codes cannot be deleted or edited
    attr_accessor :is_system_code

    # [readonly] Control Codes cannot be deleted or edited nor can PayLines be assigned to them.
    attr_accessor :is_control_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'code' => :'code',
        :'default_value' => :'defaultValue',
        :'is_deduction' => :'isDeduction',
        :'is_niable' => :'isNiable',
        :'is_taxable' => :'isTaxable',
        :'is_pensionable' => :'isPensionable',
        :'is_attachable' => :'isAttachable',
        :'is_real_time_class1a_niable' => :'isRealTimeClass1aNiable',
        :'is_not_contributing_to_holiday_pay' => :'isNotContributingToHolidayPay',
        :'is_qualifying_earnings_for_ae' => :'isQualifyingEarningsForAe',
        :'is_not_tierable' => :'isNotTierable',
        :'is_tcp_tcls' => :'isTcp_Tcls',
        :'is_tcp_pp' => :'isTcp_Pp',
        :'is_tcp_op' => :'isTcp_Op',
        :'is_flexi_dd_death_benefit' => :'isFlexiDd_DeathBenefit',
        :'is_flexi_dd_pension' => :'isFlexiDd_Pension',
        :'calculation_type' => :'calculationType',
        :'multiplier_type' => :'multiplierType',
        :'hourly_rate_multiplier' => :'hourlyRateMultiplier',
        :'is_system_code' => :'isSystemCode',
        :'is_control_code' => :'isControlCode'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'Object',
        :'code' => :'Object',
        :'default_value' => :'Object',
        :'is_deduction' => :'Object',
        :'is_niable' => :'Object',
        :'is_taxable' => :'Object',
        :'is_pensionable' => :'Object',
        :'is_attachable' => :'Object',
        :'is_real_time_class1a_niable' => :'Object',
        :'is_not_contributing_to_holiday_pay' => :'Object',
        :'is_qualifying_earnings_for_ae' => :'Object',
        :'is_not_tierable' => :'Object',
        :'is_tcp_tcls' => :'Object',
        :'is_tcp_pp' => :'Object',
        :'is_tcp_op' => :'Object',
        :'is_flexi_dd_death_benefit' => :'Object',
        :'is_flexi_dd_pension' => :'Object',
        :'calculation_type' => :'Object',
        :'multiplier_type' => :'Object',
        :'hourly_rate_multiplier' => :'Object',
        :'is_system_code' => :'Object',
        :'is_control_code' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'default_value',
        :'is_qualifying_earnings_for_ae',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PayCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PayCode`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.key?(:'is_deduction')
        self.is_deduction = attributes[:'is_deduction']
      end

      if attributes.key?(:'is_niable')
        self.is_niable = attributes[:'is_niable']
      end

      if attributes.key?(:'is_taxable')
        self.is_taxable = attributes[:'is_taxable']
      end

      if attributes.key?(:'is_pensionable')
        self.is_pensionable = attributes[:'is_pensionable']
      end

      if attributes.key?(:'is_attachable')
        self.is_attachable = attributes[:'is_attachable']
      end

      if attributes.key?(:'is_real_time_class1a_niable')
        self.is_real_time_class1a_niable = attributes[:'is_real_time_class1a_niable']
      end

      if attributes.key?(:'is_not_contributing_to_holiday_pay')
        self.is_not_contributing_to_holiday_pay = attributes[:'is_not_contributing_to_holiday_pay']
      end

      if attributes.key?(:'is_qualifying_earnings_for_ae')
        self.is_qualifying_earnings_for_ae = attributes[:'is_qualifying_earnings_for_ae']
      end

      if attributes.key?(:'is_not_tierable')
        self.is_not_tierable = attributes[:'is_not_tierable']
      end

      if attributes.key?(:'is_tcp_tcls')
        self.is_tcp_tcls = attributes[:'is_tcp_tcls']
      end

      if attributes.key?(:'is_tcp_pp')
        self.is_tcp_pp = attributes[:'is_tcp_pp']
      end

      if attributes.key?(:'is_tcp_op')
        self.is_tcp_op = attributes[:'is_tcp_op']
      end

      if attributes.key?(:'is_flexi_dd_death_benefit')
        self.is_flexi_dd_death_benefit = attributes[:'is_flexi_dd_death_benefit']
      end

      if attributes.key?(:'is_flexi_dd_pension')
        self.is_flexi_dd_pension = attributes[:'is_flexi_dd_pension']
      end

      if attributes.key?(:'calculation_type')
        self.calculation_type = attributes[:'calculation_type']
      end

      if attributes.key?(:'multiplier_type')
        self.multiplier_type = attributes[:'multiplier_type']
      end

      if attributes.key?(:'hourly_rate_multiplier')
        self.hourly_rate_multiplier = attributes[:'hourly_rate_multiplier']
      end

      if attributes.key?(:'is_system_code')
        self.is_system_code = attributes[:'is_system_code']
      end

      if attributes.key?(:'is_control_code')
        self.is_control_code = attributes[:'is_control_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      return false if @code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          code == o.code &&
          default_value == o.default_value &&
          is_deduction == o.is_deduction &&
          is_niable == o.is_niable &&
          is_taxable == o.is_taxable &&
          is_pensionable == o.is_pensionable &&
          is_attachable == o.is_attachable &&
          is_real_time_class1a_niable == o.is_real_time_class1a_niable &&
          is_not_contributing_to_holiday_pay == o.is_not_contributing_to_holiday_pay &&
          is_qualifying_earnings_for_ae == o.is_qualifying_earnings_for_ae &&
          is_not_tierable == o.is_not_tierable &&
          is_tcp_tcls == o.is_tcp_tcls &&
          is_tcp_pp == o.is_tcp_pp &&
          is_tcp_op == o.is_tcp_op &&
          is_flexi_dd_death_benefit == o.is_flexi_dd_death_benefit &&
          is_flexi_dd_pension == o.is_flexi_dd_pension &&
          calculation_type == o.calculation_type &&
          multiplier_type == o.multiplier_type &&
          hourly_rate_multiplier == o.hourly_rate_multiplier &&
          is_system_code == o.is_system_code &&
          is_control_code == o.is_control_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, code, default_value, is_deduction, is_niable, is_taxable, is_pensionable, is_attachable, is_real_time_class1a_niable, is_not_contributing_to_holiday_pay, is_qualifying_earnings_for_ae, is_not_tierable, is_tcp_tcls, is_tcp_pp, is_tcp_op, is_flexi_dd_death_benefit, is_flexi_dd_pension, calculation_type, multiplier_type, hourly_rate_multiplier, is_system_code, is_control_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
