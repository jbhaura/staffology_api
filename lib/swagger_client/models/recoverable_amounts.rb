=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class RecoverableAmounts
    attr_accessor :tax_month

    # Value of Statutory Maternity Pay recovered year to date
    attr_accessor :smp_recovered

    # Value of Statutory Paternity Pay recovered year to date
    attr_accessor :spp_recovered

    # Value of Statutory Adoption Pay recovered year to date
    attr_accessor :sap_recovered

    # Value of Shared Parental Pay recovered year to date
    attr_accessor :sh_pp_recovered

    # Value of Statutory Parental Bereavment Pay recovered year to date
    attr_accessor :spbp_recovered

    # Value of NIC compensation on SMP year to date
    attr_accessor :nic_compensation_on_smp

    # Value of NIC compensation on Statutory Paternity Pay year to date
    attr_accessor :nic_compensation_on_spp

    # Value of NIC compensation on Statutory Adoption Pay year to date
    attr_accessor :nic_compensation_on_sap

    # Value of NIC compensation on Shared Parental Pay year to date
    attr_accessor :nic_compensation_on_sh_pp

    # Value of NIC compensation on Statutory Parental Bereavement Pay year to date
    attr_accessor :nic_compensation_on_spbp

    # Value of CIS deductions suffered year to date
    attr_accessor :cis_deductions_suffered

    # The total value of the reclaimed amounts
    attr_accessor :total

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_month' => :'taxMonth',
        :'smp_recovered' => :'smpRecovered',
        :'spp_recovered' => :'sppRecovered',
        :'sap_recovered' => :'sapRecovered',
        :'sh_pp_recovered' => :'shPPRecovered',
        :'spbp_recovered' => :'spbpRecovered',
        :'nic_compensation_on_smp' => :'nicCompensationOnSMP',
        :'nic_compensation_on_spp' => :'nicCompensationOnSPP',
        :'nic_compensation_on_sap' => :'nicCompensationOnSAP',
        :'nic_compensation_on_sh_pp' => :'nicCompensationOnShPP',
        :'nic_compensation_on_spbp' => :'nicCompensationOnSPBP',
        :'cis_deductions_suffered' => :'cisDeductionsSuffered',
        :'total' => :'total'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_month' => :'Object',
        :'smp_recovered' => :'Object',
        :'spp_recovered' => :'Object',
        :'sap_recovered' => :'Object',
        :'sh_pp_recovered' => :'Object',
        :'spbp_recovered' => :'Object',
        :'nic_compensation_on_smp' => :'Object',
        :'nic_compensation_on_spp' => :'Object',
        :'nic_compensation_on_sap' => :'Object',
        :'nic_compensation_on_sh_pp' => :'Object',
        :'nic_compensation_on_spbp' => :'Object',
        :'cis_deductions_suffered' => :'Object',
        :'total' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::RecoverableAmounts` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::RecoverableAmounts`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_month')
        self.tax_month = attributes[:'tax_month']
      end

      if attributes.key?(:'smp_recovered')
        self.smp_recovered = attributes[:'smp_recovered']
      end

      if attributes.key?(:'spp_recovered')
        self.spp_recovered = attributes[:'spp_recovered']
      end

      if attributes.key?(:'sap_recovered')
        self.sap_recovered = attributes[:'sap_recovered']
      end

      if attributes.key?(:'sh_pp_recovered')
        self.sh_pp_recovered = attributes[:'sh_pp_recovered']
      end

      if attributes.key?(:'spbp_recovered')
        self.spbp_recovered = attributes[:'spbp_recovered']
      end

      if attributes.key?(:'nic_compensation_on_smp')
        self.nic_compensation_on_smp = attributes[:'nic_compensation_on_smp']
      end

      if attributes.key?(:'nic_compensation_on_spp')
        self.nic_compensation_on_spp = attributes[:'nic_compensation_on_spp']
      end

      if attributes.key?(:'nic_compensation_on_sap')
        self.nic_compensation_on_sap = attributes[:'nic_compensation_on_sap']
      end

      if attributes.key?(:'nic_compensation_on_sh_pp')
        self.nic_compensation_on_sh_pp = attributes[:'nic_compensation_on_sh_pp']
      end

      if attributes.key?(:'nic_compensation_on_spbp')
        self.nic_compensation_on_spbp = attributes[:'nic_compensation_on_spbp']
      end

      if attributes.key?(:'cis_deductions_suffered')
        self.cis_deductions_suffered = attributes[:'cis_deductions_suffered']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_month == o.tax_month &&
          smp_recovered == o.smp_recovered &&
          spp_recovered == o.spp_recovered &&
          sap_recovered == o.sap_recovered &&
          sh_pp_recovered == o.sh_pp_recovered &&
          spbp_recovered == o.spbp_recovered &&
          nic_compensation_on_smp == o.nic_compensation_on_smp &&
          nic_compensation_on_spp == o.nic_compensation_on_spp &&
          nic_compensation_on_sap == o.nic_compensation_on_sap &&
          nic_compensation_on_sh_pp == o.nic_compensation_on_sh_pp &&
          nic_compensation_on_spbp == o.nic_compensation_on_spbp &&
          cis_deductions_suffered == o.cis_deductions_suffered &&
          total == o.total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_month, smp_recovered, spp_recovered, sap_recovered, sh_pp_recovered, spbp_recovered, nic_compensation_on_smp, nic_compensation_on_spp, nic_compensation_on_sap, nic_compensation_on_sh_pp, nic_compensation_on_spbp, cis_deductions_suffered, total].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
