=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class OpeningBalances
    attr_accessor :tax_year

    attr_accessor :not_new_starter

    attr_accessor :previous_employer_gross

    attr_accessor :previous_employer_tax

    attr_accessor :current_employer_gross

    attr_accessor :current_employer_tax

    attr_accessor :current_employer_net

    attr_accessor :student_loan_deductions

    attr_accessor :postgrad_loan_deductions

    attr_accessor :empee_pen_contribns_paid

    attr_accessor :empee_pen_contribns_not_paid

    attr_accessor :smp

    attr_accessor :spp

    attr_accessor :sap

    attr_accessor :shpp

    attr_accessor :spbp

    attr_accessor :real_time_class1_a_ni

    attr_accessor :termination_payments

    attr_accessor :maps_miles

    attr_accessor :nic_summaries

    attr_accessor :employee

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_year' => :'taxYear',
        :'not_new_starter' => :'notNewStarter',
        :'previous_employer_gross' => :'previousEmployerGross',
        :'previous_employer_tax' => :'previousEmployerTax',
        :'current_employer_gross' => :'currentEmployerGross',
        :'current_employer_tax' => :'currentEmployerTax',
        :'current_employer_net' => :'currentEmployerNet',
        :'student_loan_deductions' => :'studentLoanDeductions',
        :'postgrad_loan_deductions' => :'postgradLoanDeductions',
        :'empee_pen_contribns_paid' => :'empeePenContribnsPaid',
        :'empee_pen_contribns_not_paid' => :'empeePenContribnsNotPaid',
        :'smp' => :'smp',
        :'spp' => :'spp',
        :'sap' => :'sap',
        :'shpp' => :'shpp',
        :'spbp' => :'spbp',
        :'real_time_class1_a_ni' => :'realTimeClass1ANi',
        :'termination_payments' => :'terminationPayments',
        :'maps_miles' => :'mapsMiles',
        :'nic_summaries' => :'nicSummaries',
        :'employee' => :'employee'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_year' => :'Object',
        :'not_new_starter' => :'Object',
        :'previous_employer_gross' => :'Object',
        :'previous_employer_tax' => :'Object',
        :'current_employer_gross' => :'Object',
        :'current_employer_tax' => :'Object',
        :'current_employer_net' => :'Object',
        :'student_loan_deductions' => :'Object',
        :'postgrad_loan_deductions' => :'Object',
        :'empee_pen_contribns_paid' => :'Object',
        :'empee_pen_contribns_not_paid' => :'Object',
        :'smp' => :'Object',
        :'spp' => :'Object',
        :'sap' => :'Object',
        :'shpp' => :'Object',
        :'spbp' => :'Object',
        :'real_time_class1_a_ni' => :'Object',
        :'termination_payments' => :'Object',
        :'maps_miles' => :'Object',
        :'nic_summaries' => :'Object',
        :'employee' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'nic_summaries',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::OpeningBalances` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::OpeningBalances`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'not_new_starter')
        self.not_new_starter = attributes[:'not_new_starter']
      end

      if attributes.key?(:'previous_employer_gross')
        self.previous_employer_gross = attributes[:'previous_employer_gross']
      end

      if attributes.key?(:'previous_employer_tax')
        self.previous_employer_tax = attributes[:'previous_employer_tax']
      end

      if attributes.key?(:'current_employer_gross')
        self.current_employer_gross = attributes[:'current_employer_gross']
      end

      if attributes.key?(:'current_employer_tax')
        self.current_employer_tax = attributes[:'current_employer_tax']
      end

      if attributes.key?(:'current_employer_net')
        self.current_employer_net = attributes[:'current_employer_net']
      end

      if attributes.key?(:'student_loan_deductions')
        self.student_loan_deductions = attributes[:'student_loan_deductions']
      end

      if attributes.key?(:'postgrad_loan_deductions')
        self.postgrad_loan_deductions = attributes[:'postgrad_loan_deductions']
      end

      if attributes.key?(:'empee_pen_contribns_paid')
        self.empee_pen_contribns_paid = attributes[:'empee_pen_contribns_paid']
      end

      if attributes.key?(:'empee_pen_contribns_not_paid')
        self.empee_pen_contribns_not_paid = attributes[:'empee_pen_contribns_not_paid']
      end

      if attributes.key?(:'smp')
        self.smp = attributes[:'smp']
      end

      if attributes.key?(:'spp')
        self.spp = attributes[:'spp']
      end

      if attributes.key?(:'sap')
        self.sap = attributes[:'sap']
      end

      if attributes.key?(:'shpp')
        self.shpp = attributes[:'shpp']
      end

      if attributes.key?(:'spbp')
        self.spbp = attributes[:'spbp']
      end

      if attributes.key?(:'real_time_class1_a_ni')
        self.real_time_class1_a_ni = attributes[:'real_time_class1_a_ni']
      end

      if attributes.key?(:'termination_payments')
        self.termination_payments = attributes[:'termination_payments']
      end

      if attributes.key?(:'maps_miles')
        self.maps_miles = attributes[:'maps_miles']
      end

      if attributes.key?(:'nic_summaries')
        if (value = attributes[:'nic_summaries']).is_a?(Array)
          self.nic_summaries = value
        end
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_year == o.tax_year &&
          not_new_starter == o.not_new_starter &&
          previous_employer_gross == o.previous_employer_gross &&
          previous_employer_tax == o.previous_employer_tax &&
          current_employer_gross == o.current_employer_gross &&
          current_employer_tax == o.current_employer_tax &&
          current_employer_net == o.current_employer_net &&
          student_loan_deductions == o.student_loan_deductions &&
          postgrad_loan_deductions == o.postgrad_loan_deductions &&
          empee_pen_contribns_paid == o.empee_pen_contribns_paid &&
          empee_pen_contribns_not_paid == o.empee_pen_contribns_not_paid &&
          smp == o.smp &&
          spp == o.spp &&
          sap == o.sap &&
          shpp == o.shpp &&
          spbp == o.spbp &&
          real_time_class1_a_ni == o.real_time_class1_a_ni &&
          termination_payments == o.termination_payments &&
          maps_miles == o.maps_miles &&
          nic_summaries == o.nic_summaries &&
          employee == o.employee
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_year, not_new_starter, previous_employer_gross, previous_employer_tax, current_employer_gross, current_employer_tax, current_employer_net, student_loan_deductions, postgrad_loan_deductions, empee_pen_contribns_paid, empee_pen_contribns_not_paid, smp, spp, sap, shpp, spbp, real_time_class1_a_ni, termination_payments, maps_miles, nic_summaries, employee].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
