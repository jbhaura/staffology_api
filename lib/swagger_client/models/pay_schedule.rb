=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class PaySchedule
    # A descriptive name for this PaySchedule
    attr_accessor :name

    # [readonly] Indicates whether this is first, second, third (etc) PaySchedule for this PayPeriod.
    attr_accessor :ordinal

    attr_accessor :tax_year

    attr_accessor :pay_period

    # The last day of the first pay period
    attr_accessor :first_period_end_date

    # The first payment date
    attr_accessor :first_payment_date

    attr_accessor :payment_date_type

    # Only applicable for PayPeriod of Custom. Defines the length of each period
    attr_accessor :period_lengths

    attr_accessor :period_events_config

    # [readonly] Will be true if the employer currently has an open PayRun for this PayPeriod
    attr_accessor :has_open_pay_run_period

    # [readonly] The end date of the most recent PayRun on this schedule
    attr_accessor :last_period_end_date

    # [readonly] The period number of the most recent PayRun on this schedule
    attr_accessor :last_period_number

    # [readonly] The number of employees paid with this PaySchedule
    attr_accessor :employee_count

    # [readonly] Whether or not this PaySchedule is required for the employer, ie: they have employees to be paid on this PaySchedule
    attr_accessor :is_required

    # [readonly] Whether or not this PaySchedule has been configured and is ready for use
    attr_accessor :is_configured

    # [readonly] Returns true if all PayRuns for this PaySchedule in the TaxYear have been completed
    attr_accessor :is_year_completed

    # [readonly] A list of actions that need to be completed for this PaySchedule before this TaxYear can be finalised
    attr_accessor :year_end_tasks

    # [readonly] Details of PayRuns for this PaySchedule
    attr_accessor :pay_runs

    attr_accessor :current_pay_run

    attr_accessor :next_pay_run

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'ordinal' => :'ordinal',
        :'tax_year' => :'taxYear',
        :'pay_period' => :'payPeriod',
        :'first_period_end_date' => :'firstPeriodEndDate',
        :'first_payment_date' => :'firstPaymentDate',
        :'payment_date_type' => :'paymentDateType',
        :'period_lengths' => :'periodLengths',
        :'period_events_config' => :'periodEventsConfig',
        :'has_open_pay_run_period' => :'hasOpenPayRunPeriod',
        :'last_period_end_date' => :'lastPeriodEndDate',
        :'last_period_number' => :'lastPeriodNumber',
        :'employee_count' => :'employeeCount',
        :'is_required' => :'isRequired',
        :'is_configured' => :'isConfigured',
        :'is_year_completed' => :'isYearCompleted',
        :'year_end_tasks' => :'yearEndTasks',
        :'pay_runs' => :'payRuns',
        :'current_pay_run' => :'currentPayRun',
        :'next_pay_run' => :'nextPayRun'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'ordinal' => :'Object',
        :'tax_year' => :'Object',
        :'pay_period' => :'Object',
        :'first_period_end_date' => :'Object',
        :'first_payment_date' => :'Object',
        :'payment_date_type' => :'Object',
        :'period_lengths' => :'Object',
        :'period_events_config' => :'Object',
        :'has_open_pay_run_period' => :'Object',
        :'last_period_end_date' => :'Object',
        :'last_period_number' => :'Object',
        :'employee_count' => :'Object',
        :'is_required' => :'Object',
        :'is_configured' => :'Object',
        :'is_year_completed' => :'Object',
        :'year_end_tasks' => :'Object',
        :'pay_runs' => :'Object',
        :'current_pay_run' => :'Object',
        :'next_pay_run' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'period_lengths',
        :'last_period_end_date',
        :'last_period_number',
        :'year_end_tasks',
        :'pay_runs',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PaySchedule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PaySchedule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'first_period_end_date')
        self.first_period_end_date = attributes[:'first_period_end_date']
      end

      if attributes.key?(:'first_payment_date')
        self.first_payment_date = attributes[:'first_payment_date']
      end

      if attributes.key?(:'payment_date_type')
        self.payment_date_type = attributes[:'payment_date_type']
      end

      if attributes.key?(:'period_lengths')
        if (value = attributes[:'period_lengths']).is_a?(Array)
          self.period_lengths = value
        end
      end

      if attributes.key?(:'period_events_config')
        self.period_events_config = attributes[:'period_events_config']
      end

      if attributes.key?(:'has_open_pay_run_period')
        self.has_open_pay_run_period = attributes[:'has_open_pay_run_period']
      end

      if attributes.key?(:'last_period_end_date')
        self.last_period_end_date = attributes[:'last_period_end_date']
      end

      if attributes.key?(:'last_period_number')
        self.last_period_number = attributes[:'last_period_number']
      end

      if attributes.key?(:'employee_count')
        self.employee_count = attributes[:'employee_count']
      end

      if attributes.key?(:'is_required')
        self.is_required = attributes[:'is_required']
      end

      if attributes.key?(:'is_configured')
        self.is_configured = attributes[:'is_configured']
      end

      if attributes.key?(:'is_year_completed')
        self.is_year_completed = attributes[:'is_year_completed']
      end

      if attributes.key?(:'year_end_tasks')
        if (value = attributes[:'year_end_tasks']).is_a?(Array)
          self.year_end_tasks = value
        end
      end

      if attributes.key?(:'pay_runs')
        if (value = attributes[:'pay_runs']).is_a?(Array)
          self.pay_runs = value
        end
      end

      if attributes.key?(:'current_pay_run')
        self.current_pay_run = attributes[:'current_pay_run']
      end

      if attributes.key?(:'next_pay_run')
        self.next_pay_run = attributes[:'next_pay_run']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          ordinal == o.ordinal &&
          tax_year == o.tax_year &&
          pay_period == o.pay_period &&
          first_period_end_date == o.first_period_end_date &&
          first_payment_date == o.first_payment_date &&
          payment_date_type == o.payment_date_type &&
          period_lengths == o.period_lengths &&
          period_events_config == o.period_events_config &&
          has_open_pay_run_period == o.has_open_pay_run_period &&
          last_period_end_date == o.last_period_end_date &&
          last_period_number == o.last_period_number &&
          employee_count == o.employee_count &&
          is_required == o.is_required &&
          is_configured == o.is_configured &&
          is_year_completed == o.is_year_completed &&
          year_end_tasks == o.year_end_tasks &&
          pay_runs == o.pay_runs &&
          current_pay_run == o.current_pay_run &&
          next_pay_run == o.next_pay_run
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, ordinal, tax_year, pay_period, first_period_end_date, first_payment_date, payment_date_type, period_lengths, period_events_config, has_open_pay_run_period, last_period_end_date, last_period_number, employee_count, is_required, is_configured, is_year_completed, year_end_tasks, pay_runs, current_pay_run, next_pay_run].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
