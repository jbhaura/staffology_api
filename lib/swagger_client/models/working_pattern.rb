=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class WorkingPattern
    attr_accessor :title

    attr_accessor :mon

    attr_accessor :tue

    attr_accessor :wed

    attr_accessor :thu

    attr_accessor :fri

    attr_accessor :sat

    attr_accessor :sun

    attr_accessor :bank_holidays

    attr_accessor :pro_rata_rule

    # [readonly] The dates that are classed as Bank Holidays for this Working Pattern
    attr_accessor :bank_holiday_dates

    attr_accessor :is_default

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'mon' => :'mon',
        :'tue' => :'tue',
        :'wed' => :'wed',
        :'thu' => :'thu',
        :'fri' => :'fri',
        :'sat' => :'sat',
        :'sun' => :'sun',
        :'bank_holidays' => :'bankHolidays',
        :'pro_rata_rule' => :'proRataRule',
        :'bank_holiday_dates' => :'bankHolidayDates',
        :'is_default' => :'isDefault',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'Object',
        :'mon' => :'Object',
        :'tue' => :'Object',
        :'wed' => :'Object',
        :'thu' => :'Object',
        :'fri' => :'Object',
        :'sat' => :'Object',
        :'sun' => :'Object',
        :'bank_holidays' => :'Object',
        :'pro_rata_rule' => :'Object',
        :'bank_holiday_dates' => :'Object',
        :'is_default' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'bank_holiday_dates',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::WorkingPattern` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::WorkingPattern`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'mon')
        self.mon = attributes[:'mon']
      end

      if attributes.key?(:'tue')
        self.tue = attributes[:'tue']
      end

      if attributes.key?(:'wed')
        self.wed = attributes[:'wed']
      end

      if attributes.key?(:'thu')
        self.thu = attributes[:'thu']
      end

      if attributes.key?(:'fri')
        self.fri = attributes[:'fri']
      end

      if attributes.key?(:'sat')
        self.sat = attributes[:'sat']
      end

      if attributes.key?(:'sun')
        self.sun = attributes[:'sun']
      end

      if attributes.key?(:'bank_holidays')
        self.bank_holidays = attributes[:'bank_holidays']
      end

      if attributes.key?(:'pro_rata_rule')
        self.pro_rata_rule = attributes[:'pro_rata_rule']
      end

      if attributes.key?(:'bank_holiday_dates')
        if (value = attributes[:'bank_holiday_dates']).is_a?(Array)
          self.bank_holiday_dates = value
        end
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          mon == o.mon &&
          tue == o.tue &&
          wed == o.wed &&
          thu == o.thu &&
          fri == o.fri &&
          sat == o.sat &&
          sun == o.sun &&
          bank_holidays == o.bank_holidays &&
          pro_rata_rule == o.pro_rata_rule &&
          bank_holiday_dates == o.bank_holiday_dates &&
          is_default == o.is_default &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, mon, tue, wed, thu, fri, sat, sun, bank_holidays, pro_rata_rule, bank_holiday_dates, is_default, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
