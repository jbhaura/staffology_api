=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class HmrcLiability
    # [readonly] A descriptive name for the Period
    attr_accessor :title

    attr_accessor :tax_year

    # [readonly]
    attr_accessor :period_ending

    # [readonly] Indicates whether or not all PayRuns for this period have been completed
    attr_accessor :period_complete

    # [readonly] If there are recoverable amount present (ie, SMP) and the Period is complete then this field Indicates   whether or not an EPS has been created up to the final tax month of this period to declare  the recoverable amounts
    attr_accessor :recoverable_amounts_eps_created

    # [readonly] If there is an Apprenticeship LEvy amount present and the Period is complete then this field Indicates   whether or not an EPS has been created up to the final tax month of this period to declare  the amount
    attr_accessor :apprenticeship_levy_eps_created

    attr_accessor :pay_runs

    # [readonly] Amount due to HMRC for PAYE in period
    attr_accessor :tax

    # [readonly] Amount due to HMRC for CIS Deductions made in period
    attr_accessor :cis_deductions

    # [readonly] Amount due to HMRC for Postgrad Loan Deductions made in period
    attr_accessor :postgrad_loan_deductions

    # [readonly] Amount due to HMRC for Student Loan Deductions made in period
    attr_accessor :student_loan_deductions

    # [readonly] Amount due to HMRC for Employee NIC Contributions withheld in period
    attr_accessor :employee_nic

    # [readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period
    attr_accessor :employer_nic

    # [readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period
    attr_accessor :real_time_class1_a_nic

    # [readonly] SMP recovered from payments in period
    attr_accessor :smp

    # [readonly] SMP NIC Compensation for period
    attr_accessor :smp_nic

    # [readonly] SPP recovered from payments in period
    attr_accessor :spp

    # [readonly] SPP Nic Compensation for period
    attr_accessor :spp_nic

    # [readonly] SAP recovered from payments in period
    attr_accessor :sap

    # [readonly] SAP Nic Compensation for period
    attr_accessor :sap_nic

    # [readonly] ShPP recovered from payments in period
    attr_accessor :shpp

    # [readonly] ShPP Nic Compensation for period
    attr_accessor :shpp_nic

    # [readonly] SPBP recovered from payments in period
    attr_accessor :spbp

    # [readonly] SPBP Nic Compensation for period
    attr_accessor :spbp_nic

    # [readonly] Indicates whether the Employer settings say the Employer is eligible for Employment Allowance
    attr_accessor :eligible_for_employment_allowance

    # Amount to claim with respect to the Employment Allowance\\n
    attr_accessor :employment_allowance_claim

    # If set to true, we'll automatically claim the maximum allowed.\\n  If set to false then you can enter your own value.\\n  If EligibleForEmploymentAllowance is false then the EmploymentAllowanceClaim will   always be overwritten with a zero value regardless of this property
    attr_accessor :employment_allowance_claim_auto

    # [readonly] Indicates whether the Employer settings say the Employer is liable for the Apprenticeship Levy
    attr_accessor :liable_for_apprenticeship_levy

    # Amount due with respect to the Apprenticeship Levy
    attr_accessor :apprenticeship_levy

    # If set to true, we'll automatically calculate your liability\\n  If set to false then you can enter your own value.\\n  If LiableForApprenticeshipLevy is false then the ApprenticeshipLevy will   always be overwritten with a zero value regardless of this property
    attr_accessor :apprenticeship_levy_auto

    # [readonly] Total Liability (before any deductions) arising in this Period
    attr_accessor :liability_arising_in_period

    # [readonly] Amount due to HMRC in previous periods for this Tax Year
    attr_accessor :due_in_previous_periods

    # [readonly] Amount paid to HMRC in previous periods for this Tax Year
    attr_accessor :paid_in_previous_periods

    # [readonly] The amount of Employment Allowance claimed in previous periods for this Tax Year
    attr_accessor :employment_allowance_claim_in_previous_periods

    # Any amount received from HMRC to refund Tax in Period
    attr_accessor :received_from_hmrc_to_refund_tax

    # Any amount received from HMRC to pay Statutory Pay Period
    attr_accessor :received_from_hmrc_to_pay_statutory_pay

    # CIS Deductions Suffered in Period
    attr_accessor :cis_deductions_suffered

    # Any manual adjustment for Period
    attr_accessor :adjustment

    # [readonly] Net Liability (including any deductions/additions) arising in this Period
    attr_accessor :net_liability_for_period

    # [readonly] The total value of all payments in this period
    attr_accessor :total_paid

    attr_accessor :payments

    attr_accessor :fps_list

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'tax_year' => :'taxYear',
        :'period_ending' => :'periodEnding',
        :'period_complete' => :'periodComplete',
        :'recoverable_amounts_eps_created' => :'recoverableAmountsEpsCreated',
        :'apprenticeship_levy_eps_created' => :'apprenticeshipLevyEpsCreated',
        :'pay_runs' => :'payRuns',
        :'tax' => :'tax',
        :'cis_deductions' => :'cisDeductions',
        :'postgrad_loan_deductions' => :'postgradLoanDeductions',
        :'student_loan_deductions' => :'studentLoanDeductions',
        :'employee_nic' => :'employeeNic',
        :'employer_nic' => :'employerNic',
        :'real_time_class1_a_nic' => :'realTimeClass1ANic',
        :'smp' => :'smp',
        :'smp_nic' => :'smpNic',
        :'spp' => :'spp',
        :'spp_nic' => :'sppNic',
        :'sap' => :'sap',
        :'sap_nic' => :'sapNic',
        :'shpp' => :'shpp',
        :'shpp_nic' => :'shppNic',
        :'spbp' => :'spbp',
        :'spbp_nic' => :'spbpNic',
        :'eligible_for_employment_allowance' => :'eligibleForEmploymentAllowance',
        :'employment_allowance_claim' => :'employmentAllowanceClaim',
        :'employment_allowance_claim_auto' => :'employmentAllowanceClaimAuto',
        :'liable_for_apprenticeship_levy' => :'liableForApprenticeshipLevy',
        :'apprenticeship_levy' => :'apprenticeshipLevy',
        :'apprenticeship_levy_auto' => :'apprenticeshipLevyAuto',
        :'liability_arising_in_period' => :'liabilityArisingInPeriod',
        :'due_in_previous_periods' => :'dueInPreviousPeriods',
        :'paid_in_previous_periods' => :'paidInPreviousPeriods',
        :'employment_allowance_claim_in_previous_periods' => :'employmentAllowanceClaimInPreviousPeriods',
        :'received_from_hmrc_to_refund_tax' => :'receivedFromHMRCToRefundTax',
        :'received_from_hmrc_to_pay_statutory_pay' => :'receivedFromHMRCToPayStatutoryPay',
        :'cis_deductions_suffered' => :'cisDeductionsSuffered',
        :'adjustment' => :'adjustment',
        :'net_liability_for_period' => :'netLiabilityForPeriod',
        :'total_paid' => :'totalPaid',
        :'payments' => :'payments',
        :'fps_list' => :'fpsList',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'Object',
        :'tax_year' => :'Object',
        :'period_ending' => :'Object',
        :'period_complete' => :'Object',
        :'recoverable_amounts_eps_created' => :'Object',
        :'apprenticeship_levy_eps_created' => :'Object',
        :'pay_runs' => :'Object',
        :'tax' => :'Object',
        :'cis_deductions' => :'Object',
        :'postgrad_loan_deductions' => :'Object',
        :'student_loan_deductions' => :'Object',
        :'employee_nic' => :'Object',
        :'employer_nic' => :'Object',
        :'real_time_class1_a_nic' => :'Object',
        :'smp' => :'Object',
        :'smp_nic' => :'Object',
        :'spp' => :'Object',
        :'spp_nic' => :'Object',
        :'sap' => :'Object',
        :'sap_nic' => :'Object',
        :'shpp' => :'Object',
        :'shpp_nic' => :'Object',
        :'spbp' => :'Object',
        :'spbp_nic' => :'Object',
        :'eligible_for_employment_allowance' => :'Object',
        :'employment_allowance_claim' => :'Object',
        :'employment_allowance_claim_auto' => :'Object',
        :'liable_for_apprenticeship_levy' => :'Object',
        :'apprenticeship_levy' => :'Object',
        :'apprenticeship_levy_auto' => :'Object',
        :'liability_arising_in_period' => :'Object',
        :'due_in_previous_periods' => :'Object',
        :'paid_in_previous_periods' => :'Object',
        :'employment_allowance_claim_in_previous_periods' => :'Object',
        :'received_from_hmrc_to_refund_tax' => :'Object',
        :'received_from_hmrc_to_pay_statutory_pay' => :'Object',
        :'cis_deductions_suffered' => :'Object',
        :'adjustment' => :'Object',
        :'net_liability_for_period' => :'Object',
        :'total_paid' => :'Object',
        :'payments' => :'Object',
        :'fps_list' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'title',
        :'pay_runs',
        :'payments',
        :'fps_list',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::HmrcLiability` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::HmrcLiability`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'period_ending')
        self.period_ending = attributes[:'period_ending']
      end

      if attributes.key?(:'period_complete')
        self.period_complete = attributes[:'period_complete']
      end

      if attributes.key?(:'recoverable_amounts_eps_created')
        self.recoverable_amounts_eps_created = attributes[:'recoverable_amounts_eps_created']
      end

      if attributes.key?(:'apprenticeship_levy_eps_created')
        self.apprenticeship_levy_eps_created = attributes[:'apprenticeship_levy_eps_created']
      end

      if attributes.key?(:'pay_runs')
        if (value = attributes[:'pay_runs']).is_a?(Array)
          self.pay_runs = value
        end
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'cis_deductions')
        self.cis_deductions = attributes[:'cis_deductions']
      end

      if attributes.key?(:'postgrad_loan_deductions')
        self.postgrad_loan_deductions = attributes[:'postgrad_loan_deductions']
      end

      if attributes.key?(:'student_loan_deductions')
        self.student_loan_deductions = attributes[:'student_loan_deductions']
      end

      if attributes.key?(:'employee_nic')
        self.employee_nic = attributes[:'employee_nic']
      end

      if attributes.key?(:'employer_nic')
        self.employer_nic = attributes[:'employer_nic']
      end

      if attributes.key?(:'real_time_class1_a_nic')
        self.real_time_class1_a_nic = attributes[:'real_time_class1_a_nic']
      end

      if attributes.key?(:'smp')
        self.smp = attributes[:'smp']
      end

      if attributes.key?(:'smp_nic')
        self.smp_nic = attributes[:'smp_nic']
      end

      if attributes.key?(:'spp')
        self.spp = attributes[:'spp']
      end

      if attributes.key?(:'spp_nic')
        self.spp_nic = attributes[:'spp_nic']
      end

      if attributes.key?(:'sap')
        self.sap = attributes[:'sap']
      end

      if attributes.key?(:'sap_nic')
        self.sap_nic = attributes[:'sap_nic']
      end

      if attributes.key?(:'shpp')
        self.shpp = attributes[:'shpp']
      end

      if attributes.key?(:'shpp_nic')
        self.shpp_nic = attributes[:'shpp_nic']
      end

      if attributes.key?(:'spbp')
        self.spbp = attributes[:'spbp']
      end

      if attributes.key?(:'spbp_nic')
        self.spbp_nic = attributes[:'spbp_nic']
      end

      if attributes.key?(:'eligible_for_employment_allowance')
        self.eligible_for_employment_allowance = attributes[:'eligible_for_employment_allowance']
      end

      if attributes.key?(:'employment_allowance_claim')
        self.employment_allowance_claim = attributes[:'employment_allowance_claim']
      end

      if attributes.key?(:'employment_allowance_claim_auto')
        self.employment_allowance_claim_auto = attributes[:'employment_allowance_claim_auto']
      end

      if attributes.key?(:'liable_for_apprenticeship_levy')
        self.liable_for_apprenticeship_levy = attributes[:'liable_for_apprenticeship_levy']
      end

      if attributes.key?(:'apprenticeship_levy')
        self.apprenticeship_levy = attributes[:'apprenticeship_levy']
      end

      if attributes.key?(:'apprenticeship_levy_auto')
        self.apprenticeship_levy_auto = attributes[:'apprenticeship_levy_auto']
      end

      if attributes.key?(:'liability_arising_in_period')
        self.liability_arising_in_period = attributes[:'liability_arising_in_period']
      end

      if attributes.key?(:'due_in_previous_periods')
        self.due_in_previous_periods = attributes[:'due_in_previous_periods']
      end

      if attributes.key?(:'paid_in_previous_periods')
        self.paid_in_previous_periods = attributes[:'paid_in_previous_periods']
      end

      if attributes.key?(:'employment_allowance_claim_in_previous_periods')
        self.employment_allowance_claim_in_previous_periods = attributes[:'employment_allowance_claim_in_previous_periods']
      end

      if attributes.key?(:'received_from_hmrc_to_refund_tax')
        self.received_from_hmrc_to_refund_tax = attributes[:'received_from_hmrc_to_refund_tax']
      end

      if attributes.key?(:'received_from_hmrc_to_pay_statutory_pay')
        self.received_from_hmrc_to_pay_statutory_pay = attributes[:'received_from_hmrc_to_pay_statutory_pay']
      end

      if attributes.key?(:'cis_deductions_suffered')
        self.cis_deductions_suffered = attributes[:'cis_deductions_suffered']
      end

      if attributes.key?(:'adjustment')
        self.adjustment = attributes[:'adjustment']
      end

      if attributes.key?(:'net_liability_for_period')
        self.net_liability_for_period = attributes[:'net_liability_for_period']
      end

      if attributes.key?(:'total_paid')
        self.total_paid = attributes[:'total_paid']
      end

      if attributes.key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      end

      if attributes.key?(:'fps_list')
        if (value = attributes[:'fps_list']).is_a?(Array)
          self.fps_list = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          tax_year == o.tax_year &&
          period_ending == o.period_ending &&
          period_complete == o.period_complete &&
          recoverable_amounts_eps_created == o.recoverable_amounts_eps_created &&
          apprenticeship_levy_eps_created == o.apprenticeship_levy_eps_created &&
          pay_runs == o.pay_runs &&
          tax == o.tax &&
          cis_deductions == o.cis_deductions &&
          postgrad_loan_deductions == o.postgrad_loan_deductions &&
          student_loan_deductions == o.student_loan_deductions &&
          employee_nic == o.employee_nic &&
          employer_nic == o.employer_nic &&
          real_time_class1_a_nic == o.real_time_class1_a_nic &&
          smp == o.smp &&
          smp_nic == o.smp_nic &&
          spp == o.spp &&
          spp_nic == o.spp_nic &&
          sap == o.sap &&
          sap_nic == o.sap_nic &&
          shpp == o.shpp &&
          shpp_nic == o.shpp_nic &&
          spbp == o.spbp &&
          spbp_nic == o.spbp_nic &&
          eligible_for_employment_allowance == o.eligible_for_employment_allowance &&
          employment_allowance_claim == o.employment_allowance_claim &&
          employment_allowance_claim_auto == o.employment_allowance_claim_auto &&
          liable_for_apprenticeship_levy == o.liable_for_apprenticeship_levy &&
          apprenticeship_levy == o.apprenticeship_levy &&
          apprenticeship_levy_auto == o.apprenticeship_levy_auto &&
          liability_arising_in_period == o.liability_arising_in_period &&
          due_in_previous_periods == o.due_in_previous_periods &&
          paid_in_previous_periods == o.paid_in_previous_periods &&
          employment_allowance_claim_in_previous_periods == o.employment_allowance_claim_in_previous_periods &&
          received_from_hmrc_to_refund_tax == o.received_from_hmrc_to_refund_tax &&
          received_from_hmrc_to_pay_statutory_pay == o.received_from_hmrc_to_pay_statutory_pay &&
          cis_deductions_suffered == o.cis_deductions_suffered &&
          adjustment == o.adjustment &&
          net_liability_for_period == o.net_liability_for_period &&
          total_paid == o.total_paid &&
          payments == o.payments &&
          fps_list == o.fps_list &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, tax_year, period_ending, period_complete, recoverable_amounts_eps_created, apprenticeship_levy_eps_created, pay_runs, tax, cis_deductions, postgrad_loan_deductions, student_loan_deductions, employee_nic, employer_nic, real_time_class1_a_nic, smp, smp_nic, spp, spp_nic, sap, sap_nic, shpp, shpp_nic, spbp, spbp_nic, eligible_for_employment_allowance, employment_allowance_claim, employment_allowance_claim_auto, liable_for_apprenticeship_levy, apprenticeship_levy, apprenticeship_levy_auto, liability_arising_in_period, due_in_previous_periods, paid_in_previous_periods, employment_allowance_claim_in_previous_periods, received_from_hmrc_to_refund_tax, received_from_hmrc_to_pay_statutory_pay, cis_deductions_suffered, adjustment, net_liability_for_period, total_paid, payments, fps_list, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
