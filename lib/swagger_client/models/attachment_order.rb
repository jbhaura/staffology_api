=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # Used to represent an Attachment of Earnings Order (AEO)
  class AttachmentOrder
    attr_accessor :type

    # [ReadOnly] Whether or not shortfalls should be carried forward
    attr_accessor :carry_forward_shortfall

    # [ReadOnly] Whether or not shortfalls should be carried forward
    attr_accessor :allow_protected_earnings

    # [readonly] Whether or not the amount to be deducted is automatically calculated
    attr_accessor :auto_deduction

    # The reference which appeared on the court paperwork
    attr_accessor :reference

    # The date of issue for this Order
    attr_accessor :issue_date

    # The date from which to apply this Order
    attr_accessor :apply_from

    # An optional date on which to stop applying this order
    attr_accessor :apply_until

    # Whether or not the amount given for Deduction is a percentage rather than a fixed amount
    attr_accessor :deduction_is_percentage

    # The percentage or amount (depending on DeductionIsPercentage) to deduct
    attr_accessor :deduction

    # Whether or not the amount for ProtectedEarnings is a percentage rather than a fixed amount.
    attr_accessor :protected_earnings_is_percentage

    # The percentage or amount or percentage (depending on ProtectedEarningsIsPercentage) to protect
    attr_accessor :protected_earnings

    # Whether or not a Â£1 admin fee should be deducted for this order
    attr_accessor :charge_admin_fee

    # Any shortfall that is being carried forward
    attr_accessor :shortfall

    # Whether or not this order should be stopped once a total amount has been paid
    attr_accessor :stop_when_total_paid

    # The Total amount that needs to be paid for this Order
    attr_accessor :total_amount_to_pay

    # Any amount that has previously been paid towards this Order
    attr_accessor :amount_previously_paid

    # [readonly] Whether or not this Order has been stopped.\\n  This is set automatically when either it's paid in full or the ApplyUntil date has been reached.
    attr_accessor :stopped

    # A free-form text field to record any comments
    attr_accessor :notes

    attr_accessor :include_bank_details

    attr_accessor :bank_details

    # [readonly] Payments made towards this order. Only populated when viewed as a report.
    attr_accessor :payments

    # [readonly] The number of attachments associated with this model
    attr_accessor :document_count

    # [readonly] The attachments associated with this model
    attr_accessor :documents

    attr_accessor :employee

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'carry_forward_shortfall' => :'carryForwardShortfall',
        :'allow_protected_earnings' => :'allowProtectedEarnings',
        :'auto_deduction' => :'autoDeduction',
        :'reference' => :'reference',
        :'issue_date' => :'issueDate',
        :'apply_from' => :'applyFrom',
        :'apply_until' => :'applyUntil',
        :'deduction_is_percentage' => :'deductionIsPercentage',
        :'deduction' => :'deduction',
        :'protected_earnings_is_percentage' => :'protectedEarningsIsPercentage',
        :'protected_earnings' => :'protectedEarnings',
        :'charge_admin_fee' => :'chargeAdminFee',
        :'shortfall' => :'shortfall',
        :'stop_when_total_paid' => :'stopWhenTotalPaid',
        :'total_amount_to_pay' => :'totalAmountToPay',
        :'amount_previously_paid' => :'amountPreviouslyPaid',
        :'stopped' => :'stopped',
        :'notes' => :'notes',
        :'include_bank_details' => :'includeBankDetails',
        :'bank_details' => :'bankDetails',
        :'payments' => :'payments',
        :'document_count' => :'documentCount',
        :'documents' => :'documents',
        :'employee' => :'employee',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'Object',
        :'carry_forward_shortfall' => :'Object',
        :'allow_protected_earnings' => :'Object',
        :'auto_deduction' => :'Object',
        :'reference' => :'Object',
        :'issue_date' => :'Object',
        :'apply_from' => :'Object',
        :'apply_until' => :'Object',
        :'deduction_is_percentage' => :'Object',
        :'deduction' => :'Object',
        :'protected_earnings_is_percentage' => :'Object',
        :'protected_earnings' => :'Object',
        :'charge_admin_fee' => :'Object',
        :'shortfall' => :'Object',
        :'stop_when_total_paid' => :'Object',
        :'total_amount_to_pay' => :'Object',
        :'amount_previously_paid' => :'Object',
        :'stopped' => :'Object',
        :'notes' => :'Object',
        :'include_bank_details' => :'Object',
        :'bank_details' => :'Object',
        :'payments' => :'Object',
        :'document_count' => :'Object',
        :'documents' => :'Object',
        :'employee' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'reference',
        :'apply_until',
        :'notes',
        :'payments',
        :'documents',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AttachmentOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AttachmentOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'carry_forward_shortfall')
        self.carry_forward_shortfall = attributes[:'carry_forward_shortfall']
      end

      if attributes.key?(:'allow_protected_earnings')
        self.allow_protected_earnings = attributes[:'allow_protected_earnings']
      end

      if attributes.key?(:'auto_deduction')
        self.auto_deduction = attributes[:'auto_deduction']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'apply_from')
        self.apply_from = attributes[:'apply_from']
      end

      if attributes.key?(:'apply_until')
        self.apply_until = attributes[:'apply_until']
      end

      if attributes.key?(:'deduction_is_percentage')
        self.deduction_is_percentage = attributes[:'deduction_is_percentage']
      end

      if attributes.key?(:'deduction')
        self.deduction = attributes[:'deduction']
      end

      if attributes.key?(:'protected_earnings_is_percentage')
        self.protected_earnings_is_percentage = attributes[:'protected_earnings_is_percentage']
      end

      if attributes.key?(:'protected_earnings')
        self.protected_earnings = attributes[:'protected_earnings']
      end

      if attributes.key?(:'charge_admin_fee')
        self.charge_admin_fee = attributes[:'charge_admin_fee']
      end

      if attributes.key?(:'shortfall')
        self.shortfall = attributes[:'shortfall']
      end

      if attributes.key?(:'stop_when_total_paid')
        self.stop_when_total_paid = attributes[:'stop_when_total_paid']
      end

      if attributes.key?(:'total_amount_to_pay')
        self.total_amount_to_pay = attributes[:'total_amount_to_pay']
      end

      if attributes.key?(:'amount_previously_paid')
        self.amount_previously_paid = attributes[:'amount_previously_paid']
      end

      if attributes.key?(:'stopped')
        self.stopped = attributes[:'stopped']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'include_bank_details')
        self.include_bank_details = attributes[:'include_bank_details']
      end

      if attributes.key?(:'bank_details')
        self.bank_details = attributes[:'bank_details']
      end

      if attributes.key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      end

      if attributes.key?(:'document_count')
        self.document_count = attributes[:'document_count']
      end

      if attributes.key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          carry_forward_shortfall == o.carry_forward_shortfall &&
          allow_protected_earnings == o.allow_protected_earnings &&
          auto_deduction == o.auto_deduction &&
          reference == o.reference &&
          issue_date == o.issue_date &&
          apply_from == o.apply_from &&
          apply_until == o.apply_until &&
          deduction_is_percentage == o.deduction_is_percentage &&
          deduction == o.deduction &&
          protected_earnings_is_percentage == o.protected_earnings_is_percentage &&
          protected_earnings == o.protected_earnings &&
          charge_admin_fee == o.charge_admin_fee &&
          shortfall == o.shortfall &&
          stop_when_total_paid == o.stop_when_total_paid &&
          total_amount_to_pay == o.total_amount_to_pay &&
          amount_previously_paid == o.amount_previously_paid &&
          stopped == o.stopped &&
          notes == o.notes &&
          include_bank_details == o.include_bank_details &&
          bank_details == o.bank_details &&
          payments == o.payments &&
          document_count == o.document_count &&
          documents == o.documents &&
          employee == o.employee &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, carry_forward_shortfall, allow_protected_earnings, auto_deduction, reference, issue_date, apply_from, apply_until, deduction_is_percentage, deduction, protected_earnings_is_percentage, protected_earnings, charge_admin_fee, shortfall, stop_when_total_paid, total_amount_to_pay, amount_previously_paid, stopped, notes, include_bank_details, bank_details, payments, document_count, documents, employee, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
