=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class LeaveSettings
    # If true then the value for HolidayType comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_holiday_type

    # If true then the value for the AllowanceResetDate comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_allowance_reset_date

    # If true then the value for the Allowance comes from the Employer record.\\n  This property only appears if the LeaveSettings if a child of an Employee (not of an Employer)
    attr_accessor :use_default_allowance

    # If true then the value for AccruePaymentInLieu comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_accrue_payment_in_lieu

    # If true then the value for AccruePaymentInLieuRate comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_accrue_payment_in_lieu_rate

    # If true then the value for AccruePaymentInLieuAllGrossPay comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_accrue_payment_in_lieu_all_gross_pay

    # If true then the value for AccruePaymentInLieu comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_accrue_payment_in_lieu_pay_automatically

    # If true then the value for AccrueHoursPerDay comes from the Employer record.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :use_default_accrue_hours_per_day

    # The date that the holiday allowance resets. Only the day/month part of the value is relevant.
    attr_accessor :allowance_reset_date

    # The number of days holiday an employee can take per year if HolidayType is Days.  Otherwise this is readonly and gives you the number of days accrued since the last reset
    attr_accessor :allowance

    # Adjustment to number of hours/days/weeks holiday this employee can take per year.\\n  Will reset to 0 when the Allowance resets.\\n  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
    attr_accessor :adjustment

    # [readonly] The number of days used from the allowance since last reset
    attr_accessor :allowance_used

    # [readonly] The number of days used in the 12 months prior to the last reset
    attr_accessor :allowance_used_previous_period

    # [readonly] The number of days remaining of the allowance until next reset
    attr_accessor :allowance_remaining

    attr_accessor :holiday_type

    # If true and HolidayType is Accrual_Days then the AccruePaymentInLieuRate will be treated as the set amount to accrue per period worked.
    attr_accessor :accrue_set_amount

    # If HolidayType is Accrual_Days then this value is used to help convert hours worked into days accrued
    attr_accessor :accrue_hours_per_day

    # If true then the remaining Allowance will be shown on the employees payslip.
    attr_accessor :show_allowance_on_payslip

    # If true then the AHP balance will be shown on the employees payslip.
    attr_accessor :show_ahp_on_payslip

    # The rate at which Payments in Lieu acrrue. Typically this should be 12.07%.
    attr_accessor :accrue_payment_in_lieu_rate

    # Set to true if you want accrued holiday payments to be calculated on the total gross pay for the employee or just on the single regular pay element
    attr_accessor :accrue_payment_in_lieu_all_gross_pay

    # Set to true if you want employees to be automatically paid any outstanding holiday pay
    attr_accessor :accrue_payment_in_lieu_pay_automatically

    # [readonly] The total accrued payments for this employee over the lifetime of their employment so far
    attr_accessor :accrued_payment_liability

    # Any manual adjustment to the total accrued
    attr_accessor :accrued_payment_adjustment

    # [readonly] The Total amount paid to this employee in lieu of holidays
    attr_accessor :accrued_payment_paid

    # [readonly] The balance of what is owed to this employee in lieu of holidays
    attr_accessor :accrued_payment_balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'use_default_holiday_type' => :'useDefaultHolidayType',
        :'use_default_allowance_reset_date' => :'useDefaultAllowanceResetDate',
        :'use_default_allowance' => :'useDefaultAllowance',
        :'use_default_accrue_payment_in_lieu' => :'useDefaultAccruePaymentInLieu',
        :'use_default_accrue_payment_in_lieu_rate' => :'useDefaultAccruePaymentInLieuRate',
        :'use_default_accrue_payment_in_lieu_all_gross_pay' => :'useDefaultAccruePaymentInLieuAllGrossPay',
        :'use_default_accrue_payment_in_lieu_pay_automatically' => :'useDefaultAccruePaymentInLieuPayAutomatically',
        :'use_default_accrue_hours_per_day' => :'useDefaultAccrueHoursPerDay',
        :'allowance_reset_date' => :'allowanceResetDate',
        :'allowance' => :'allowance',
        :'adjustment' => :'adjustment',
        :'allowance_used' => :'allowanceUsed',
        :'allowance_used_previous_period' => :'allowanceUsedPreviousPeriod',
        :'allowance_remaining' => :'allowanceRemaining',
        :'holiday_type' => :'holidayType',
        :'accrue_set_amount' => :'accrueSetAmount',
        :'accrue_hours_per_day' => :'accrueHoursPerDay',
        :'show_allowance_on_payslip' => :'showAllowanceOnPayslip',
        :'show_ahp_on_payslip' => :'showAhpOnPayslip',
        :'accrue_payment_in_lieu_rate' => :'accruePaymentInLieuRate',
        :'accrue_payment_in_lieu_all_gross_pay' => :'accruePaymentInLieuAllGrossPay',
        :'accrue_payment_in_lieu_pay_automatically' => :'accruePaymentInLieuPayAutomatically',
        :'accrued_payment_liability' => :'accruedPaymentLiability',
        :'accrued_payment_adjustment' => :'accruedPaymentAdjustment',
        :'accrued_payment_paid' => :'accruedPaymentPaid',
        :'accrued_payment_balance' => :'accruedPaymentBalance'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'use_default_holiday_type' => :'Object',
        :'use_default_allowance_reset_date' => :'Object',
        :'use_default_allowance' => :'Object',
        :'use_default_accrue_payment_in_lieu' => :'Object',
        :'use_default_accrue_payment_in_lieu_rate' => :'Object',
        :'use_default_accrue_payment_in_lieu_all_gross_pay' => :'Object',
        :'use_default_accrue_payment_in_lieu_pay_automatically' => :'Object',
        :'use_default_accrue_hours_per_day' => :'Object',
        :'allowance_reset_date' => :'Object',
        :'allowance' => :'Object',
        :'adjustment' => :'Object',
        :'allowance_used' => :'Object',
        :'allowance_used_previous_period' => :'Object',
        :'allowance_remaining' => :'Object',
        :'holiday_type' => :'Object',
        :'accrue_set_amount' => :'Object',
        :'accrue_hours_per_day' => :'Object',
        :'show_allowance_on_payslip' => :'Object',
        :'show_ahp_on_payslip' => :'Object',
        :'accrue_payment_in_lieu_rate' => :'Object',
        :'accrue_payment_in_lieu_all_gross_pay' => :'Object',
        :'accrue_payment_in_lieu_pay_automatically' => :'Object',
        :'accrued_payment_liability' => :'Object',
        :'accrued_payment_adjustment' => :'Object',
        :'accrued_payment_paid' => :'Object',
        :'accrued_payment_balance' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjustment',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::LeaveSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::LeaveSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'use_default_holiday_type')
        self.use_default_holiday_type = attributes[:'use_default_holiday_type']
      end

      if attributes.key?(:'use_default_allowance_reset_date')
        self.use_default_allowance_reset_date = attributes[:'use_default_allowance_reset_date']
      end

      if attributes.key?(:'use_default_allowance')
        self.use_default_allowance = attributes[:'use_default_allowance']
      end

      if attributes.key?(:'use_default_accrue_payment_in_lieu')
        self.use_default_accrue_payment_in_lieu = attributes[:'use_default_accrue_payment_in_lieu']
      end

      if attributes.key?(:'use_default_accrue_payment_in_lieu_rate')
        self.use_default_accrue_payment_in_lieu_rate = attributes[:'use_default_accrue_payment_in_lieu_rate']
      end

      if attributes.key?(:'use_default_accrue_payment_in_lieu_all_gross_pay')
        self.use_default_accrue_payment_in_lieu_all_gross_pay = attributes[:'use_default_accrue_payment_in_lieu_all_gross_pay']
      end

      if attributes.key?(:'use_default_accrue_payment_in_lieu_pay_automatically')
        self.use_default_accrue_payment_in_lieu_pay_automatically = attributes[:'use_default_accrue_payment_in_lieu_pay_automatically']
      end

      if attributes.key?(:'use_default_accrue_hours_per_day')
        self.use_default_accrue_hours_per_day = attributes[:'use_default_accrue_hours_per_day']
      end

      if attributes.key?(:'allowance_reset_date')
        self.allowance_reset_date = attributes[:'allowance_reset_date']
      end

      if attributes.key?(:'allowance')
        self.allowance = attributes[:'allowance']
      end

      if attributes.key?(:'adjustment')
        self.adjustment = attributes[:'adjustment']
      end

      if attributes.key?(:'allowance_used')
        self.allowance_used = attributes[:'allowance_used']
      end

      if attributes.key?(:'allowance_used_previous_period')
        self.allowance_used_previous_period = attributes[:'allowance_used_previous_period']
      end

      if attributes.key?(:'allowance_remaining')
        self.allowance_remaining = attributes[:'allowance_remaining']
      end

      if attributes.key?(:'holiday_type')
        self.holiday_type = attributes[:'holiday_type']
      end

      if attributes.key?(:'accrue_set_amount')
        self.accrue_set_amount = attributes[:'accrue_set_amount']
      end

      if attributes.key?(:'accrue_hours_per_day')
        self.accrue_hours_per_day = attributes[:'accrue_hours_per_day']
      end

      if attributes.key?(:'show_allowance_on_payslip')
        self.show_allowance_on_payslip = attributes[:'show_allowance_on_payslip']
      end

      if attributes.key?(:'show_ahp_on_payslip')
        self.show_ahp_on_payslip = attributes[:'show_ahp_on_payslip']
      end

      if attributes.key?(:'accrue_payment_in_lieu_rate')
        self.accrue_payment_in_lieu_rate = attributes[:'accrue_payment_in_lieu_rate']
      end

      if attributes.key?(:'accrue_payment_in_lieu_all_gross_pay')
        self.accrue_payment_in_lieu_all_gross_pay = attributes[:'accrue_payment_in_lieu_all_gross_pay']
      end

      if attributes.key?(:'accrue_payment_in_lieu_pay_automatically')
        self.accrue_payment_in_lieu_pay_automatically = attributes[:'accrue_payment_in_lieu_pay_automatically']
      end

      if attributes.key?(:'accrued_payment_liability')
        self.accrued_payment_liability = attributes[:'accrued_payment_liability']
      end

      if attributes.key?(:'accrued_payment_adjustment')
        self.accrued_payment_adjustment = attributes[:'accrued_payment_adjustment']
      end

      if attributes.key?(:'accrued_payment_paid')
        self.accrued_payment_paid = attributes[:'accrued_payment_paid']
      end

      if attributes.key?(:'accrued_payment_balance')
        self.accrued_payment_balance = attributes[:'accrued_payment_balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          use_default_holiday_type == o.use_default_holiday_type &&
          use_default_allowance_reset_date == o.use_default_allowance_reset_date &&
          use_default_allowance == o.use_default_allowance &&
          use_default_accrue_payment_in_lieu == o.use_default_accrue_payment_in_lieu &&
          use_default_accrue_payment_in_lieu_rate == o.use_default_accrue_payment_in_lieu_rate &&
          use_default_accrue_payment_in_lieu_all_gross_pay == o.use_default_accrue_payment_in_lieu_all_gross_pay &&
          use_default_accrue_payment_in_lieu_pay_automatically == o.use_default_accrue_payment_in_lieu_pay_automatically &&
          use_default_accrue_hours_per_day == o.use_default_accrue_hours_per_day &&
          allowance_reset_date == o.allowance_reset_date &&
          allowance == o.allowance &&
          adjustment == o.adjustment &&
          allowance_used == o.allowance_used &&
          allowance_used_previous_period == o.allowance_used_previous_period &&
          allowance_remaining == o.allowance_remaining &&
          holiday_type == o.holiday_type &&
          accrue_set_amount == o.accrue_set_amount &&
          accrue_hours_per_day == o.accrue_hours_per_day &&
          show_allowance_on_payslip == o.show_allowance_on_payslip &&
          show_ahp_on_payslip == o.show_ahp_on_payslip &&
          accrue_payment_in_lieu_rate == o.accrue_payment_in_lieu_rate &&
          accrue_payment_in_lieu_all_gross_pay == o.accrue_payment_in_lieu_all_gross_pay &&
          accrue_payment_in_lieu_pay_automatically == o.accrue_payment_in_lieu_pay_automatically &&
          accrued_payment_liability == o.accrued_payment_liability &&
          accrued_payment_adjustment == o.accrued_payment_adjustment &&
          accrued_payment_paid == o.accrued_payment_paid &&
          accrued_payment_balance == o.accrued_payment_balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [use_default_holiday_type, use_default_allowance_reset_date, use_default_allowance, use_default_accrue_payment_in_lieu, use_default_accrue_payment_in_lieu_rate, use_default_accrue_payment_in_lieu_all_gross_pay, use_default_accrue_payment_in_lieu_pay_automatically, use_default_accrue_hours_per_day, allowance_reset_date, allowance, adjustment, allowance_used, allowance_used_previous_period, allowance_remaining, holiday_type, accrue_set_amount, accrue_hours_per_day, show_allowance_on_payslip, show_ahp_on_payslip, accrue_payment_in_lieu_rate, accrue_payment_in_lieu_all_gross_pay, accrue_payment_in_lieu_pay_automatically, accrued_payment_liability, accrued_payment_adjustment, accrued_payment_paid, accrued_payment_balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
