=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class GrossToNetReportLine
    attr_accessor :total_gross

    attr_accessor :taxable_gross

    attr_accessor :net_pay

    attr_accessor :tax

    attr_accessor :employee_ni

    attr_accessor :employer_ni

    attr_accessor :employee_pension

    attr_accessor :employer_pension

    attr_accessor :student_or_pg_loan

    attr_accessor :statutory_payments

    attr_accessor :attachments

    attr_accessor :other_deductions

    attr_accessor :employee

    attr_accessor :payroll_code

    attr_accessor :department

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total_gross' => :'totalGross',
        :'taxable_gross' => :'taxableGross',
        :'net_pay' => :'netPay',
        :'tax' => :'tax',
        :'employee_ni' => :'employeeNi',
        :'employer_ni' => :'employerNi',
        :'employee_pension' => :'employeePension',
        :'employer_pension' => :'employerPension',
        :'student_or_pg_loan' => :'studentOrPgLoan',
        :'statutory_payments' => :'statutoryPayments',
        :'attachments' => :'attachments',
        :'other_deductions' => :'otherDeductions',
        :'employee' => :'employee',
        :'payroll_code' => :'payrollCode',
        :'department' => :'department'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'total_gross' => :'Object',
        :'taxable_gross' => :'Object',
        :'net_pay' => :'Object',
        :'tax' => :'Object',
        :'employee_ni' => :'Object',
        :'employer_ni' => :'Object',
        :'employee_pension' => :'Object',
        :'employer_pension' => :'Object',
        :'student_or_pg_loan' => :'Object',
        :'statutory_payments' => :'Object',
        :'attachments' => :'Object',
        :'other_deductions' => :'Object',
        :'employee' => :'Object',
        :'payroll_code' => :'Object',
        :'department' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'payroll_code',
        :'department'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::GrossToNetReportLine` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::GrossToNetReportLine`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'total_gross')
        self.total_gross = attributes[:'total_gross']
      end

      if attributes.key?(:'taxable_gross')
        self.taxable_gross = attributes[:'taxable_gross']
      end

      if attributes.key?(:'net_pay')
        self.net_pay = attributes[:'net_pay']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'employee_ni')
        self.employee_ni = attributes[:'employee_ni']
      end

      if attributes.key?(:'employer_ni')
        self.employer_ni = attributes[:'employer_ni']
      end

      if attributes.key?(:'employee_pension')
        self.employee_pension = attributes[:'employee_pension']
      end

      if attributes.key?(:'employer_pension')
        self.employer_pension = attributes[:'employer_pension']
      end

      if attributes.key?(:'student_or_pg_loan')
        self.student_or_pg_loan = attributes[:'student_or_pg_loan']
      end

      if attributes.key?(:'statutory_payments')
        self.statutory_payments = attributes[:'statutory_payments']
      end

      if attributes.key?(:'attachments')
        self.attachments = attributes[:'attachments']
      end

      if attributes.key?(:'other_deductions')
        self.other_deductions = attributes[:'other_deductions']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'payroll_code')
        self.payroll_code = attributes[:'payroll_code']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total_gross == o.total_gross &&
          taxable_gross == o.taxable_gross &&
          net_pay == o.net_pay &&
          tax == o.tax &&
          employee_ni == o.employee_ni &&
          employer_ni == o.employer_ni &&
          employee_pension == o.employee_pension &&
          employer_pension == o.employer_pension &&
          student_or_pg_loan == o.student_or_pg_loan &&
          statutory_payments == o.statutory_payments &&
          attachments == o.attachments &&
          other_deductions == o.other_deductions &&
          employee == o.employee &&
          payroll_code == o.payroll_code &&
          department == o.department
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [total_gross, taxable_gross, net_pay, tax, employee_ni, employer_ni, employee_pension, employer_pension, student_or_pg_loan, statutory_payments, attachments, other_deductions, employee, payroll_code, department].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
