=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class Employer
    attr_accessor :name

    # Company Registration Number
    attr_accessor :crn

    attr_accessor :logo_url

    attr_accessor :alternative_id

    attr_accessor :bank_payments_csv_format

    attr_accessor :bacs_service_user_number

    attr_accessor :bacs_bureau_number

    attr_accessor :reject_invalid_bank_details

    attr_accessor :bank_payments_reference_format

    attr_accessor :address

    attr_accessor :bank_details

    attr_accessor :default_pay_options

    attr_accessor :hmrc_details

    attr_accessor :default_pension

    attr_accessor :rti_submission_settings

    attr_accessor :auto_enrolment_settings

    attr_accessor :leave_settings

    attr_accessor :settings

    attr_accessor :umbrella_settings

    # [readonly] The number of Employees this Employer has, including CIS Subcontractors.
    attr_accessor :employee_count

    # [readonly] The number of CIS Subcontractors this Employer has.
    attr_accessor :subcontractor_count

    attr_accessor :start_year

    attr_accessor :current_year

    # If set to true then the support team can access this employer to help resolve  support queries
    attr_accessor :support_access_enabled

    # A flag to indicate whather or not the employer is Archived, ie no longer actively used
    attr_accessor :archived

    attr_accessor :can_use_bureau_features

    # [readonly] The unique id of the object
    attr_accessor :id

    # [readonly] Can only be given a value when the employer is created. It can then never be changed.\\n  Used by external systems so they can store an immutable reference
    attr_accessor :source_system_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'crn' => :'crn',
        :'logo_url' => :'logoUrl',
        :'alternative_id' => :'alternativeId',
        :'bank_payments_csv_format' => :'bankPaymentsCsvFormat',
        :'bacs_service_user_number' => :'bacsServiceUserNumber',
        :'bacs_bureau_number' => :'bacsBureauNumber',
        :'reject_invalid_bank_details' => :'rejectInvalidBankDetails',
        :'bank_payments_reference_format' => :'bankPaymentsReferenceFormat',
        :'address' => :'address',
        :'bank_details' => :'bankDetails',
        :'default_pay_options' => :'defaultPayOptions',
        :'hmrc_details' => :'hmrcDetails',
        :'default_pension' => :'defaultPension',
        :'rti_submission_settings' => :'rtiSubmissionSettings',
        :'auto_enrolment_settings' => :'autoEnrolmentSettings',
        :'leave_settings' => :'leaveSettings',
        :'settings' => :'settings',
        :'umbrella_settings' => :'umbrellaSettings',
        :'employee_count' => :'employeeCount',
        :'subcontractor_count' => :'subcontractorCount',
        :'start_year' => :'startYear',
        :'current_year' => :'currentYear',
        :'support_access_enabled' => :'supportAccessEnabled',
        :'archived' => :'archived',
        :'can_use_bureau_features' => :'canUseBureauFeatures',
        :'id' => :'id',
        :'source_system_id' => :'sourceSystemId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'crn' => :'Object',
        :'logo_url' => :'Object',
        :'alternative_id' => :'Object',
        :'bank_payments_csv_format' => :'Object',
        :'bacs_service_user_number' => :'Object',
        :'bacs_bureau_number' => :'Object',
        :'reject_invalid_bank_details' => :'Object',
        :'bank_payments_reference_format' => :'Object',
        :'address' => :'Object',
        :'bank_details' => :'Object',
        :'default_pay_options' => :'Object',
        :'hmrc_details' => :'Object',
        :'default_pension' => :'Object',
        :'rti_submission_settings' => :'Object',
        :'auto_enrolment_settings' => :'Object',
        :'leave_settings' => :'Object',
        :'settings' => :'Object',
        :'umbrella_settings' => :'Object',
        :'employee_count' => :'Object',
        :'subcontractor_count' => :'Object',
        :'start_year' => :'Object',
        :'current_year' => :'Object',
        :'support_access_enabled' => :'Object',
        :'archived' => :'Object',
        :'can_use_bureau_features' => :'Object',
        :'id' => :'Object',
        :'source_system_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'crn',
        :'logo_url',
        :'alternative_id',
        :'bacs_service_user_number',
        :'bacs_bureau_number',
        :'bank_payments_reference_format',
        :'source_system_id'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Employer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Employer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'crn')
        self.crn = attributes[:'crn']
      end

      if attributes.key?(:'logo_url')
        self.logo_url = attributes[:'logo_url']
      end

      if attributes.key?(:'alternative_id')
        self.alternative_id = attributes[:'alternative_id']
      end

      if attributes.key?(:'bank_payments_csv_format')
        self.bank_payments_csv_format = attributes[:'bank_payments_csv_format']
      end

      if attributes.key?(:'bacs_service_user_number')
        self.bacs_service_user_number = attributes[:'bacs_service_user_number']
      end

      if attributes.key?(:'bacs_bureau_number')
        self.bacs_bureau_number = attributes[:'bacs_bureau_number']
      end

      if attributes.key?(:'reject_invalid_bank_details')
        self.reject_invalid_bank_details = attributes[:'reject_invalid_bank_details']
      end

      if attributes.key?(:'bank_payments_reference_format')
        self.bank_payments_reference_format = attributes[:'bank_payments_reference_format']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'bank_details')
        self.bank_details = attributes[:'bank_details']
      end

      if attributes.key?(:'default_pay_options')
        self.default_pay_options = attributes[:'default_pay_options']
      end

      if attributes.key?(:'hmrc_details')
        self.hmrc_details = attributes[:'hmrc_details']
      end

      if attributes.key?(:'default_pension')
        self.default_pension = attributes[:'default_pension']
      end

      if attributes.key?(:'rti_submission_settings')
        self.rti_submission_settings = attributes[:'rti_submission_settings']
      end

      if attributes.key?(:'auto_enrolment_settings')
        self.auto_enrolment_settings = attributes[:'auto_enrolment_settings']
      end

      if attributes.key?(:'leave_settings')
        self.leave_settings = attributes[:'leave_settings']
      end

      if attributes.key?(:'settings')
        self.settings = attributes[:'settings']
      end

      if attributes.key?(:'umbrella_settings')
        self.umbrella_settings = attributes[:'umbrella_settings']
      end

      if attributes.key?(:'employee_count')
        self.employee_count = attributes[:'employee_count']
      end

      if attributes.key?(:'subcontractor_count')
        self.subcontractor_count = attributes[:'subcontractor_count']
      end

      if attributes.key?(:'start_year')
        self.start_year = attributes[:'start_year']
      end

      if attributes.key?(:'current_year')
        self.current_year = attributes[:'current_year']
      end

      if attributes.key?(:'support_access_enabled')
        self.support_access_enabled = attributes[:'support_access_enabled']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'can_use_bureau_features')
        self.can_use_bureau_features = attributes[:'can_use_bureau_features']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'source_system_id')
        self.source_system_id = attributes[:'source_system_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          crn == o.crn &&
          logo_url == o.logo_url &&
          alternative_id == o.alternative_id &&
          bank_payments_csv_format == o.bank_payments_csv_format &&
          bacs_service_user_number == o.bacs_service_user_number &&
          bacs_bureau_number == o.bacs_bureau_number &&
          reject_invalid_bank_details == o.reject_invalid_bank_details &&
          bank_payments_reference_format == o.bank_payments_reference_format &&
          address == o.address &&
          bank_details == o.bank_details &&
          default_pay_options == o.default_pay_options &&
          hmrc_details == o.hmrc_details &&
          default_pension == o.default_pension &&
          rti_submission_settings == o.rti_submission_settings &&
          auto_enrolment_settings == o.auto_enrolment_settings &&
          leave_settings == o.leave_settings &&
          settings == o.settings &&
          umbrella_settings == o.umbrella_settings &&
          employee_count == o.employee_count &&
          subcontractor_count == o.subcontractor_count &&
          start_year == o.start_year &&
          current_year == o.current_year &&
          support_access_enabled == o.support_access_enabled &&
          archived == o.archived &&
          can_use_bureau_features == o.can_use_bureau_features &&
          id == o.id &&
          source_system_id == o.source_system_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, crn, logo_url, alternative_id, bank_payments_csv_format, bacs_service_user_number, bacs_bureau_number, reject_invalid_bank_details, bank_payments_reference_format, address, bank_details, default_pay_options, hmrc_details, default_pension, rti_submission_settings, auto_enrolment_settings, leave_settings, settings, umbrella_settings, employee_count, subcontractor_count, start_year, current_year, support_access_enabled, archived, can_use_bureau_features, id, source_system_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
