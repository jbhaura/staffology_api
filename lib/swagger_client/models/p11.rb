=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # A P11 Report summarises payments and deductions made to an employee.\\n  Our Reports API can return this to you in many formats including as a PDF file\\n  If you request is as a JSOn object then it is represented using this model.
  class P11
    # [readonly]
    attr_accessor :employer_name

    # [readonly]
    attr_accessor :payroll_code

    # [readonly]
    attr_accessor :employer_office_no

    # [readonly]
    attr_accessor :employer_paye_ref

    # [readonly]
    attr_accessor :firstname

    # [readonly]
    attr_accessor :surname

    # [readonly]
    attr_accessor :ni_number

    # [readonly]
    attr_accessor :tax_code

    # [readonly]
    attr_accessor :date_of_birth

    # [readonly]
    attr_accessor :join_date

    # [readonly]
    attr_accessor :leave_date

    # [readonly]
    attr_accessor :lines

    attr_accessor :report

    attr_accessor :tax_year

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'employer_name' => :'employerName',
        :'payroll_code' => :'payrollCode',
        :'employer_office_no' => :'employerOfficeNo',
        :'employer_paye_ref' => :'employerPayeRef',
        :'firstname' => :'firstname',
        :'surname' => :'surname',
        :'ni_number' => :'niNumber',
        :'tax_code' => :'taxCode',
        :'date_of_birth' => :'dateOfBirth',
        :'join_date' => :'joinDate',
        :'leave_date' => :'leaveDate',
        :'lines' => :'lines',
        :'report' => :'report',
        :'tax_year' => :'taxYear'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'employer_name' => :'Object',
        :'payroll_code' => :'Object',
        :'employer_office_no' => :'Object',
        :'employer_paye_ref' => :'Object',
        :'firstname' => :'Object',
        :'surname' => :'Object',
        :'ni_number' => :'Object',
        :'tax_code' => :'Object',
        :'date_of_birth' => :'Object',
        :'join_date' => :'Object',
        :'leave_date' => :'Object',
        :'lines' => :'Object',
        :'report' => :'Object',
        :'tax_year' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'employer_name',
        :'payroll_code',
        :'employer_office_no',
        :'employer_paye_ref',
        :'firstname',
        :'surname',
        :'ni_number',
        :'tax_code',
        :'leave_date',
        :'lines',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::P11` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::P11`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'employer_name')
        self.employer_name = attributes[:'employer_name']
      end

      if attributes.key?(:'payroll_code')
        self.payroll_code = attributes[:'payroll_code']
      end

      if attributes.key?(:'employer_office_no')
        self.employer_office_no = attributes[:'employer_office_no']
      end

      if attributes.key?(:'employer_paye_ref')
        self.employer_paye_ref = attributes[:'employer_paye_ref']
      end

      if attributes.key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.key?(:'surname')
        self.surname = attributes[:'surname']
      end

      if attributes.key?(:'ni_number')
        self.ni_number = attributes[:'ni_number']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'join_date')
        self.join_date = attributes[:'join_date']
      end

      if attributes.key?(:'leave_date')
        self.leave_date = attributes[:'leave_date']
      end

      if attributes.key?(:'lines')
        if (value = attributes[:'lines']).is_a?(Array)
          self.lines = value
        end
      end

      if attributes.key?(:'report')
        self.report = attributes[:'report']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          employer_name == o.employer_name &&
          payroll_code == o.payroll_code &&
          employer_office_no == o.employer_office_no &&
          employer_paye_ref == o.employer_paye_ref &&
          firstname == o.firstname &&
          surname == o.surname &&
          ni_number == o.ni_number &&
          tax_code == o.tax_code &&
          date_of_birth == o.date_of_birth &&
          join_date == o.join_date &&
          leave_date == o.leave_date &&
          lines == o.lines &&
          report == o.report &&
          tax_year == o.tax_year
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [employer_name, payroll_code, employer_office_no, employer_paye_ref, firstname, surname, ni_number, tax_code, date_of_birth, join_date, leave_date, lines, report, tax_year].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
