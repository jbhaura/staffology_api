=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # A PayRun contains multiple PayRunEntries, one for each Employee that is being paid.\\n  The value for <code>PersonalDetails</code> and <code>EmploymentDetails</code> is copied from the Employee record.\\n  So to change them you should update the Employee, not the PayRunEntry.\\n  Changes made to the Employee are only reflected whilst the PayRun is still open.\\n  Once you finalise and close the PayRun then a snapshot is taken of these values which is stored with the PayRunEntry for future reference.
  class PayRunEntry
    attr_accessor :tax_year

    # [readonly] The Tax Month that the Payment Date falls in
    attr_accessor :tax_month

    # [readonly]
    attr_accessor :start_date

    # [readonly]
    attr_accessor :end_date

    # Any note that you'd like to appear on the payslip
    attr_accessor :note

    # [readonly] A randomly generated string for use with the RTI Hash Cross Reference
    attr_accessor :bacs_sub_reference

    # [readonly] A Hash Code used for RTI BACS Hash Cross Reference
    attr_accessor :bacs_hash_code

    # [readonly] If the employee is paid a set amount per period (ie, not an hourly or daily rate) and there is any Leave that is either Not Paid or Statutory Pay then this value  will give the percentage of working days (based on the Working Pattern) that should be paid as normal.  If there is no Leave in the period or PayOptions.AutoAdjustForLeave is false, then this will be 1.
    attr_accessor :percentage_of_working_days_paid_as_normal

    # [readonly] If PercentageOfWorkingDaysPaidAsNormal has a value other than 1  then this property will tell you how many working days have been deducted from the basic pay  due to either being Not Paid or Statutory Pay
    attr_accessor :working_days_not_paid_as_normal

    attr_accessor :pay_period

    # [readonly] Indicates whether this uses the first, second, third (etc) PaySchedule for this PayPeriod.
    attr_accessor :ordinal

    # [readonly] The Tax Week or Tax Month number this PayRunEntry relates to
    attr_accessor :period

    # Determines whether or not this Employee will be declared as a new starter on the resulting FPS
    attr_accessor :is_new_starter

    # [readonly] Indicates that there was unpaid absence in the pay period
    attr_accessor :unpaid_absence

    # [readonly] Indicates that there are AttachmentOrders for this Employee in this entry
    attr_accessor :has_attachment_orders

    # The date this payment was or will be made
    attr_accessor :payment_date

    # [readonly] If the FPS needs to declare a change of PayId then this will contain the previous code\\n  It's worked out automatically but can also be set from the Employees EmploymentDetails property.
    attr_accessor :prior_payroll_code

    attr_accessor :pay_options

    attr_accessor :pension_summary

    attr_accessor :employee

    attr_accessor :totals

    # Any calculated values for this period that should be overridden with a different value
    attr_accessor :period_overrides

    attr_accessor :totals_ytd

    # Any values of TotalsYtd that should be overridden with a different value
    attr_accessor :totals_ytd_overrides

    # If this employee is a CIS Subcontractor registered for VAT, we'll automatically work out VAT at the set rate.\\n  If you want to override this calculations then set this property to anything other than null.
    attr_accessor :forced_cis_vat_amount

    # The amount of holiday days accrued in the period.
    attr_accessor :holiday_accrued

    attr_accessor :state

    # [readonly] Set to True if the PayRun is Finalised and changes can no longer be made to the PayRunEntries
    attr_accessor :is_closed

    # If set to true then you must provide your own value for NationalInsuranceCalculation.  You'd normally leave this set to false and let us automatically calculate NI amounts.
    attr_accessor :manual_ni

    attr_accessor :national_insurance_calculation

    # [readonly] Indicates whether or not the Payroll Code for this Employee has changed since the last FPS
    attr_accessor :payroll_code_changed

    # [readonly] If true then this Employee needs to be on an Auto Enrolment pension but isn't yet.
    attr_accessor :ae_not_enroled_warning

    attr_accessor :fps

    # If the Payslip for this PayRunEntry has been emailed to the employee then the Id for an EmployerEmail will be provided here.  if the value is all zeroes then the email is in the process of being created.
    attr_accessor :email_id

    # If the pay is being topped up due to an applied Leave having the offset value set to true then  this will be set to true
    attr_accessor :recieving_offset_pay

    # [readonly] If this payment is for an employee that has left then this is set to true.
    attr_accessor :payment_after_leaving

    attr_accessor :umbrella_payment

    # [readonly] The unique id of the object
    attr_accessor :id

    attr_accessor :personal_details

    attr_accessor :employment_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_year' => :'taxYear',
        :'tax_month' => :'taxMonth',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'note' => :'note',
        :'bacs_sub_reference' => :'bacsSubReference',
        :'bacs_hash_code' => :'bacsHashCode',
        :'percentage_of_working_days_paid_as_normal' => :'percentageOfWorkingDaysPaidAsNormal',
        :'working_days_not_paid_as_normal' => :'workingDaysNotPaidAsNormal',
        :'pay_period' => :'payPeriod',
        :'ordinal' => :'ordinal',
        :'period' => :'period',
        :'is_new_starter' => :'isNewStarter',
        :'unpaid_absence' => :'unpaidAbsence',
        :'has_attachment_orders' => :'hasAttachmentOrders',
        :'payment_date' => :'paymentDate',
        :'prior_payroll_code' => :'priorPayrollCode',
        :'pay_options' => :'payOptions',
        :'pension_summary' => :'pensionSummary',
        :'employee' => :'employee',
        :'totals' => :'totals',
        :'period_overrides' => :'periodOverrides',
        :'totals_ytd' => :'totalsYtd',
        :'totals_ytd_overrides' => :'totalsYtdOverrides',
        :'forced_cis_vat_amount' => :'forcedCisVatAmount',
        :'holiday_accrued' => :'holidayAccrued',
        :'state' => :'state',
        :'is_closed' => :'isClosed',
        :'manual_ni' => :'manualNi',
        :'national_insurance_calculation' => :'nationalInsuranceCalculation',
        :'payroll_code_changed' => :'payrollCodeChanged',
        :'ae_not_enroled_warning' => :'aeNotEnroledWarning',
        :'fps' => :'fps',
        :'email_id' => :'emailId',
        :'recieving_offset_pay' => :'recievingOffsetPay',
        :'payment_after_leaving' => :'paymentAfterLeaving',
        :'umbrella_payment' => :'umbrellaPayment',
        :'id' => :'id',
        :'personal_details' => :'personalDetails',
        :'employment_details' => :'employmentDetails'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_year' => :'Object',
        :'tax_month' => :'Object',
        :'start_date' => :'Object',
        :'end_date' => :'Object',
        :'note' => :'Object',
        :'bacs_sub_reference' => :'Object',
        :'bacs_hash_code' => :'Object',
        :'percentage_of_working_days_paid_as_normal' => :'Object',
        :'working_days_not_paid_as_normal' => :'Object',
        :'pay_period' => :'Object',
        :'ordinal' => :'Object',
        :'period' => :'Object',
        :'is_new_starter' => :'Object',
        :'unpaid_absence' => :'Object',
        :'has_attachment_orders' => :'Object',
        :'payment_date' => :'Object',
        :'prior_payroll_code' => :'Object',
        :'pay_options' => :'Object',
        :'pension_summary' => :'Object',
        :'employee' => :'Object',
        :'totals' => :'Object',
        :'period_overrides' => :'Object',
        :'totals_ytd' => :'Object',
        :'totals_ytd_overrides' => :'Object',
        :'forced_cis_vat_amount' => :'Object',
        :'holiday_accrued' => :'Object',
        :'state' => :'Object',
        :'is_closed' => :'Object',
        :'manual_ni' => :'Object',
        :'national_insurance_calculation' => :'Object',
        :'payroll_code_changed' => :'Object',
        :'ae_not_enroled_warning' => :'Object',
        :'fps' => :'Object',
        :'email_id' => :'Object',
        :'recieving_offset_pay' => :'Object',
        :'payment_after_leaving' => :'Object',
        :'umbrella_payment' => :'Object',
        :'id' => :'Object',
        :'personal_details' => :'Object',
        :'employment_details' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'note',
        :'bacs_sub_reference',
        :'bacs_hash_code',
        :'prior_payroll_code',
        :'period_overrides',
        :'totals_ytd_overrides',
        :'forced_cis_vat_amount',
        :'email_id',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PayRunEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PayRunEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'tax_month')
        self.tax_month = attributes[:'tax_month']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'bacs_sub_reference')
        self.bacs_sub_reference = attributes[:'bacs_sub_reference']
      end

      if attributes.key?(:'bacs_hash_code')
        self.bacs_hash_code = attributes[:'bacs_hash_code']
      end

      if attributes.key?(:'percentage_of_working_days_paid_as_normal')
        self.percentage_of_working_days_paid_as_normal = attributes[:'percentage_of_working_days_paid_as_normal']
      end

      if attributes.key?(:'working_days_not_paid_as_normal')
        self.working_days_not_paid_as_normal = attributes[:'working_days_not_paid_as_normal']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'is_new_starter')
        self.is_new_starter = attributes[:'is_new_starter']
      end

      if attributes.key?(:'unpaid_absence')
        self.unpaid_absence = attributes[:'unpaid_absence']
      end

      if attributes.key?(:'has_attachment_orders')
        self.has_attachment_orders = attributes[:'has_attachment_orders']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'prior_payroll_code')
        self.prior_payroll_code = attributes[:'prior_payroll_code']
      end

      if attributes.key?(:'pay_options')
        self.pay_options = attributes[:'pay_options']
      end

      if attributes.key?(:'pension_summary')
        self.pension_summary = attributes[:'pension_summary']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'totals')
        self.totals = attributes[:'totals']
      end

      if attributes.key?(:'period_overrides')
        if (value = attributes[:'period_overrides']).is_a?(Array)
          self.period_overrides = value
        end
      end

      if attributes.key?(:'totals_ytd')
        self.totals_ytd = attributes[:'totals_ytd']
      end

      if attributes.key?(:'totals_ytd_overrides')
        if (value = attributes[:'totals_ytd_overrides']).is_a?(Array)
          self.totals_ytd_overrides = value
        end
      end

      if attributes.key?(:'forced_cis_vat_amount')
        self.forced_cis_vat_amount = attributes[:'forced_cis_vat_amount']
      end

      if attributes.key?(:'holiday_accrued')
        self.holiday_accrued = attributes[:'holiday_accrued']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'is_closed')
        self.is_closed = attributes[:'is_closed']
      end

      if attributes.key?(:'manual_ni')
        self.manual_ni = attributes[:'manual_ni']
      end

      if attributes.key?(:'national_insurance_calculation')
        self.national_insurance_calculation = attributes[:'national_insurance_calculation']
      end

      if attributes.key?(:'payroll_code_changed')
        self.payroll_code_changed = attributes[:'payroll_code_changed']
      end

      if attributes.key?(:'ae_not_enroled_warning')
        self.ae_not_enroled_warning = attributes[:'ae_not_enroled_warning']
      end

      if attributes.key?(:'fps')
        self.fps = attributes[:'fps']
      end

      if attributes.key?(:'email_id')
        self.email_id = attributes[:'email_id']
      end

      if attributes.key?(:'recieving_offset_pay')
        self.recieving_offset_pay = attributes[:'recieving_offset_pay']
      end

      if attributes.key?(:'payment_after_leaving')
        self.payment_after_leaving = attributes[:'payment_after_leaving']
      end

      if attributes.key?(:'umbrella_payment')
        self.umbrella_payment = attributes[:'umbrella_payment']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'personal_details')
        self.personal_details = attributes[:'personal_details']
      end

      if attributes.key?(:'employment_details')
        self.employment_details = attributes[:'employment_details']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_year == o.tax_year &&
          tax_month == o.tax_month &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          note == o.note &&
          bacs_sub_reference == o.bacs_sub_reference &&
          bacs_hash_code == o.bacs_hash_code &&
          percentage_of_working_days_paid_as_normal == o.percentage_of_working_days_paid_as_normal &&
          working_days_not_paid_as_normal == o.working_days_not_paid_as_normal &&
          pay_period == o.pay_period &&
          ordinal == o.ordinal &&
          period == o.period &&
          is_new_starter == o.is_new_starter &&
          unpaid_absence == o.unpaid_absence &&
          has_attachment_orders == o.has_attachment_orders &&
          payment_date == o.payment_date &&
          prior_payroll_code == o.prior_payroll_code &&
          pay_options == o.pay_options &&
          pension_summary == o.pension_summary &&
          employee == o.employee &&
          totals == o.totals &&
          period_overrides == o.period_overrides &&
          totals_ytd == o.totals_ytd &&
          totals_ytd_overrides == o.totals_ytd_overrides &&
          forced_cis_vat_amount == o.forced_cis_vat_amount &&
          holiday_accrued == o.holiday_accrued &&
          state == o.state &&
          is_closed == o.is_closed &&
          manual_ni == o.manual_ni &&
          national_insurance_calculation == o.national_insurance_calculation &&
          payroll_code_changed == o.payroll_code_changed &&
          ae_not_enroled_warning == o.ae_not_enroled_warning &&
          fps == o.fps &&
          email_id == o.email_id &&
          recieving_offset_pay == o.recieving_offset_pay &&
          payment_after_leaving == o.payment_after_leaving &&
          umbrella_payment == o.umbrella_payment &&
          id == o.id &&
          personal_details == o.personal_details &&
          employment_details == o.employment_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_year, tax_month, start_date, end_date, note, bacs_sub_reference, bacs_hash_code, percentage_of_working_days_paid_as_normal, working_days_not_paid_as_normal, pay_period, ordinal, period, is_new_starter, unpaid_absence, has_attachment_orders, payment_date, prior_payroll_code, pay_options, pension_summary, employee, totals, period_overrides, totals_ytd, totals_ytd_overrides, forced_cis_vat_amount, holiday_accrued, state, is_closed, manual_ni, national_insurance_calculation, payroll_code_changed, ae_not_enroled_warning, fps, email_id, recieving_offset_pay, payment_after_leaving, umbrella_payment, id, personal_details, employment_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
