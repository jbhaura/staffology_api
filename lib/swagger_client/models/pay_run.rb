=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # This model is right at the very heart of the software.\\n  There is a PayRun for each period in which people are paid.
  class PayRun
    attr_accessor :tax_year

    # [readonly] The Tax Month that the Payment Date falls in
    attr_accessor :tax_month

    attr_accessor :pay_period

    # [readonly] Indicates whether this uses first, second, third (etc.) PaySchedule for this PayPeriod.
    attr_accessor :ordinal

    # [readonly] The period (i.e, Tax Week or Tax Month) that this PayRun is for.
    attr_accessor :period

    # [readonly] The start date of the period this PayRun covers
    attr_accessor :start_date

    # [readonly] The end date of the period this PayRun covers
    attr_accessor :end_date

    # [readonly] The intended date that Employees will be paid, although this can be changed on a per PayRunEntry basis
    attr_accessor :payment_date

    # [readonly] The number of Employees included in this PayRun (including any CIS Subcontractors)
    attr_accessor :employee_count

    # [readonly] The number of CIS Subcontractors included in this PayRun
    attr_accessor :sub_contractor_count

    attr_accessor :totals

    attr_accessor :state

    # [readonly] Set to True if the PayRun is Finalised and changes can no longer be made
    attr_accessor :is_closed

    attr_accessor :date_closed

    # [readonly] If AutoPilot is enabled in the AutomationSettings for the Employer then this property will tell you when  the payrun will be automatically closed
    attr_accessor :auto_pilot_close_date

    # [readonly] The PayRunEntries that make up this PayRun.\\n  This is populate automatically when you start a PayRun.
    attr_accessor :entries

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_year' => :'taxYear',
        :'tax_month' => :'taxMonth',
        :'pay_period' => :'payPeriod',
        :'ordinal' => :'ordinal',
        :'period' => :'period',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'payment_date' => :'paymentDate',
        :'employee_count' => :'employeeCount',
        :'sub_contractor_count' => :'subContractorCount',
        :'totals' => :'totals',
        :'state' => :'state',
        :'is_closed' => :'isClosed',
        :'date_closed' => :'dateClosed',
        :'auto_pilot_close_date' => :'autoPilotCloseDate',
        :'entries' => :'entries'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_year' => :'Object',
        :'tax_month' => :'Object',
        :'pay_period' => :'Object',
        :'ordinal' => :'Object',
        :'period' => :'Object',
        :'start_date' => :'Object',
        :'end_date' => :'Object',
        :'payment_date' => :'Object',
        :'employee_count' => :'Object',
        :'sub_contractor_count' => :'Object',
        :'totals' => :'Object',
        :'state' => :'Object',
        :'is_closed' => :'Object',
        :'date_closed' => :'Object',
        :'auto_pilot_close_date' => :'Object',
        :'entries' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'date_closed',
        :'auto_pilot_close_date',
        :'entries'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PayRun` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PayRun`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'tax_month')
        self.tax_month = attributes[:'tax_month']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'employee_count')
        self.employee_count = attributes[:'employee_count']
      end

      if attributes.key?(:'sub_contractor_count')
        self.sub_contractor_count = attributes[:'sub_contractor_count']
      end

      if attributes.key?(:'totals')
        self.totals = attributes[:'totals']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'is_closed')
        self.is_closed = attributes[:'is_closed']
      end

      if attributes.key?(:'date_closed')
        self.date_closed = attributes[:'date_closed']
      end

      if attributes.key?(:'auto_pilot_close_date')
        self.auto_pilot_close_date = attributes[:'auto_pilot_close_date']
      end

      if attributes.key?(:'entries')
        if (value = attributes[:'entries']).is_a?(Array)
          self.entries = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_year == o.tax_year &&
          tax_month == o.tax_month &&
          pay_period == o.pay_period &&
          ordinal == o.ordinal &&
          period == o.period &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          payment_date == o.payment_date &&
          employee_count == o.employee_count &&
          sub_contractor_count == o.sub_contractor_count &&
          totals == o.totals &&
          state == o.state &&
          is_closed == o.is_closed &&
          date_closed == o.date_closed &&
          auto_pilot_close_date == o.auto_pilot_close_date &&
          entries == o.entries
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_year, tax_month, pay_period, ordinal, period, start_date, end_date, payment_date, employee_count, sub_contractor_count, totals, state, is_closed, date_closed, auto_pilot_close_date, entries].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
