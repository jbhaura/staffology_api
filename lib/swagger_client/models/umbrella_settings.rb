=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class UmbrellaSettings
    attr_accessor :enabled

    attr_accessor :charge_per_timesheet

    attr_accessor :apprenticeship_levy_dedn_rate

    attr_accessor :holiday_rate

    attr_accessor :dpsb_code

    attr_accessor :expenses_code

    attr_accessor :gross_deduction_code

    attr_accessor :holiday_code

    attr_accessor :cis_fee_code

    attr_accessor :detail_fee_in_comment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'charge_per_timesheet' => :'chargePerTimesheet',
        :'apprenticeship_levy_dedn_rate' => :'apprenticeshipLevyDednRate',
        :'holiday_rate' => :'holidayRate',
        :'dpsb_code' => :'dpsbCode',
        :'expenses_code' => :'expensesCode',
        :'gross_deduction_code' => :'grossDeductionCode',
        :'holiday_code' => :'holidayCode',
        :'cis_fee_code' => :'cisFeeCode',
        :'detail_fee_in_comment' => :'detailFeeInComment'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'enabled' => :'Object',
        :'charge_per_timesheet' => :'Object',
        :'apprenticeship_levy_dedn_rate' => :'Object',
        :'holiday_rate' => :'Object',
        :'dpsb_code' => :'Object',
        :'expenses_code' => :'Object',
        :'gross_deduction_code' => :'Object',
        :'holiday_code' => :'Object',
        :'cis_fee_code' => :'Object',
        :'detail_fee_in_comment' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'dpsb_code',
        :'expenses_code',
        :'gross_deduction_code',
        :'holiday_code',
        :'cis_fee_code',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::UmbrellaSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::UmbrellaSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'charge_per_timesheet')
        self.charge_per_timesheet = attributes[:'charge_per_timesheet']
      end

      if attributes.key?(:'apprenticeship_levy_dedn_rate')
        self.apprenticeship_levy_dedn_rate = attributes[:'apprenticeship_levy_dedn_rate']
      end

      if attributes.key?(:'holiday_rate')
        self.holiday_rate = attributes[:'holiday_rate']
      end

      if attributes.key?(:'dpsb_code')
        self.dpsb_code = attributes[:'dpsb_code']
      end

      if attributes.key?(:'expenses_code')
        self.expenses_code = attributes[:'expenses_code']
      end

      if attributes.key?(:'gross_deduction_code')
        self.gross_deduction_code = attributes[:'gross_deduction_code']
      end

      if attributes.key?(:'holiday_code')
        self.holiday_code = attributes[:'holiday_code']
      end

      if attributes.key?(:'cis_fee_code')
        self.cis_fee_code = attributes[:'cis_fee_code']
      end

      if attributes.key?(:'detail_fee_in_comment')
        self.detail_fee_in_comment = attributes[:'detail_fee_in_comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          charge_per_timesheet == o.charge_per_timesheet &&
          apprenticeship_levy_dedn_rate == o.apprenticeship_levy_dedn_rate &&
          holiday_rate == o.holiday_rate &&
          dpsb_code == o.dpsb_code &&
          expenses_code == o.expenses_code &&
          gross_deduction_code == o.gross_deduction_code &&
          holiday_code == o.holiday_code &&
          cis_fee_code == o.cis_fee_code &&
          detail_fee_in_comment == o.detail_fee_in_comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [enabled, charge_per_timesheet, apprenticeship_levy_dedn_rate, holiday_rate, dpsb_code, expenses_code, gross_deduction_code, holiday_code, cis_fee_code, detail_fee_in_comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
