=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class PayrollValueType
    BASIC_PAY = 'BasicPay'.freeze
    GROSS = 'Gross'.freeze
    GROSS_FOR_TAX = 'GrossForTax'.freeze
    GROSS_FOR_NI = 'GrossForNi'.freeze
    EMPLOYER_NI = 'EmployerNi'.freeze
    EMPLOYEE_NI = 'EmployeeNi'.freeze
    EMPLOYER_NI_OFF_PAYROLL = 'EmployerNiOffPayroll'.freeze
    REAL_TIME_CLASS1_A_NI = 'RealTimeClass1ANi'.freeze
    TAX = 'Tax'.freeze
    NET_PAY = 'NetPay'.freeze
    ADJUSTMENTS = 'Adjustments'.freeze
    TAKE_HOME_PAY = 'TakeHomePay'.freeze
    NON_TAX_OR_NIC_PMT = 'NonTaxOrNICPmt'.freeze
    ITEMS_SUBJECT_TO_CLASS1_NIC = 'ItemsSubjectToClass1NIC'.freeze
    DEDNS_FROM_NET_PAY = 'DednsFromNetPay'.freeze
    TCP_TCLS = 'Tcp_Tcls'.freeze
    TCP_PP = 'Tcp_Pp'.freeze
    TCP_OP = 'Tcp_Op'.freeze
    FLEXI_DD_DEATH = 'FlexiDd_Death'.freeze
    FLEXI_DD_DEATH_NON_TAX = 'FlexiDd_Death_NonTax'.freeze
    FLEXI_DD_PENSION = 'FlexiDd_Pension'.freeze
    FLEXI_DD_PENSION_NON_TAX = 'FlexiDd_Pension_NonTax'.freeze
    SMP = 'Smp'.freeze
    SPP = 'Spp'.freeze
    SAP = 'Sap'.freeze
    SHPP = 'Shpp'.freeze
    SPBP = 'Spbp'.freeze
    STUDENT_LOAN_RECOVERED = 'StudentLoanRecovered'.freeze
    POSTGRAD_LOAN_RECOVERED = 'PostgradLoanRecovered'.freeze
    PENSIONABLE_PAY = 'PensionablePay'.freeze
    NON_TIERABLE_PAY = 'NonTierablePay'.freeze
    EMPLOYEE_PENSION_CONTRIBUTION = 'EmployeePensionContribution'.freeze
    EMPLOYER_PENSION_CONTRIBUTION = 'EmployerPensionContribution'.freeze
    EMPEE_PEN_CONTRIBNS_NOT_PAID = 'EmpeePenContribnsNotPaid'.freeze
    EMPEE_PEN_CONTRIBNS_PAID = 'EmpeePenContribnsPaid'.freeze
    ATTACHMENT_ORDER_DEDUCTIONS = 'AttachmentOrderDeductions'.freeze
    CIS_DEDUCTION = 'CisDeduction'.freeze
    CIS_VAT = 'CisVat'.freeze
    CIS_UMBRELLA_FEE = 'CisUmbrellaFee'.freeze
    CIS_UMBRELLA_FEE_POST_TAX = 'CisUmbrellaFeePostTax'.freeze
    PBIK = 'Pbik'.freeze
    MAPS_MILES = 'MapsMiles'.freeze
    UMBRELLA_FEE = 'UmbrellaFee'.freeze
    APP_LEVY_DEDUCTION = 'AppLevyDeduction'.freeze
    PAYMENT_AFTER_LEAVING = 'PaymentAfterLeaving'.freeze
    TAX_ON_PAYMENT_AFTER_LEAVING = 'TaxOnPaymentAfterLeaving'.freeze
    SSP = 'Ssp'.freeze
    ATTACHMENT_ORDER_ADMIN_FEE = 'AttachmentOrderAdminFee'.freeze
    EMPLOYEE_PENSION_NET_PAY = 'EmployeePensionNetPay'.freeze
    EMPLOYEE_PENSION_RAS = 'EmployeePensionRas'.freeze
    EMPLOYEE_PENSION_SAL_SAC = 'EmployeePensionSalSac'.freeze
    EMPLOYEE_PENSION_CONTRIBUTION_AVC = 'EmployeePensionContributionAvc'.freeze
    DEDUCTIONS = 'Deductions'.freeze
    ADDITIONS = 'Additions'.freeze
    PENSIONABLE_EARNINGS = 'PensionableEarnings'.freeze

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      constantValues = PayrollValueType.constants.select { |c| PayrollValueType::const_get(c) == value }
      raise "Invalid ENUM value #{value} for class #PayrollValueType" if constantValues.empty?
      value
    end
  end
end
