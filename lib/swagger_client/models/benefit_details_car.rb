=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class BenefitDetailsCar
    attr_accessor :make_and_model

    attr_accessor :registration

    attr_accessor :first_registered

    attr_accessor :has_approved_emissions_value

    attr_accessor :co2_emissions

    attr_accessor :engine_size

    attr_accessor :zero_emissions_mileage

    attr_accessor :fuel_type

    attr_accessor :available_from

    attr_accessor :available_to

    attr_accessor :days_unavailable

    attr_accessor :list_price

    attr_accessor :non_standard_accessories

    attr_accessor :employee_capital_contributions

    attr_accessor :employee_private_contributions

    attr_accessor :free_fuel

    attr_accessor :fuel_available_from

    attr_accessor :fuel_available_to

    attr_accessor :free_fuel_reinstated

    # [readonly]
    attr_accessor :registered_prior_to1998

    # [readonly] The applicable rate based on CO2Emissions and Engine Size
    attr_accessor :rate

    # [readonly] The chargeable value of the car
    attr_accessor :chargeable_value

    # [readonly] The charge for the car for a full year, not taking in to account available dates or EmployeePrivateContributions
    attr_accessor :full_year_charge

    # [readonly]
    attr_accessor :cash_equivalent

    # [readonly]
    attr_accessor :cash_equivalent_fuel

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'make_and_model' => :'makeAndModel',
        :'registration' => :'registration',
        :'first_registered' => :'firstRegistered',
        :'has_approved_emissions_value' => :'hasApprovedEmissionsValue',
        :'co2_emissions' => :'co2Emissions',
        :'engine_size' => :'engineSize',
        :'zero_emissions_mileage' => :'zeroEmissionsMileage',
        :'fuel_type' => :'fuelType',
        :'available_from' => :'availableFrom',
        :'available_to' => :'availableTo',
        :'days_unavailable' => :'daysUnavailable',
        :'list_price' => :'listPrice',
        :'non_standard_accessories' => :'nonStandardAccessories',
        :'employee_capital_contributions' => :'employeeCapitalContributions',
        :'employee_private_contributions' => :'employeePrivateContributions',
        :'free_fuel' => :'freeFuel',
        :'fuel_available_from' => :'fuelAvailableFrom',
        :'fuel_available_to' => :'fuelAvailableTo',
        :'free_fuel_reinstated' => :'freeFuelReinstated',
        :'registered_prior_to1998' => :'registeredPriorTo1998',
        :'rate' => :'rate',
        :'chargeable_value' => :'chargeableValue',
        :'full_year_charge' => :'fullYearCharge',
        :'cash_equivalent' => :'cashEquivalent',
        :'cash_equivalent_fuel' => :'cashEquivalentFuel'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'make_and_model' => :'Object',
        :'registration' => :'Object',
        :'first_registered' => :'Object',
        :'has_approved_emissions_value' => :'Object',
        :'co2_emissions' => :'Object',
        :'engine_size' => :'Object',
        :'zero_emissions_mileage' => :'Object',
        :'fuel_type' => :'Object',
        :'available_from' => :'Object',
        :'available_to' => :'Object',
        :'days_unavailable' => :'Object',
        :'list_price' => :'Object',
        :'non_standard_accessories' => :'Object',
        :'employee_capital_contributions' => :'Object',
        :'employee_private_contributions' => :'Object',
        :'free_fuel' => :'Object',
        :'fuel_available_from' => :'Object',
        :'fuel_available_to' => :'Object',
        :'free_fuel_reinstated' => :'Object',
        :'registered_prior_to1998' => :'Object',
        :'rate' => :'Object',
        :'chargeable_value' => :'Object',
        :'full_year_charge' => :'Object',
        :'cash_equivalent' => :'Object',
        :'cash_equivalent_fuel' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'make_and_model',
        :'registration',
        :'first_registered',
        :'available_from',
        :'available_to',
        :'fuel_available_from',
        :'fuel_available_to',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::BenefitDetailsCar` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::BenefitDetailsCar`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'make_and_model')
        self.make_and_model = attributes[:'make_and_model']
      end

      if attributes.key?(:'registration')
        self.registration = attributes[:'registration']
      end

      if attributes.key?(:'first_registered')
        self.first_registered = attributes[:'first_registered']
      end

      if attributes.key?(:'has_approved_emissions_value')
        self.has_approved_emissions_value = attributes[:'has_approved_emissions_value']
      end

      if attributes.key?(:'co2_emissions')
        self.co2_emissions = attributes[:'co2_emissions']
      end

      if attributes.key?(:'engine_size')
        self.engine_size = attributes[:'engine_size']
      end

      if attributes.key?(:'zero_emissions_mileage')
        self.zero_emissions_mileage = attributes[:'zero_emissions_mileage']
      end

      if attributes.key?(:'fuel_type')
        self.fuel_type = attributes[:'fuel_type']
      end

      if attributes.key?(:'available_from')
        self.available_from = attributes[:'available_from']
      end

      if attributes.key?(:'available_to')
        self.available_to = attributes[:'available_to']
      end

      if attributes.key?(:'days_unavailable')
        self.days_unavailable = attributes[:'days_unavailable']
      end

      if attributes.key?(:'list_price')
        self.list_price = attributes[:'list_price']
      end

      if attributes.key?(:'non_standard_accessories')
        self.non_standard_accessories = attributes[:'non_standard_accessories']
      end

      if attributes.key?(:'employee_capital_contributions')
        self.employee_capital_contributions = attributes[:'employee_capital_contributions']
      end

      if attributes.key?(:'employee_private_contributions')
        self.employee_private_contributions = attributes[:'employee_private_contributions']
      end

      if attributes.key?(:'free_fuel')
        self.free_fuel = attributes[:'free_fuel']
      end

      if attributes.key?(:'fuel_available_from')
        self.fuel_available_from = attributes[:'fuel_available_from']
      end

      if attributes.key?(:'fuel_available_to')
        self.fuel_available_to = attributes[:'fuel_available_to']
      end

      if attributes.key?(:'free_fuel_reinstated')
        self.free_fuel_reinstated = attributes[:'free_fuel_reinstated']
      end

      if attributes.key?(:'registered_prior_to1998')
        self.registered_prior_to1998 = attributes[:'registered_prior_to1998']
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'chargeable_value')
        self.chargeable_value = attributes[:'chargeable_value']
      end

      if attributes.key?(:'full_year_charge')
        self.full_year_charge = attributes[:'full_year_charge']
      end

      if attributes.key?(:'cash_equivalent')
        self.cash_equivalent = attributes[:'cash_equivalent']
      end

      if attributes.key?(:'cash_equivalent_fuel')
        self.cash_equivalent_fuel = attributes[:'cash_equivalent_fuel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          make_and_model == o.make_and_model &&
          registration == o.registration &&
          first_registered == o.first_registered &&
          has_approved_emissions_value == o.has_approved_emissions_value &&
          co2_emissions == o.co2_emissions &&
          engine_size == o.engine_size &&
          zero_emissions_mileage == o.zero_emissions_mileage &&
          fuel_type == o.fuel_type &&
          available_from == o.available_from &&
          available_to == o.available_to &&
          days_unavailable == o.days_unavailable &&
          list_price == o.list_price &&
          non_standard_accessories == o.non_standard_accessories &&
          employee_capital_contributions == o.employee_capital_contributions &&
          employee_private_contributions == o.employee_private_contributions &&
          free_fuel == o.free_fuel &&
          fuel_available_from == o.fuel_available_from &&
          fuel_available_to == o.fuel_available_to &&
          free_fuel_reinstated == o.free_fuel_reinstated &&
          registered_prior_to1998 == o.registered_prior_to1998 &&
          rate == o.rate &&
          chargeable_value == o.chargeable_value &&
          full_year_charge == o.full_year_charge &&
          cash_equivalent == o.cash_equivalent &&
          cash_equivalent_fuel == o.cash_equivalent_fuel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [make_and_model, registration, first_registered, has_approved_emissions_value, co2_emissions, engine_size, zero_emissions_mileage, fuel_type, available_from, available_to, days_unavailable, list_price, non_standard_accessories, employee_capital_contributions, employee_private_contributions, free_fuel, fuel_available_from, fuel_available_to, free_fuel_reinstated, registered_prior_to1998, rate, chargeable_value, full_year_charge, cash_equivalent, cash_equivalent_fuel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
