=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class WorkerGroup
    attr_accessor :name

    attr_accessor :contribution_level_type

    attr_accessor :employee_contribution

    attr_accessor :employee_contribution_is_percentage

    attr_accessor :employer_contribution

    attr_accessor :employer_contribution_is_percentage

    # Increase Employer Contribution by this percentage of the Employee Contribution
    attr_accessor :employer_contribution_top_up_percentage

    attr_accessor :custom_threshold

    attr_accessor :lower_limit

    attr_accessor :upper_limit

    attr_accessor :papdis_group

    attr_accessor :papdis_sub_group

    # Only applicable if ContributionLevelType is Tp2020
    attr_accessor :local_authority_number

    # Only applicable if ContributionLevelType is Tp2020
    attr_accessor :school_employer_type

    # [readonly]
    attr_accessor :worker_group_id

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'contribution_level_type' => :'contributionLevelType',
        :'employee_contribution' => :'employeeContribution',
        :'employee_contribution_is_percentage' => :'employeeContributionIsPercentage',
        :'employer_contribution' => :'employerContribution',
        :'employer_contribution_is_percentage' => :'employerContributionIsPercentage',
        :'employer_contribution_top_up_percentage' => :'employerContributionTopUpPercentage',
        :'custom_threshold' => :'customThreshold',
        :'lower_limit' => :'lowerLimit',
        :'upper_limit' => :'upperLimit',
        :'papdis_group' => :'papdisGroup',
        :'papdis_sub_group' => :'papdisSubGroup',
        :'local_authority_number' => :'localAuthorityNumber',
        :'school_employer_type' => :'schoolEmployerType',
        :'worker_group_id' => :'workerGroupId',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'contribution_level_type' => :'Object',
        :'employee_contribution' => :'Object',
        :'employee_contribution_is_percentage' => :'Object',
        :'employer_contribution' => :'Object',
        :'employer_contribution_is_percentage' => :'Object',
        :'employer_contribution_top_up_percentage' => :'Object',
        :'custom_threshold' => :'Object',
        :'lower_limit' => :'Object',
        :'upper_limit' => :'Object',
        :'papdis_group' => :'Object',
        :'papdis_sub_group' => :'Object',
        :'local_authority_number' => :'Object',
        :'school_employer_type' => :'Object',
        :'worker_group_id' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'papdis_group',
        :'papdis_sub_group',
        :'local_authority_number',
        :'school_employer_type',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::WorkerGroup` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::WorkerGroup`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'contribution_level_type')
        self.contribution_level_type = attributes[:'contribution_level_type']
      end

      if attributes.key?(:'employee_contribution')
        self.employee_contribution = attributes[:'employee_contribution']
      end

      if attributes.key?(:'employee_contribution_is_percentage')
        self.employee_contribution_is_percentage = attributes[:'employee_contribution_is_percentage']
      end

      if attributes.key?(:'employer_contribution')
        self.employer_contribution = attributes[:'employer_contribution']
      end

      if attributes.key?(:'employer_contribution_is_percentage')
        self.employer_contribution_is_percentage = attributes[:'employer_contribution_is_percentage']
      end

      if attributes.key?(:'employer_contribution_top_up_percentage')
        self.employer_contribution_top_up_percentage = attributes[:'employer_contribution_top_up_percentage']
      end

      if attributes.key?(:'custom_threshold')
        self.custom_threshold = attributes[:'custom_threshold']
      end

      if attributes.key?(:'lower_limit')
        self.lower_limit = attributes[:'lower_limit']
      end

      if attributes.key?(:'upper_limit')
        self.upper_limit = attributes[:'upper_limit']
      end

      if attributes.key?(:'papdis_group')
        self.papdis_group = attributes[:'papdis_group']
      end

      if attributes.key?(:'papdis_sub_group')
        self.papdis_sub_group = attributes[:'papdis_sub_group']
      end

      if attributes.key?(:'local_authority_number')
        self.local_authority_number = attributes[:'local_authority_number']
      end

      if attributes.key?(:'school_employer_type')
        self.school_employer_type = attributes[:'school_employer_type']
      end

      if attributes.key?(:'worker_group_id')
        self.worker_group_id = attributes[:'worker_group_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          contribution_level_type == o.contribution_level_type &&
          employee_contribution == o.employee_contribution &&
          employee_contribution_is_percentage == o.employee_contribution_is_percentage &&
          employer_contribution == o.employer_contribution &&
          employer_contribution_is_percentage == o.employer_contribution_is_percentage &&
          employer_contribution_top_up_percentage == o.employer_contribution_top_up_percentage &&
          custom_threshold == o.custom_threshold &&
          lower_limit == o.lower_limit &&
          upper_limit == o.upper_limit &&
          papdis_group == o.papdis_group &&
          papdis_sub_group == o.papdis_sub_group &&
          local_authority_number == o.local_authority_number &&
          school_employer_type == o.school_employer_type &&
          worker_group_id == o.worker_group_id &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, contribution_level_type, employee_contribution, employee_contribution_is_percentage, employer_contribution, employer_contribution_is_percentage, employer_contribution_top_up_percentage, custom_threshold, lower_limit, upper_limit, papdis_group, papdis_sub_group, local_authority_number, school_employer_type, worker_group_id, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
