=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class Exb
    attr_accessor :additions_amount

    attr_accessor :additions_description

    attr_accessor :deductions_amount

    attr_accessor :deductions_description

    # [readonly] The number of employees with a P11D
    attr_accessor :employee_count

    # [readonly] Total value of benefits, not including any deductions or additions
    attr_accessor :total_benefits

    # [readonly] Total value of benefits
    attr_accessor :total_adjusted_benefits

    # [readonly] The Class 1A NICS Rate
    attr_accessor :nics_rate

    # [readonly] NICs Payable
    attr_accessor :nics_payable

    attr_accessor :expenses_and_benefits

    attr_accessor :i_rmark

    attr_accessor :xml

    attr_accessor :tax_year

    attr_accessor :employer_references

    attr_accessor :gov_talk_submission

    # [readonly] The unique id of the object
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additions_amount' => :'additionsAmount',
        :'additions_description' => :'additionsDescription',
        :'deductions_amount' => :'deductionsAmount',
        :'deductions_description' => :'deductionsDescription',
        :'employee_count' => :'employeeCount',
        :'total_benefits' => :'totalBenefits',
        :'total_adjusted_benefits' => :'totalAdjustedBenefits',
        :'nics_rate' => :'nicsRate',
        :'nics_payable' => :'nicsPayable',
        :'expenses_and_benefits' => :'expensesAndBenefits',
        :'i_rmark' => :'iRmark',
        :'xml' => :'xml',
        :'tax_year' => :'taxYear',
        :'employer_references' => :'employerReferences',
        :'gov_talk_submission' => :'govTalkSubmission',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additions_amount' => :'Object',
        :'additions_description' => :'Object',
        :'deductions_amount' => :'Object',
        :'deductions_description' => :'Object',
        :'employee_count' => :'Object',
        :'total_benefits' => :'Object',
        :'total_adjusted_benefits' => :'Object',
        :'nics_rate' => :'Object',
        :'nics_payable' => :'Object',
        :'expenses_and_benefits' => :'Object',
        :'i_rmark' => :'Object',
        :'xml' => :'Object',
        :'tax_year' => :'Object',
        :'employer_references' => :'Object',
        :'gov_talk_submission' => :'Object',
        :'id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'additions_description',
        :'deductions_description',
        :'i_rmark',
        :'xml',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Exb` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Exb`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additions_amount')
        self.additions_amount = attributes[:'additions_amount']
      end

      if attributes.key?(:'additions_description')
        self.additions_description = attributes[:'additions_description']
      end

      if attributes.key?(:'deductions_amount')
        self.deductions_amount = attributes[:'deductions_amount']
      end

      if attributes.key?(:'deductions_description')
        self.deductions_description = attributes[:'deductions_description']
      end

      if attributes.key?(:'employee_count')
        self.employee_count = attributes[:'employee_count']
      end

      if attributes.key?(:'total_benefits')
        self.total_benefits = attributes[:'total_benefits']
      end

      if attributes.key?(:'total_adjusted_benefits')
        self.total_adjusted_benefits = attributes[:'total_adjusted_benefits']
      end

      if attributes.key?(:'nics_rate')
        self.nics_rate = attributes[:'nics_rate']
      end

      if attributes.key?(:'nics_payable')
        self.nics_payable = attributes[:'nics_payable']
      end

      if attributes.key?(:'expenses_and_benefits')
        self.expenses_and_benefits = attributes[:'expenses_and_benefits']
      end

      if attributes.key?(:'i_rmark')
        self.i_rmark = attributes[:'i_rmark']
      end

      if attributes.key?(:'xml')
        self.xml = attributes[:'xml']
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'employer_references')
        self.employer_references = attributes[:'employer_references']
      end

      if attributes.key?(:'gov_talk_submission')
        self.gov_talk_submission = attributes[:'gov_talk_submission']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additions_amount == o.additions_amount &&
          additions_description == o.additions_description &&
          deductions_amount == o.deductions_amount &&
          deductions_description == o.deductions_description &&
          employee_count == o.employee_count &&
          total_benefits == o.total_benefits &&
          total_adjusted_benefits == o.total_adjusted_benefits &&
          nics_rate == o.nics_rate &&
          nics_payable == o.nics_payable &&
          expenses_and_benefits == o.expenses_and_benefits &&
          i_rmark == o.i_rmark &&
          xml == o.xml &&
          tax_year == o.tax_year &&
          employer_references == o.employer_references &&
          gov_talk_submission == o.gov_talk_submission &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additions_amount, additions_description, deductions_amount, deductions_description, employee_count, total_benefits, total_adjusted_benefits, nics_rate, nics_payable, expenses_and_benefits, i_rmark, xml, tax_year, employer_references, gov_talk_submission, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
