=begin
#Staffology Payroll API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1
Contact: duane@staffology.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  # CIS Payment and Deduction Statement (CISOL1)
  class CisStatement
    attr_accessor :tax_year

    # [readonly]
    attr_accessor :tax_month

    # [readonly]
    attr_accessor :contractor_name

    attr_accessor :contractor_address

    # [readonly]
    attr_accessor :contractor_office_number

    # [readonly]
    attr_accessor :contractor_paye_reference

    attr_accessor :subcontractor_name

    # [readonly]
    attr_accessor :sub_contractor_utr

    # [readonly]
    attr_accessor :verification_number

    # [readonly] Gross Amount Paid (Excl VAT)
    attr_accessor :gross_amount_paid

    # [readonly]
    attr_accessor :cost_of_materials

    # [readonly]
    attr_accessor :amount_liable_to_deduction

    # [readonly]
    attr_accessor :amount_deducted

    # [readonly]
    attr_accessor :amount_payable

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_year' => :'taxYear',
        :'tax_month' => :'taxMonth',
        :'contractor_name' => :'contractorName',
        :'contractor_address' => :'contractorAddress',
        :'contractor_office_number' => :'contractorOfficeNumber',
        :'contractor_paye_reference' => :'contractorPayeReference',
        :'subcontractor_name' => :'subcontractorName',
        :'sub_contractor_utr' => :'subContractorUtr',
        :'verification_number' => :'verificationNumber',
        :'gross_amount_paid' => :'grossAmountPaid',
        :'cost_of_materials' => :'costOfMaterials',
        :'amount_liable_to_deduction' => :'amountLiableToDeduction',
        :'amount_deducted' => :'amountDeducted',
        :'amount_payable' => :'amountPayable'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_year' => :'Object',
        :'tax_month' => :'Object',
        :'contractor_name' => :'Object',
        :'contractor_address' => :'Object',
        :'contractor_office_number' => :'Object',
        :'contractor_paye_reference' => :'Object',
        :'subcontractor_name' => :'Object',
        :'sub_contractor_utr' => :'Object',
        :'verification_number' => :'Object',
        :'gross_amount_paid' => :'Object',
        :'cost_of_materials' => :'Object',
        :'amount_liable_to_deduction' => :'Object',
        :'amount_deducted' => :'Object',
        :'amount_payable' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'contractor_name',
        :'contractor_office_number',
        :'contractor_paye_reference',
        :'sub_contractor_utr',
        :'verification_number',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::CisStatement` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::CisStatement`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      end

      if attributes.key?(:'tax_month')
        self.tax_month = attributes[:'tax_month']
      end

      if attributes.key?(:'contractor_name')
        self.contractor_name = attributes[:'contractor_name']
      end

      if attributes.key?(:'contractor_address')
        self.contractor_address = attributes[:'contractor_address']
      end

      if attributes.key?(:'contractor_office_number')
        self.contractor_office_number = attributes[:'contractor_office_number']
      end

      if attributes.key?(:'contractor_paye_reference')
        self.contractor_paye_reference = attributes[:'contractor_paye_reference']
      end

      if attributes.key?(:'subcontractor_name')
        self.subcontractor_name = attributes[:'subcontractor_name']
      end

      if attributes.key?(:'sub_contractor_utr')
        self.sub_contractor_utr = attributes[:'sub_contractor_utr']
      end

      if attributes.key?(:'verification_number')
        self.verification_number = attributes[:'verification_number']
      end

      if attributes.key?(:'gross_amount_paid')
        self.gross_amount_paid = attributes[:'gross_amount_paid']
      end

      if attributes.key?(:'cost_of_materials')
        self.cost_of_materials = attributes[:'cost_of_materials']
      end

      if attributes.key?(:'amount_liable_to_deduction')
        self.amount_liable_to_deduction = attributes[:'amount_liable_to_deduction']
      end

      if attributes.key?(:'amount_deducted')
        self.amount_deducted = attributes[:'amount_deducted']
      end

      if attributes.key?(:'amount_payable')
        self.amount_payable = attributes[:'amount_payable']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_year == o.tax_year &&
          tax_month == o.tax_month &&
          contractor_name == o.contractor_name &&
          contractor_address == o.contractor_address &&
          contractor_office_number == o.contractor_office_number &&
          contractor_paye_reference == o.contractor_paye_reference &&
          subcontractor_name == o.subcontractor_name &&
          sub_contractor_utr == o.sub_contractor_utr &&
          verification_number == o.verification_number &&
          gross_amount_paid == o.gross_amount_paid &&
          cost_of_materials == o.cost_of_materials &&
          amount_liable_to_deduction == o.amount_liable_to_deduction &&
          amount_deducted == o.amount_deducted &&
          amount_payable == o.amount_payable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_year, tax_month, contractor_name, contractor_address, contractor_office_number, contractor_paye_reference, subcontractor_name, sub_contractor_utr, verification_number, gross_amount_paid, cost_of_materials, amount_liable_to_deduction, amount_deducted, amount_payable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
